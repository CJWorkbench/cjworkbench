#!/bin/bash
#
# Run a Dockerized development environment.
#
# Run `bin/dev` for help.
#
# In broad strokes:
#
# * Each service is its own process, prefixed with "cjworkbench_"
# * We volume-mount excessively: for instance, node_modules is mounted
# * Running ./manage.py or npm creates a new container that mounts the same
#   volumes.

set -e
#set -x

docker_compose() {
  DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 docker-compose "$@"
}

cd "$(dirname "$0")"/..

# docker-compose with overrides
#
# https://github.com/docker/compose/issues/1896 gives docker-compose's rationale
# for keeping our 'migrate' and 'test' runners outside of docker-compose.yml.
docker_compose_with_commands() {
  touch ./stripe.env  # services.stripe.env_file[0] == stripe.env. Empty is allowed.
  docker_compose -f docker-compose.yml -f docker-compose.commands.yml "$@"
}

refresh_suggested_modules() {
  docker_compose up -d minio
  sleep 1
  docker_compose_with_commands run --rm pydev /opt/venv/django/bin/python manage.py import-modules $(cat cjwstate/modules/suggested-modules.txt)
}

stripe_setup() {
  if grep -q STRIPE_WEBHOOK_SIGNING_SECRET stripe.env; then
    echo "Stripe is already authenticated. To re-authenticate, delete 'stripe.env' and begin anew" >&2
  else
    # overwrite stripe.env if it exists (it isn't completely set up)
    echo -e "STRIPE_PUBLIC_API_KEY=$1\nSTRIPE_API_KEY=$2" > stripe.env
    webhook_signing_secret="$(stripe_run listen --print-secret)"
    if test "$?" != "0"; then
      echo "Here is a problem" >&2
      echo "$webhook_signing_secret" >&2
      exit 1
    fi
    echo -e "STRIPE_WEBHOOK_SIGNING_SECRET=$webhook_signing_secret" >> stripe.env
  fi

  docker_compose_with_commands run --rm pydev /opt/venv/django/bin/python manage.py import-plans-from-stripe
}

stripe_run() {
  if ! docker_compose_with_commands run -T --rm stripe "$@"; then
    echo "Failure connecting to Stripe. Run 'bin/dev stripe-setup pk_... sk_...' to pass valid credentials." >&2
    exit 1
  fi
}

print_usage() {
  echo "Usage: $0 COMMAND ARGS..." >&2
  echo >&2
  echo 'Where COMMAND is one of:' >&2
  echo '  clean -- wipe all data' >&2
  echo '  develop-module DIR -- run "./manage.py develop-module DIR"' >&2
  echo '  npm ARGS -- run "npm ARGS..." in a Node environment' >&2
  echo '  python ARGS -- run "/opt/venv/django/bin/python ARGS..." in a Python environment' >&2
  echo '  pybabel ARGS -- run "/opt/venv/django/bin/pybabel ARGS..." in a Python environment' >&2
  echo '  extract-messages -- extract translation messages from js, python, and templates and merge them into one file per locale' >&2
  echo '  migrate -- run database SQL in flyway/sql/*.sql' >&2
  echo '  reformat-code -- make code conform to (Black) styleguide' >&2
  echo '  refresh-suggested-modules -- refresh without a whole "start"' >&2
  echo '  stripe-setup pk_test_ABC... sk_test_ABC... -- prompt and fill in "stripe.json" file' >&2
  echo '  stripe-listen -- run Stripe (requires "stripe.json" file)' >&2
  echo '  run SERVICE ARGS -- run "docker-compose run -rm SERVICE ARGS..."' >&2
  echo '  quickstart -- start database, RabbitMQ, Webpack and Django without updates' >&2
  echo '  sql -- open a psql prompt in the dev database (it must be up)' >&2
  echo '  start -- start database, RabbitMQ, Webpack and Django' >&2
  echo '  stop -- stop services created by start' >&2
  echo '  test-sql -- open a psql prompt in the test database (it must be up)' >&2
  echo '  thrift-compile -- recompile .thrift files' >&2
  echo '  thrift ARGS -- run "thrift ARGS..." (see cjwkernel/thrift/)' >&2
  echo '  unittest ARGS -- run "./manage.py test ARGS..."' >&2
}

COMMAND="$1"
shift || true

case "$COMMAND" in
  "clean")
    # Delete all files.
    #
    # Why use docker? Because files written by Docker are owned by root, so
    # `rm local_mail/*` will fail if we run outside of Docker.
    #
    # Why use docker-compose instead of, say, `docker run --rm alpine:3.8`?
    # Because mounting this directory as a volume requires an absolute path,
    # and finding the absolute path takes different logic on Windows than on
    # non-Windows.
    #
    # docker-compose is much slower, but it takes fewer lines of code.
    docker_compose_with_commands run --rm pydev rm -rf local_mail/*

    # Wipe volumes
    docker_compose_with_commands down -t0 -v # -v removes named volumes
    docker_compose_with_commands rm -f -v # -v removes _anonymous_ volumes
    ;;

  "exec")
    docker_compose exec "$@"
    ;;

  "npm")
    docker_compose run --rm webpack npm "$@"
    ;;

  "python")
    docker_compose_with_commands run --rm pydev /opt/venv/django/bin/python "$@"
    ;;

  "thrift")
    docker_compose_with_commands run --rm pydev /opt/venv/django/bin/thrift "$@"
    ;;

  "migrate")
    docker_compose_with_commands run --rm migrate
    ;;

  "pybabel")
    # For some weird reason, pybabel can't find our source files
    # even when run with our project root as working directory.
    # Works if we set `PYTHONPATH` to `.` (maybe `PYTHONPATH` is overriden somewhere?)
    docker_compose_with_commands run --rm -e PYTHONPATH=. pydev /opt/venv/django/bin/pybabel "$@"
    ;;
  
  "extract-messages")
    docker_compose_with_commands run --rm -e PYTHONPATH=. pydev /opt/venv/django/bin/python cjworkbench/i18n/catalogs/merge.py prepare
    
    # We use `--clean` so that the resulting `message.po` files only have the js translations 
    # We use `--overwrite` so that new default messages will be written to the `message.po` of the source locale 
    docker_compose run --rm webpack npm run extract -- --clean --overwrite

    # linguijs creates files we don't want. Why does it leave them behind?
    # dunno. Clean up after it.
    docker_compose run --rm webpack rm -rf assets/locale/_build assets/locale/*/messages.js

    # 0. This must come after `npm run extract`, since `npm run extract`
    #    removes (or comments out, if we use other settings) any messages it can't find in js code
    # 1. For PYTHONPATH, ditto `pybabel` command above
    # 2. We want pybabel to extract default messages in single-line comments,
    #    hence we must disable line wrapping when extracting.
    #    However, looks like `--no-wrap` does not work for comments,
    #    so we have to set a big enough max line width to fit every (even remotely) sensible default message
    # 3. We extract the pot file in the directory of our source locale,
    #    for our merge script to find
    docker_compose_with_commands run --rm -e PYTHONPATH=. pydev /opt/venv/django/bin/pybabel extract \
        -w 10000000 -F pybabel.cfg \
        -o assets/locale/en/messages.pot .

    # for PYTHONPATH, ditto `pybabel` command above
    docker_compose_with_commands run --rm -e PYTHONPATH=. pydev /opt/venv/django/bin/python cjworkbench/i18n/catalogs/merge.py merge
    ;;

  "unittest")
    # Overwrite the "command" so we can incorporate "$@".
    docker_compose_with_commands run --rm testmigrate
    docker_compose_with_commands run --rm unittest "$@"
    ;;

  "develop-module")
    MODULE="$1" docker_compose_with_commands run --rm develop-module sh -c "/app/cjwkernel/setup-sandboxes.sh only-readonly && /opt/venv/django/bin/python manage.py develop-module ../$1"
    exit 1
    ;;

  "thrift-compile")
    set -x
    docker build --pull docker/thrift  # slow, and shows progress
    thrift_image="$(docker build -q docker/thrift)"  # same line again -- now it's cached
    echo $thrift_image
    docker run -it --rm \
      -v "$(pwd)/cjwkernel":/cjwkernel \
      --workdir / \
      "$thrift_image" \
      thrift --strict --gen py:slots --out . cjwkernel/thrift.thrift
    exit 0
    ;;

  "sql")
    docker_compose exec database psql -U cjworkbench "$@"
    ;;

  "test-sql")
    docker_compose exec testdatabase psql -U cjworkbench "$@"
    ;;

  "reformat-code")
    docker_compose_with_commands run --rm pydev /opt/venv/django/bin/black .
    docker_compose run --rm webpack npm run reformat-code
    ;;

  "start")
    # Make sure every dev has the same versions of Python/Node by pulling
    docker_compose_with_commands build --pull
    docker_compose_with_commands run --rm migrate

    refresh_suggested_modules

    # Make sure JavaScript deps are up to date
    docker_compose run --rm webpack npm install

    # Start Django and Webpack
    docker_compose up -t0 --abort-on-container-exit "$@"
    ;;

  "refresh-suggested-modules")
    refresh_suggested_modules
    ;;

  "stripe-setup")
    stripe_setup "$1" "$2"
    ;;

  "stripe-listen")
    stripe_run
    ;;

  "quickstart")
    # Start Django and Webpack
    docker_compose_with_commands run --rm migrate
    docker_compose up -t0 --abort-on-container-exit "$@"
    ;;

  "stop")
    docker_compose_with_commands down -t0 --remove-orphans
    docker_compose_with_commands rm -f -v # -v removes _anonymous_ volumes
    ;;

  "run")
    docker_compose_with_commands run --rm "$@"
    ;;

  *)
    print_usage
    exit 1
    ;;
esac
