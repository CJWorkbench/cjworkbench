#!/bin/bash
#
# Run a Dockerized development environment:
#
# * ./bin/dev-in-docker start: migrate once and start all services
# * ./bin/dev-in-docker python ./manage.py migrate: migrate database
# * ./bin/dev-in-docker pipenv install foo: run pipenv
# * ./bin/dev-in-docker test: run unit tests
# * ./bin/dev-in-docker npm install foo: run npm
# * ./bin/dev-in-docker stop: kill everything
#
# In broad strokes:
#
# * Each service is its own process, prefixed with "cjworkbench_dev"
# * We volume-mount excessively: for instance, node_modules is mounted
# * Running ./manage.py or npm creates a new container that mounts the same
#   volumes.

set -e
#set -x

docker_compose() {
  docker-compose "$@"
}

cd "$(dirname "$0")"/..

# docker-compose with overrides
#
# https://github.com/docker/compose/issues/1896 gives docker-compose's rationale
# for keeping our 'migrate' and 'test' runners outside of docker-compose.yml.
docker_compose_with_commands() {
  docker-compose \
    -f docker-compose.yml \
    -f docker-compose.commands.yml \
    "$@"
}

print_usage() {
  echo "Usage: $0 COMMAND ARGS..." >&2
  echo >&2
  echo 'Where COMMAND is one of:' >&2
  echo '  develop-module DIR URL -- runs "./manage.py develop-module ARGS..."' >&2
  echo '  npm ARGS -- runs "npm ARGS..." in a Node environment' >&2
  echo '  pipenv ARGS -- runs "pipenv ARGS..." in a Python environment' >&2
  echo '  python ARGS -- runs "pipenv run python ARGS..." in a Python environment' >&2
  echo '  start -- starts database, Redis, Webpack and Python' >&2
  echo '  stop -- stops services created by start' >&2
  echo '  unittest ARGS -- runs "./manage.py test ARGS..."' >&2
  echo '  run SERVICE ARGS -- runs "docker-compose run -rm SERVICE ARGS..."' >&2
}

case "$1" in
  "npm")
    shift
    docker_compose run --rm webpack npm "$@"
    ;;

  "python")
    shift
    docker_compose run --rm frontend pipenv run python "$@"
    ;;

  "pipenv")
    shift
    docker_compose run --rm frontend pipenv "$@"
    ;;

  "unittest")
    shift
    docker_compose_with_commands run --rm unittest pipenv run python ./manage.py test "$@"
    ;;

  "develop-module")
    echo 'FIXME gotta re-develop this one to work with docker-compose somehow' >&2
    exit 1
    ;;

  "start")
    docker_compose_with_commands run --rm migrate
    docker_compose up
    ;;

  "stop")
    docker_compose_with_commands down -t0
    docker_compose_with_commands rm -f -v # -v removes _anonymous_ volumes
    ;;

  "run")
    shift
    docker_compose_with_commands run --rm "$@"
    ;;

  "")
    print_usage
    exit 1
    ;;
  *)
esac
