# Start with https://github.com/moby/moby/blob/f4d41f1/profiles/seccomp/seccomp_default.go
#
# ... and then edit:
# * allow clone() completely (to forgo the hassle of bitmasks)
# * allow arch_prctl, modify_ldt (they're arch-specific in seccomp_default.go)
# * Comment out (and explain!) syscalls we think we don't need
accept
accept4
access
#adjtimex -- [2019-11-07, adamhooper] I can't see why we'd need this
arch_prctl
alarm
bind
brk
capget
capset
chdir
chmod
chown
chown32
clock_getres
clock_gettime
clock_nanosleep
clone
close
connect
copy_file_range
creat
dup
dup2
dup3
epoll_create
epoll_create1
epoll_ctl
epoll_ctl_old
epoll_pwait
epoll_wait
epoll_wait_old
eventfd
eventfd2
execve
execveat
exit
exit_group
faccessat
fadvise64
fadvise64_64
fallocate
fanotify_mark
fchdir
fchmod
fchmodat
fchown
fchown32
fchownat
fcntl
fcntl64
fdatasync
fgetxattr
flistxattr
flock
fork
fremovexattr
fsetxattr
fstat
fstat64
fstatat64
fstatfs
fstatfs64
fsync
ftruncate
ftruncate64
futex
futimesat
getcpu
getcwd
getdents
getdents64
getegid
getegid32
geteuid
geteuid32
getgid
getgid32
getgroups
getgroups32
getitimer
getpeername
getpgid
getpgrp
getpid
getppid
getpriority
getrandom
getresgid
getresgid32
getresuid
getresuid32
getrlimit
get_robust_list
getrusage
getsid
getsockname
getsockopt
get_thread_area
gettid
gettimeofday
getuid
getuid32
getxattr
inotify_add_watch
inotify_init
inotify_init1
inotify_rm_watch
io_cancel
ioctl
io_destroy
io_getevents
io_pgetevents
ioprio_get
ioprio_set
io_setup
io_submit
io_uring_enter
io_uring_register
io_uring_setup
ipc
kill
lchown
lchown32
lgetxattr
link
linkat
listen
listxattr
llistxattr
_llseek
lremovexattr
lseek
lsetxattr
lstat
lstat64
madvise
memfd_create
mincore
mkdir
mkdirat
mknod
mknodat
mlock
mlock2
mlockall
mmap
mmap2
modify_ldt
mprotect
mq_getsetattr
mq_notify
mq_open
mq_timedreceive
mq_timedsend
mq_unlink
mremap
msgctl
msgget
msgrcv
msgsnd
msync
munlock
munlockall
munmap
nanosleep
newfstatat
_newselect
open
openat
pause
pipe
pipe2
poll
ppoll
prctl
pread64
preadv
preadv2
prlimit64
pselect6
pwrite64
pwritev
pwritev2
read
readahead
readlink
readlinkat
readv
recv
recvfrom
recvmmsg
recvmsg
remap_file_pages
removexattr
rename
renameat
renameat2
restart_syscall
rmdir
rt_sigaction
rt_sigpending
rt_sigprocmask
rt_sigqueueinfo
rt_sigreturn
rt_sigsuspend
rt_sigtimedwait
rt_tgsigqueueinfo
sched_getaffinity
sched_getattr
sched_getparam
sched_get_priority_max
sched_get_priority_min
sched_getscheduler
sched_rr_get_interval
sched_setaffinity
sched_setattr
sched_setparam
sched_setscheduler
sched_yield
select
semctl
semget
semop
semtimedop
send
sendfile
sendfile64
sendmmsg
sendmsg
sendto
#setfsgid -- [2019-11-07, adamhooper] prevent privilege escalation (in case there's a 0day with capabilities)
#setfsgid32
#setfsuid
#setfsuid32
#setgid
#setgid32
#setgroups
#setgroups32
setitimer
setpgid
setpriority
#setregid -- [2019-11-07, adamhooper] prevent privilege escalation (in case there's a 0day with capabilities)
#setregid32
#setresgid
#setresgid32
#setresuid
#setresuid32
#setreuid
#setreuid32
#setrlimit -- [2019-11-07, adamhooper] so modules don't try to exceed their resource limits
set_robust_list
setsid
setsockopt
set_thread_area
set_tid_address
#setuid -- [2019-11-07, adamhooper] prevent privilege escalation (in case there's a 0day with capabilities)
#setuid32
setxattr
shmat
shmctl
shmdt
shmget
shutdown
sigaltstack
signalfd
signalfd4
sigprocmask
sigreturn
#seccomp -- [2019-11-07, adamhooper] modules shouldn't fiddle with sandboxing
socket
socketcall
socketpair
splice
stat
stat64
statfs
statfs64
statx
symlink
symlinkat
sync
sync_file_range
syncfs
sysinfo
#syslog -- [2019-11-07, adamhooper] so modules can't flood our logs
tee
tgkill
time
timer_create
timer_delete
timerfd_create
timerfd_gettime
timerfd_settime
timer_getoverrun
timer_gettime
timer_settime
times
tkill
truncate
truncate64
ugetrlimit
umask
uname
unlink
unlinkat
utime
utimensat
utimes
vfork
vmsplice
wait4
waitid
waitpid
write
writev
