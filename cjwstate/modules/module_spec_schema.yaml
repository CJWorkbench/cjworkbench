$schema: https://json-schema.org/schema#
type: object
required: [ id_name, name, category, parameters ]
properties:
    id_name:
        type: string
        description: Name that programmers use to uniquely define this Module
    name:
        type: string
        description: Name that appears atop the Step and in Module Search
    category:
        type: string
        description: Category that appears in Module Search
        enum: [ Add data, Combine, Scrape, Clean, Analyze, Code, Visualize, Other ]
    deprecated:
        type: object
        description: "If set, warning to show the user because we want to delete this module."
        required: [ end_date, message ]
        properties:
            end_date:
                type: string
                format: date
                description: "Date when the module will stop working."
            message:
                type: string
                description: "Instructions for users to achieve the same functionality."
    icon:
        type: string
        description: "Icon name that appears in Module Search and atop the Step (default: 'url')"
    link:
        type: string
        description: "URL the code comes from (default: '')"
        format: uri
    description:
        type: string
        description: "Description that appears in Module Search (default: '')"
    loads_data:
        type: boolean
        description: "True if this Step can be used as the first module in a Tab. (default: False)."
    uses_data:
        type: boolean
        description: "True if this Step can be used _after_ the first module in a Tab. (default: !loads_data)."
    html_output:
        type: boolean
        description: "True if this Step outputs an iframe (default: False)"
    has_zen_mode:
        type: boolean
        description: "True if the user can zoom in on only this one Step (default: False)"
    row_action_menu_entry_title:
        type: string
        description: "If set, text of a selected-rows menu entry that adds this Step"
    help_url:
        type: string
        description: "Path (not URL) of documentation (format: x/y/x; default: '')"
    param_schema:
        type: object
        description: "Schema of parameters generated by `parameters` (required only when using custom parameters`)"
        additionalProperties:
            $ref: '#/definitions/dtypes/any'
    parameters_version:
        type: number
        description: "For internal modules only: increment this every time you edit migrate_params()"
    parameters:
        type: array
        description: "Specification for how to give a form to the user and give values to the fetch/render functions"
        items:
            $ref: '#/definitions/param_specs/_toplevel'

definitions:
    # param_specs: Parameter specifications that module author writes, 
    # which in turn define both the UI and the storage format (DType)
    param_specs:
        # _lib: properties that are used in more than one param_type.
        _lib:
            name:
                type: string
                description: "Name that may appears with the form field (only for some types) (default: '')"
            placeholder:
                type: string
                description: "Text that appears when the form field has no value (only for some types) (default: '')"
            column_types:
                type: array
                description: "List of allowed input column types. Workbench will not invoke the module with wrong-type columns."
                items:
                    oneOf:
                      - const: text
                      - const: number
                      - const: datetime
        # _common: use Yaml "anchors" so we can reuse common JSON in all our types.
        # (They tend to use many similar properties, but not all.) JSON Schema has
        # its own '$ref' syntax, but that doesn't let us "extend" an object -- i.e.,
        # add new properties on top of the $ref-ed ones.
        _common: &common_param_spec
            type: object
            required: [ id_name, type ]
            properties: &common_param_spec_properties
                id_name:
                    type: string
                    description: Name that programmers use to uniquely identify this parameter
                visible_if:
                    type: object
                    required: [ id_name, value ]
                    properties:
                        id_name:
                            type: string
                            description: id_name of the param we will investigate
                        value:
                            description: "Value we expect, or Array of values we expect (there are so many unique cases, it's not worth documenting them all)"
                        invert:
                            type: boolean
                            description: "If true, do the opposite"
        statictext:
            <<: *common_param_spec
            required: [ id_name, type, name ]
            properties:
                <<: *common_param_spec_properties
                type: { const: statictext }
                name:
                    type: string
                    description: Text to display
        string:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: string }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                multiline:
                  type: boolean
                  description: "If True, appear as a multiline <textarea>. (default: False)"
                default:
                    type: string
                    description: "Value to set on the user's behalf (default null)"
        integer:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: integer }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                default:
                    type: integer
                    description: "Value to set on the user's behalf (default null)"
        float:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: float }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                default:
                    type: number
                    description: "Value to set on the user's behalf (default null)"
        checkbox:
            <<: *common_param_spec
            required: [ id_name, type, name ]
            properties:
                <<: *common_param_spec_properties
                type: { const: checkbox }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                default:
                    type: boolean
                    description: "Value to set on the user's behalf (default False)"
        menu:
            <<: *common_param_spec
            required: [ id_name, type, options ]
            properties:
                <<: *common_param_spec_properties
                type: { const: menu }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                options:
                    type: array
                    description: Menu options
                    items:
                        oneOf:
                          - const: separator
                          - type: object
                            description: One menu option (value and label)
                            required: [ value, label ]
                            properties:
                                value:
                                    type: string
                                    description: Value the module code uses
                                    pattern: "^[a-z_][a-z0-9_]*$"
                                label:
                                    type: string
                                    description: Text the user sees
                default:
                    type: string
                    description: "Value to set on the user's behalf (default items[0].value)"
        radio:
            <<: *common_param_spec
            required: [ id_name, type, options ]
            properties:
                <<: *common_param_spec_properties
                type: { const: radio }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                options:
                    type: array
                    description: Radio options
                    items:
                      - type: object
                        description: One radio option (value and label)
                        required: [ value, label ]
                        properties:
                            value:
                                oneOf:
                                  - type: string
                                    description: Value the module code uses
                                    pattern: "^[a-z_][a-z0-9_]*$"
                                  - type: boolean
                                    description: Value the module code uses
                            label:
                                type: string
                                description: Text the user sees
                default:
                    oneOf:
                      - type: string
                        description: "Value to set on the user's behalf (default items[0].value)"
                      - type: boolean
        button:
            <<: *common_param_spec
            required: [ id_name, type, name ]
            properties:
                <<: *common_param_spec_properties
                type: { const: button }
                name:
                    type: string
                    description: Button text
        numberformat:
            <<: *common_param_spec
            required: [ id_name, type, name ]
            properties:
                <<: *common_param_spec_properties
                type: { const: numberformat }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
        column:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: column }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                column_types: { $ref: '#/definitions/param_specs/_lib/column_types' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                tab_parameter: { type: string }  # optional
        multicolumn:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: multicolumn }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
                column_types: { $ref: '#/definitions/param_specs/_lib/column_types' }
                tab_parameter: { type: string }  # optional
        tab:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: tab }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
        multitab:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: multitab }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
        multichartseries:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: multichartseries }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
        secret:
            <<: *common_param_spec
            required: [ id_name, type, secret_logic ]
            properties:
                <<: *common_param_spec_properties
                type: { const: secret }
                secret_logic:
                    oneOf:
                      - type: object
                        required: [ provider, service ]
                        properties:
                            provider: { const: oauth1a }
                            service:
                                oneOf:
                                    - const: twitter
                      - type: object
                        required: [ provider, service ]
                        properties:
                            provider: { const: oauth2 }
                            service:
                                oneOf:
                                    - const: google
                                    - const: intercom
                      - type: object
                        required: [ provider, service ]
                        properties:
                            provider: { const: oauth }  # DEPRECATED synonym for "oauth2"
                            service:
                                oneOf:
                                    - const: intercom
                      - type: object
                        required: [ provider, pattern, label, placeholder, help, help_url, help_url_prompt ]
                        properties:
                            provider: { const: string }
                            label:
                                type: string
                                description: Text above the field
                            pattern:
                                type: string
                                description: "Regex (with re2 syntax) the secret value must match"
                            placeholder:
                                type: string
                                description: Text to show when field is empty
                            help:
                                type: string
                                description: Instructions for filling the field
                            help_url_prompt:
                                type: string
                                description: 'Text on link at end of field, e.g. "Take me there"'
                            help_url:
                                type: string
                                description: 'Link at end of field, e.g. to sign in to service for API key'
        file:
            <<: *common_param_spec
            required: [ id_name, type ]
            properties:
                <<: *common_param_spec_properties
                type: { const: file }
        gdrivefile:
            <<: *common_param_spec
            required: [ secret_parameter ]
            properties:
                secret_parameter:
                    type: string
                    description: 'id_name of `secret` parameter the file-select requires'
        custom:
            <<: *common_param_spec
            properties:
                <<: *common_param_spec_properties
                type: { const: custom }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                placeholder: { $ref: '#/definitions/param_specs/_lib/placeholder' }
        list:
            <<: *common_param_spec
            required: [ id_name, type, child_parameters ]
            properties:
                <<: *common_param_spec_properties
                type: { const: list }
                name: { $ref: '#/definitions/param_specs/_lib/name' }
                child_parameters:
                    type: array
                    description: "The set of parameters to repeat"
                    items:
                        $ref: '#/definitions/param_specs/_nestable'
        _nestable:
            # Parameter that can either be top-level or can be nested within a List
            oneOf: [
                { $ref: '#/definitions/param_specs/statictext' },
                { $ref: '#/definitions/param_specs/string' },
                { $ref: '#/definitions/param_specs/integer' },
                { $ref: '#/definitions/param_specs/float' },
                { $ref: '#/definitions/param_specs/checkbox' },
                { $ref: '#/definitions/param_specs/menu' },
                { $ref: '#/definitions/param_specs/radio' },
                { $ref: '#/definitions/param_specs/button' },
                { $ref: '#/definitions/param_specs/column' },
                { $ref: '#/definitions/param_specs/multicolumn' },
                { $ref: '#/definitions/param_specs/numberformat' },
            ]
        _toplevel:
            # Parameters that can be used top-level
            #
            # This has more options than _nestable.
            oneOf: [
                { $ref: '#/definitions/param_specs/_nestable' },
                { $ref: '#/definitions/param_specs/secret' },  # secrets don't follow schema rules
                { $ref: '#/definitions/param_specs/file' },  # one WfModule can only have one file field
                { $ref: '#/definitions/param_specs/gdrivefile' },  # files aren't styled to appear within lists
                { $ref: '#/definitions/param_specs/list' },  # lists aren't styled to appear within lists
                { $ref: '#/definitions/param_specs/multichartseries' },  # not styled to appear within lists
                { $ref: '#/definitions/param_specs/tab' },  # column.tab_parameter doesn't support nested tabs
                { $ref: '#/definitions/param_specs/multitab' },  # column.tab_parameter doesn't support nested tabs
                { $ref: '#/definitions/param_specs/custom' },  # deprecated
            ]

    # DTypes: data types. This is the "storage format" for a particular parameter type, also the type passed to
    # render(). This code below is used to define the format of the module's param_schema, which is only used
    # with the "custom" parameter type, to define how to validate the data coming from the front end. But if
    # param_schema is specified it must match the definitions below for non-custom types, which in turn
    # must match the DType classes in param_spec.py.
    #
    # DTypes shouldn't really be here; we only need them for `custom` fields.
    # Look to `models.param_dtype` for the definitive dtype specifications.
    dtypes:
        string:
            type: object
            required: [ type ]
            properties:
                type: { const: string }
                default: { type: string }
        integer:
            type: object
            required: [ type ]
            properties:
                type: { const: integer }
                default: { type: integer }
        float:
            type: object
            required: [ type ]
            properties:
                type: { const: float }
                default: { type: number }
        boolean:
            type: object
            required: [ type ]
            properties:
                type: { const: boolean }
                default: { type: boolean }
        enum:
            type: object
            required: [ type, choices, default ]
            properties:
                type: { const: enum }
                choices: { type: array }
                default: {}
        column:
            type: object
            required: [ type ]
            properties:
                type: { const: column }
        multicolumn:
            type: object
            required: [ type ]
            properties:
                type: { const: multicolumn }
                tab_parameter: { type: string }
        tab:
            type: object
            required: [ type ]
            properties:
                type: { const: tab }
        multitab:
            type: object
            required: [ type ]
            properties:
                type: { const: multitab }
        multichartseries:
            type: object
            required: [ type ]
            properties:
                type: { const: multichartseries }
        option:
            type: object
            required: [ type, inner_dtype ]
            properties:
                type: { const: option }
                inner_dtype: { '$ref': '#/definitions/dtypes/any' }
                # We don't support 'default' yet. Default is None.
        list:
            type: object
            requred: [ type, inner_dtype ]
            properties:
                type: { const: list }
                inner_dtype: { '$ref': '#/definitions/dtypes/any' }
        dict:
            type: object
            required: [ type, properties ]
            properties:
                type: { const: dict }
                properties:
                    type: object
                    additionalProperties: { '$ref': '#/definitions/dtypes/any' }
        map:
            type: object
            required: [ type, value_dtype ]
            properties:
                type: { const: map }
                value_dtype: { '$ref': '#/definitions/dtypes/any' }
        file:
            type: object
            required: [ type ]
            properties:
                type: { const: file }
        _required:
            oneOf: [
                { $ref: '#/definitions/dtypes/string' },
                { $ref: '#/definitions/dtypes/integer' },
                { $ref: '#/definitions/dtypes/float' },
                { $ref: '#/definitions/dtypes/boolean' },
                { $ref: '#/definitions/dtypes/column' },
                { $ref: '#/definitions/dtypes/multicolumn' },
                { $ref: '#/definitions/dtypes/tab' },
                { $ref: '#/definitions/dtypes/multitab' },
                { $ref: '#/definitions/dtypes/multichartseries' },
                { $ref: '#/definitions/dtypes/enum' },
                { $ref: '#/definitions/dtypes/list' },
                { $ref: '#/definitions/dtypes/dict' },
                { $ref: '#/definitions/dtypes/map' },
            ]
        any:
            oneOf: [
                { $ref: '#/definitions/dtypes/_required' },
                { $ref: '#/definitions/dtypes/option' },
                { $ref: '#/definitions/dtypes/file' },  # file may be null; option[file] would be redundant
            ]
