# See https://cloud.google.com/cloud-build/docs/build-debug-locally for debug
# instructions.
#
# The copy/paste-able command:
# cloud-build-local --dryrun=false --substitutions COMMIT_SHA=abc123,BRANCH_NAME=branch .
timeout: 2400s
options:
  machineType: N1_HIGHCPU_8
steps:

# Build new Docker images
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: sh
  args:
    - -e
    - -c
    - |
      # --cache-from doesn't work well with multi-stage builds yet: see
      # https://github.com/moby/moby/issues/32612. We don't win if we pull down
      # migrate/renderer/fetcher/cron/frontend and try to build using their
      # caches.
      #
      # One alternative win for build speed: author pull requests for each Python
      # library that uses C, so they push bdist with manylinux. That way our
      # Dockerfile won't need apt-get or gcc calls, saving oodles of time.
      #
      # We can at least pull the latest integration test: our integration tests
      # don't use multi-stage build so they play nice with cache. (That's a great
      # win because installing Firefox deps is particularly slow.)

      docker build . # build everything, _and_ run npm test and black

      # Tag images for production
      for target in upload-assets migrate fetcher renderer cron frontend; do
        docker build \
          --target $$target \
          --tag gcr.io/$PROJECT_ID/$$target:$COMMIT_SHA \
          --tag gcr.io/$PROJECT_ID/$$target:$BRANCH_NAME \
          --tag gcr.io/$PROJECT_ID/$$target:latest \
          .
      done

      docker build --target unittest --tag gcr.io/$PROJECT_ID/unittest:$COMMIT_SHA .

      # Build integration-test image -- first pulling from cache if it can be used
      docker pull gcr.io/$PROJECT_ID/integration-test:latest || true
      docker build --pull \
        --file Dockerfile.integrationtest \
        --target cloudbuild \
        --tag gcr.io/$PROJECT_ID/integration-test:$COMMIT_SHA \
        --tag gcr.io/$PROJECT_ID/integration-test:latest \
        .

# Unit-test
- name: 'docker/compose:1.28.6'
  args: [ '-f', 'server/tests/docker-compose.yml',
          'run',
          'migrate'
        ]
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'COMMIT_SHA=$COMMIT_SHA'
- name: 'docker/compose:1.28.6'
  args: [ '-f', 'server/tests/docker-compose.yml',
          'run',
          'unittest'
        ]
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'COMMIT_SHA=$COMMIT_SHA'
# Integration-test: upload-assets+migrate, then run the integration-test image
- name: 'docker/compose:1.28.6'
  args: [ '-f', 'integrationtests/docker-compose.yml',
          '-f', 'integrationtests/docker-compose.cloudbuild-override.yml',
          'run',
          'upload-assets'
        ]
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'COMMIT_SHA=$COMMIT_SHA'
- name: 'docker/compose:1.28.6'
  args: [ '-f', 'integrationtests/docker-compose.yml',
          '-f', 'integrationtests/docker-compose.cloudbuild-override.yml',
          'run',
          'migrate'
        ]
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'COMMIT_SHA=$COMMIT_SHA'
- name: 'docker/compose:1.28.6'
  args: [ '-f', 'integrationtests/docker-compose.yml',
          '-f', 'integrationtests/docker-compose.cloudbuild-override.yml',
          'run',
          '--use-aliases',
          'integration-test'
        ]
  env:
    - 'PROJECT_ID=$PROJECT_ID'
    - 'COMMIT_SHA=$COMMIT_SHA'

images:
- 'gcr.io/$PROJECT_ID/migrate:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/upload-assets:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/fetcher:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/renderer:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/cron:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/frontend:$COMMIT_SHA'
- 'gcr.io/$PROJECT_ID/integration-test:latest' # cache this layer -- we can pull it to speed up future builds
