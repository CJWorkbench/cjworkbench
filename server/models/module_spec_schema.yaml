$schema: https://json-schema.org/schema#
type: object
required: [ id_name, name, category, parameters ]
properties:
    id_name:
        type: string
        description: Name that programmers use to uniquely define this Module
    name:
        type: string
        description: Name that appears atop the Step and in Module Search
    category:
        type: string
        description: Category that appears in Module Search
        enum: [ Add data, Scrape, Clean, Analyze, Code, Visualize, Other ]
    icon:
        type: string
        description: "Icon name that appears in Module Search and atop the Step (default: 'url')"
    link:
        type: string
        description: "URL the code comes from (default: '')"
        format: uri
    description:
        type: string
        description: "Description that appears in Module Search (default: '')"
    loads_data:
        type: boolean
        description: "True if this Step can do 'fetches' that may produce new data each run (default: False)"
    html_output:
        type: boolean
        description: "True if this Step outputs an iframe (default: False)"
    has_zen_mode:
        type: boolean
        description: "True if the user can zoom in on only this one Step (default: False)"
    row_action_menu_entry_title:
        type: string
        description: "If set, text of a selected-rows menu entry that adds this Step"
    help_url:
        type: string
        description: "Path (not URL) of documentation (format: x/y/x; default: '')"
    param_schema:
        type: object
        description: "Schema of parameters generated by `parameters` (default: derived from `parameters`)"
        additionalProperties:
            $ref: '#/definitions/dtypes/any'

    parameters:
        type: array
        description: "Specification for how to give a form to the user and give values to the fetch/render functions"
        items:
            $ref: '#/definitions/ftypes/any'

definitions:
    # FTypes: Form-element types. Each of these is a React component.
    ftypes:
        # _lib: properties that are used in more than one ftype.
        _lib:
            name:
                type: string
                description: "Name that may appears with the form field (only for some types) (default: '')"
            placeholder:
                type: string
                description: "Text that appears when the form field has no value (only for some types) (default: '')"
        # _common: use Yaml "anchors" so we can reuse common JSON in all our types.
        # (They tend to use many similar properties, but not all.) JSON Schema has
        # its own '$ref' syntax, but that doesn't let us "extend" an object -- i.e.,
        # add new properties on top of the $ref-ed ones.
        _common: &common_ftype
            type: object
            # All ftypes have a 'type' 'const' validation, so we don't need 'type'
            # here to be marked 'required'. (If 'type' is missing, each individual
            # 'ftype' will fail to match because each individual 'ftype' is
            # checking for onw.)
            required: [ id_name, type ]
            properties: &common_ftype_properties
                id_name:
                    type: string
                    description: Name that programmers use to uniquely identify this parameter
                visible_if:
                    type: object
                    required: [ id_name, value ]
                    properties:
                        id_name:
                            type: string
                            description: id_name of the param we will investigate
                        value:
                            description: "Value we expect (there are so many unique cases, it's not worth documenting them all)"
                        invert:
                            type: boolean
                            description: "If true, do the opposite"

        statictext:
            <<: *common_ftype
            required: [ id_name, name ]
            properties:
                <<: *common_ftype_properties
                type: { const: statictext }
                name:
                    type: string
                    description: Text to display
        string:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: string }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
                default:
                    type: string
                    description: "Value to set on the user's behalf (default null)"
        integer:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: integer }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
                default:
                    type: integer
                    description: "Value to set on the user's behalf (default null)"
        float:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: float }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
                default:
                    type: number
                    description: "Value to set on the user's behalf (default null)"
        checkbox:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: checkbox }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                default:
                    type: boolean
                    description: "Value to set on the user's behalf (default False)"
        menu:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: menu }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
                menu_items:
                    type: string
                    description: "Menu entries, separated by '|' (only for menu type) (default: '')"
                default:
                    type: integer
                    description: "Value to set on the user's behalf (default null)"
        radio:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: radio }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
                radio_items:
                    type: string
                    description: "Radio entries, separated by '|' (only for radio type) (default: '')"
                default:
                    type: integer
                    description: "Value to set on the user's behalf (default null)"
        button:
            <<: *common_ftype
            required: [ id_name, name ]
            properties:
                <<: *common_ftype_properties
                type: { const: button }
                name:
                    type: string
                    description: Button text
        column:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: column }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
        multicolumn:
            <<: *common_ftype
            properties:
                <<: *common_ftype_properties
                type: { const: multicolumn }
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
        secret:
            <<: *common_ftype
            required: [ id_name, name ]
            properties:
                <<: *common_ftype_properties
                type: { const: secret }
                name:
                    type: string
                    description: "'Connect' button text"
        custom:
            <<: *common_ftype
            required: [ id_name ]
            properties:
                <<: *common_ftype_properties
                name: { $ref: '#/definitions/ftypes/_lib/name' }
                placeholder: { $ref: '#/definitions/ftypes/_lib/placeholder' }
        any:
            anyOf: [
                { $ref: '#/definitions/ftypes/statictext' },
                { $ref: '#/definitions/ftypes/string' },
                { $ref: '#/definitions/ftypes/integer' },
                { $ref: '#/definitions/ftypes/float' },
                { $ref: '#/definitions/ftypes/checkbox' },
                { $ref: '#/definitions/ftypes/menu' },
                { $ref: '#/definitions/ftypes/radio' },
                { $ref: '#/definitions/ftypes/button' },
                { $ref: '#/definitions/ftypes/column' },
                { $ref: '#/definitions/ftypes/multicolumn' },
                { $ref: '#/definitions/ftypes/secret' },
                { $ref: '#/definitions/ftypes/custom' },
            ]

    # DTypes: data types. Each of these is a _value_ generated by a Form element
    # ... it also specifies how to generate a value for the module's `render()`.
    dtypes:
        string:
            type: object
            required: [ type ]
            properties:
                type: { const: string }
                default: { type: string }
        integer:
            type: object
            required: [ type ]
            properties:
                type: { const: integer }
                default: { type: integer }
        float:
            type: object
            required: [ type ]
            properties:
                type: { const: float }
                default: { type: number }
        boolean:
            type: object
            required: [ type ]
            properties:
                type: { const: boolean }
                default: { type: boolean }
        enum:
            type: object
            required: [ type, choices, default ]
            properties:
                type: { const: enum }
                choices: { type: array }
                default: {}
        column:
            type: object
            required: [ type ]
            properties:
                type: { const: column }
        multicolumn:
            type: object
            required: [ type ]
            properties:
                type: { const: multicolumn }
        list:
            type: object
            requred: [ type, inner_dtype ]
            properties:
                type: { const: list }
                inner_dtype: { '$ref': '#/definitions/dtypes/any' }
        dict:
            type: object
            required: [ type, properties ]
            properties:
                type: { const: dict }
                properties:
                    type: object
                    additionalProperties: { '$ref': '#/definitions/dtypes/any' }
        map:
            type: object
            required: [ type, value_dtype ]
            properties:
                type: { const: map }
                value_dtype: { '$ref': '#/definitions/dtypes/any' }
        any:
            anyOf: [
                { $ref: '#/definitions/dtypes/string' },
                { $ref: '#/definitions/dtypes/integer' },
                { $ref: '#/definitions/dtypes/float' },
                { $ref: '#/definitions/dtypes/boolean' },
                { $ref: '#/definitions/dtypes/column' },
                { $ref: '#/definitions/dtypes/multicolumn' },
                { $ref: '#/definitions/dtypes/enum' },
                { $ref: '#/definitions/dtypes/list' },
                { $ref: '#/definitions/dtypes/dict' },
                { $ref: '#/definitions/dtypes/map' },
            ]
