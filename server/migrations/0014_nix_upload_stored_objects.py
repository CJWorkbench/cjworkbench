# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-06-03 13:36
from __future__ import unicode_literals

from django.db import migrations


def delete_upload_stored_objects(apps, _):
    from cjwstate import minio

    StoredObject = apps.get_model("server", "StoredObject")

    for obj in StoredObject.objects.filter(wf_module__module_id_name="upload").all():
        try:
            minio.remove(minio.StoredObjectsBucket, obj.key)
        except FileNotFoundError:
            # We're resuming, or the file never existed anyway. (We never
            # designed for errors, and we changed error behavior over time;
            # it's possible some uploads never had data.)
            pass
        obj.delete()


class Migration(migrations.Migration):
    """
    Delete all StoredObjects related to the `upload` module.

    This is a final part of
    https://www.pivotaltracker.com/story/show/162001793. Now the `upload`
    module has naught but `render()`, all its faux-`fetch` results are
    obsolete. Delete them so we don't keep data around that users can't access
    or delete.

    Don't worry: the real data is in the `UploadedFile` table, not the
    `StoredObject` table.

    This deletes data that might be used to mitigate the effects of
    https://www.pivotaltracker.com/story/show/163336822. But we guess that
    every user who has seen that bug is aware there's a problem, so we're not
    going to invest resources into mitigation.
    """

    atomic = False

    dependencies = [("server", "0013_upgrade-uploadfile-to-upload")]

    operations = [migrations.RunPython(delete_upload_stored_objects, elidable=True)]
