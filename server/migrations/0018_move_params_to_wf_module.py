# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2018-12-28 21:25
from __future__ import unicode_literals

from django.db import migrations


class DType:
    STATICTEXT = 'statictext'
    STRING = 'string'
    INTEGER = 'integer'
    FLOAT = 'float'
    CHECKBOX = 'checkbox'
    MENU = 'menu'
    BUTTON = 'button'
    COLUMN = 'column'
    RADIO = 'radio'
    MULTICOLUMN = 'multicolumn'
    CUSTOM = 'custom'


def _str_to_value(pval_id, dtype, s):
    """ParameterSpec.str_to_value(), as of 2018-12-28"""
    if (
        dtype == DType.STRING
        or dtype == DType.COLUMN
        or dtype == DType.MULTICOLUMN
        or dtype == DType.CUSTOM
        or dtype == DType.BUTTON
        or dtype == DType.STATICTEXT
    ):
        return s

    elif (
        dtype == DType.INTEGER
        or dtype == DType.MENU
        or dtype == DType.RADIO
    ):
        try:
            return int(s)
        except ValueError:
            return 0

    elif dtype == DType.FLOAT:
        try:
            return float(s)
        except ValueError:
            return 0.0

    elif dtype == DType.CHECKBOX:
        return s == 'True'

    elif dtype == DType.SECRET:
        raise ValueError(
            f'There should be no SECRET values left! What is {pval_id}?'
        )

    else:
        raise ValueError(
            f'Unknown type {dtype} for parameter {pval_id}'
        )


def move_params_to_wf_module(apps, schema_editor):
    import sys
    WfModule = apps.get_model('server', 'WfModule')

    for wf_module in (
        WfModule.objects.exclude(params__isnull=False)
    ):
        try:
            wf_module.refresh_from_db()
        except WfModule.DoesNotExist:
            sys.stdout.write('WfModule %d was deleted\n' % wf_module.id)
        if wf_module.params is not None:
            sys.stdout.write('WfModule %d already has .params\n' %
                             wf_module.id)

        params = {}
        parameter_vals = (
            wf_module.parameter_vals.select_related('parameter_spec')
        )

        for pv in parameter_vals.all():
            value = _str_to_value(pv.id, pv.parameter_spec.type, pv.value)
            params[pv.parameter_spec.id_name] = value

        wf_module.params = params
        wf_module.save(update_fields=['params'])
        parameter_vals.delete()


class Migration(migrations.Migration):
    """
    Migrate all params out of server_parameterval into server_wfmodule.

    The new column, server_wfmodule.params, is a JSON column keyed by id_name.
    Once this migration completes, wf_module.params will never be NULL (because
    we have no deployed code that _writes_ to it), and all rows in
    server_parameterval will be obsolete.

    See https://www.pivotaltracker.com/story/show/162704742
    """

    dependencies = [
        ('server', '0017_auto_20181228_2122'),
    ]

    operations = [
        migrations.RunPython(move_params_to_wf_module, elidable=True,
                             atomic=False),
        # Delete params that were obsolete -- as in, wf_module.params was
        # not NULL prior to migration.
        #
        # This happens because the code we deployed prior to the migration
        # writes _new_ values to wf_module.params without deleting _old_ values
        # from wf_module.parameter_vals. move_params_to_wf_module ignores all
        # those cases.
        migrations.RunSQL([
            """
            TRUNCATE TABLE server_parameterval
            """
        ], elidable=True),
    ]
