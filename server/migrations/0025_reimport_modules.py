# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-01-01 21:37
from __future__ import unicode_literals

from glob import glob
import json
from os.path import dirname, join
import sys
from django.db import migrations


def reimport_module(apps, module):
    from server.models.module_version import validate_module_spec

    ModuleVersion = apps.get_model('server', 'ModuleVersion')
    WfModule = apps.get_model('server', 'WfModule')

    versions = list(
        module.module_versions.order_by('-last_update_time').all()
    )  # assume there's at least one ModuleVersion

    latest = versions[0]
    obsolete = versions[1:]

    sys.stderr.write(f'{module.id_name}:{latest.source_version_hash}...\n')

    # 1. Make sure `latest.spec` is non-NULL.
    if latest.source_version_hash == '1.0':
        # It's an internal module.
        path = join(dirname(dirname(dirname(__file__))), 'server', 'modules',
                    module.id_name + '.json')
    else:
        # It's an external module.
        dirpath = join(dirname(dirname(dirname(__file__))), 'importedmodules',
                       module.id_name, latest.source_version_hash)
        path = glob(join(dirpath, '*.json'))[0]

    with open(path, 'r', encoding='utf-8') as f:
        spec = json.load(f)

    validate_module_spec(spec)  # or crash
    latest.spec = spec
    latest.save(update_fields=['spec'])

    # 2. Delete all non-`latest` versions
    obsolete_ids = [mv.id for mv in obsolete]
    ModuleVersion.objects \
            .filter(id__in=obsolete_ids) \
            .delete()


def reimport_modules(apps, schema_editor):
    Module = apps.get_model('server', 'Module')

    for module in Module.objects.all():
        reimport_module(apps, module)


class Migration(migrations.Migration):
    """
    Ensure `module_version.spec` is NOT NULL.

    For each module:

        1. Reload its ModuleVersion, such that the latest .spec is NOT NULL
        2. Update all WfModules to point to the latest ModuleVersion
        3. Delete all ModuleVersions that are not the latest

    After this migration, `module_version.spec` is guaranteed to _stay_ NOT
    NULL, since one can't create a new ModuleVersion without it using code
    that's been deployed to production.
    """

    dependencies = [
        ('server', '0024_auto_20190101_2350'),
    ]

    operations = [
        migrations.RunPython(reimport_modules, elidable=True, atomic=False),
    ]
