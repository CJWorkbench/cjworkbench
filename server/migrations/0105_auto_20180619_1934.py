# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-06-19 19:34
from __future__ import unicode_literals

from django.db import migrations


# Prior to 2018-06-19, every user duplicated every Example workflow on first
# login. After 2018-06-19, Example workflows are templates for "anonymous
# workflows" which behave a bit differently. They're created on-demand, so
# let's delete every demo workflow.
#
# Fun Oh Fun: we didn't mark which workflows were example workflows. And we
# can't determine whether users modified their duplicates. So our ham-handed
# approach is to delete all workflows that start with "Demo: ".
#
# Also Fun Oh Fun: we support sqlite3 in dev mode, and sqlite3 doesn't allow
# deleting from multiple tables in a single command. This Will Get Crazy.
_sql_for_workflow_ids = """
    SELECT id FROM server_workflow WHERE name LIKE 'Demo: %'
"""
_sql_for_wf_module_ids = f"""
    SELECT id FROM server_wfmodule WHERE workflow_id IN ({_sql_for_workflow_ids})
"""
_sql_for_delta_ids = f"""
    SELECT id FROM server_delta WHERE workflow_id IN ({_sql_for_workflow_ids})
"""
def _sql_for_delete_delta_children(name):
    return f"""
    DELETE FROM {name}
    WHERE delta_ptr_id IN ({_sql_for_delta_ids})
    """
# There should not be any orphan parameter_vals, but run SQL anyway to be safe
_sql_for_delete_orphan_parameter_vals = """
    DELETE FROM server_parameterval
    WHERE wf_module_id IN (SELECT id FROM server_wfmodule WHERE workflow_id IS NULL)
    AND id NOT IN (SELECT parameter_val_id FROM server_changeparametercommand)
"""
_sql_for_orphan_wf_module_ids = """
    SELECT id FROM server_wfmodule
    WHERE workflow_id IS NULL AND id NOT IN (
        SELECT wf_module_id FROM server_addmodulecommand
        UNION
        SELECT wf_module_id FROM server_deletemodulecommand
        UNION
        SELECT wf_module_id FROM server_changedataversioncommand
        UNION
        SELECT wf_module_id FROM server_changewfmodulenotescommand
        UNION
        SELECT wf_module_id FROM server_changewfmoduleupdatesettingscommand
    )
"""
_sql_for_delete_orphan_wf_modules = f"""
    DELETE FROM server_wfmodule
    WHERE id IN ({_sql_for_orphan_wf_module_ids})
    """
def _sql_for_delete_wf_module_children(name):
    return f"""
    DELETE FROM {name}
    WHERE wf_module_id IN (
        {_sql_for_wf_module_ids}
        UNION
        {_sql_for_orphan_wf_module_ids}
    )
    """
_NixExampleWorkflows = [
    # 1. Delete Deltas -- no foreign keys refer to them.
    # (Delete children first: they reference the `delta` table.
    _sql_for_delete_delta_children('server_addmodulecommand'),
    _sql_for_delete_delta_children('server_changedataversioncommand'),
    _sql_for_delete_delta_children('server_changeparametercommand'),
    _sql_for_delete_delta_children('server_changewfmodulenotescommand'),
    _sql_for_delete_delta_children('server_changewfmoduleupdatesettingscommand'),
    _sql_for_delete_delta_children('server_changeworkflowtitlecommand'),
    _sql_for_delete_delta_children('server_deletemodulecommand'),
    _sql_for_delete_delta_children('server_reordermodulescommand'),
    f'DELETE FROM server_delta WHERE workflow_id IN ({_sql_for_workflow_ids})',
    # Now, we've deleted foreign key references to server_wfmodule (5
    # commands) and server_parameterval (ChangeParameterCommand).

    # 2. Delete orphan server_parametervals: ones that were only referenced by
    # server_changeparametercommand. They refer to wf_modules that we'll want
    # to delete. (These will only exist if a bug leaked them at some point.)
    _sql_for_delete_orphan_parameter_vals,

    # 3. Delete wf_modules -- starting with the things that depend on them
    _sql_for_delete_wf_module_children('server_notification'),
    _sql_for_delete_wf_module_children('server_parameterval'),
    _sql_for_delete_wf_module_children('server_storedobject'),
    _sql_for_delete_wf_module_children('server_uploadedfile'),
    f'DELETE FROM server_wfmodule WHERE workflow_id IN ({_sql_for_workflow_ids})',

    # 4. Delete the WfModules we orphaned in step 1 -- WfModules that aren't
    # in any Workflow but _were_ referenced by one of the above deltas
    _sql_for_delete_orphan_wf_modules,

    # 5. Finally, delete the workflows
    f'DELETE FROM server_workflow WHERE id IN ({_sql_for_workflow_ids})',
]

_ChangeSelectedWfModuleFromIdToIndex = ["""
UPDATE server_workflow
SET selected_wf_module = (
    SELECT "order"
    FROM server_wfmodule
    WHERE server_wfmodule.id = server_workflow.selected_wf_module
)
WHERE selected_wf_module IS NOT NULL
"""]


class Migration(migrations.Migration):

    dependencies = [
        ('server', '0104_auto_20180618_2016'),
    ]

    operations = [
        migrations.RunSQL(_NixExampleWorkflows),
        migrations.RunSQL(_ChangeSelectedWfModuleFromIdToIndex),
    ]
