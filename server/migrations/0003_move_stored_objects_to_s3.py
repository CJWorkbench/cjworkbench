# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-12-05 23:03
from __future__ import unicode_literals

from django.db import migrations


def ensure_using_s3(so):
    from pathlib import Path
    import os
    from server import minio
    from server.models.StoredObject import _build_key

    if not so.file:
        return

    path = so.file.path

    so.bucket = minio.StoredObjectsBucket
    so.key = _build_key(so.wf_module.workflow_id, so.wf_module.id)
    try:
        minio.minio.fput_file(so.bucket, so.key, Path(path))
        so.file = None
        so.save(update_fields=['bucket', 'key', 'file'])

        os.remove(path)
    except FileNotFoundError:
        # Migrate to S3: FileNotFoundError will become KeyNotFound.
        so.file = None
        so.save(update_fields=['bucket', 'key', 'file'])


def move_stored_objects_to_s3(apps, schema_editor):
    StoredObject = apps.get_model('server', 'StoredObject')
    import sys
    sys.stdout.write('\n')
    for stored_object in (
        StoredObject.objects
        .exclude(file__isnull=True)
        .exclude(file='')
    ):
        file = stored_object.file
        try:
            stored_object.refresh_from_db()
        except StoredObject.DoesNotExist:
            sys.stdout.write(f'StoredObject was deleted: {file}...\n')
            continue
        if not stored_object.file:
            sys.stdout.write(f'StoredObject already on S3: {file}...\n')
            continue

        sys.stdout.write(f'Moving {stored_object.file}...')
        ensure_using_s3(stored_object)
        sys.stdout.write(f' {stored_object.bucket}/{stored_object.key}\n')


class Migration(migrations.Migration):

    dependencies = [
        ('server', '0002_auto_20181205_2246'),
    ]

    operations = [
        migrations.RunPython(move_stored_objects_to_s3, elidable=True,
                             atomic=False)
    ]
