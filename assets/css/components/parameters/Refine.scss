.in-module--search {
  color: $input-alt;
  position: relative;
  margin-bottom: 1.5rem;

  input {
    height: 3.5rem;
    padding: .6rem 3.4rem .4rem; // left padding for "search" icon; right padding for "close" button
    display: block;
    width: 100%;
    color: $brand-text--dark;
    background: $Vlight-gray;
    border-radius: 2rem;
    border: 2px solid transparent;
    &:hover {
      border-color: $brand-orange--medium;
    }

    &:focus {
      border-color: $brand-orange;
    }

    //search placeholder when empty
    &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
      color: $brand-text--dark;
      opacity: .9;
    }
    :-ms-input-placeholder { /* IE 10+ */
      color: $brand-text--dark;
      opacity: .9;
    }
    :-moz-placeholder { /* Firefox 18- */
      color: $brand-text--dark;
      opacity: .9;
    }

  }



  &::before {
    // "search" icon
    display: inline-block;
    position: absolute;
    top: .8rem;
    left: 1.3rem;
    font-size: 1.4rem;
    font-family: 'Workbench';
    content: "\e91a "; // .icon-search
    color: $brand-text--dark;
  }

  button.close {
    border: 0;
    position: absolute;
    right: 1.3rem;
    top: 1rem;
    font-size: 1.4rem;
    margin: 0;
    padding: 0;
    text-shadow: none;
    color: $brand-text--medium;
    &:hover {
      color: $brand-orange;
      opacity: 1;
    }
  }
}

button[name="refine-select-all"]:disabled,button[name="refine-select-none"]:disabled, {
  color:$grayed--out;
  cursor: default;
  &:hover {
    color:$grayed--out;
  }
}

.refine-modal-prompt {
  margin-top: 1.5rem;
  display: flex;
  align-items: center;
  font-size: 1.3rem;
  line-height: 1.4;
  color: $brand-text--medium;
  margin-bottom: 1rem;

  //launches the clustering modal
  .cluster {
    @extend .action-button;
    @extend .button-orange;
    margin-top: .5rem;
  }

  .instructions {
    margin-top: .5rem;
    width:15rem;
  }

  button {
    margin-right: 1rem;
  }
}

.refine-groups {
  max-height: 30rem;
  overflow-y: auto;
  overflow-x: hidden;

  // Throughout Refine, any <button> should appear as inline text
  button {
    border: 0;
    margin: 0;
    padding: 0;
    color: $light-gray;
    background: transparent;
    font-size: 1.4rem;
    cursor: pointer;

    &:hover {
      color: $medium-gray;
    }
  }

  dt { // group-name row: include checkbox; group-name input, expand checkbox, count, reset button
    width: 100%;
    max-width: 100%;
    padding: .5rem 0 0;
    display: flex;
    align-items: center;

    &>* {
      flex: 0 0 auto;
    }

    &>.growing {
      // The name and "expand" icon appear together. They take all available
      // space, so the count is right-aligned.
      flex: 1 1 auto;
      white-space: nowrap;
      overflow: hidden;

      // We may need to cut off the stuff _inside_. Use display:flex so the
      // "expand" checkbox is always visible even if we cut off the input
      display: flex;
      width: 100%;
      max-width: 100%;
    }

    label.checkbox {
      margin: 0;
      width: 2rem;

      // Line up with the rest
      position: relative;
      top: .2rem;
    }

    .autosized-input {
      // The name has varying width. Give the <input> the same width as its
      // contents by _rendering_ its contents and then rendering the <input>
      // on top.
      display: inline-block;
      overflow: hidden;
      min-width: 3rem; // so user can edit even empty text
      position: relative;

      span, input {
        border: 0;
        margin: 0;
        padding: .5rem;
        font-size: 1.3rem;
        background: transparent;
        color: $brand-text--dark;
        &:hover {
          background-color: $dark-accent--soft;
        }
      }

      span {
        visibility: hidden;
      }

      input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    }

    &.edited .autosized-input {
      // Show edited values as bold
      span, input {
        font-weight: bold;
        color: $brand-text--darker;
      }
    }

    label.expand {
      // Display the icon, not the checkbox
      input { display: none; }
      cursor: pointer;
      margin: 0;

      i.icon-caret-down {
        font-size: .6rem;
        line-height: 1em;
        vertical-align: -.5em; // work around broken font
      }
      i.icon-caret-up {
        font-size: .6rem;
        line-height: 1em;
        vertical-align: -.5em; // work around broken font
      }
    }

    .count-and-reset {
      min-width: 1.5rem;
      margin-left: .8rem;
      text-align: right;

      // Display the count normally. If there are edits, display a reset
      // button instead, only when the user hovers.
      button, span {
        text-align: right;
      }

      span {
        @extend %font-nunito-extra-light;
        font-size: 1.3rem;
      }

      button {
        display: none;
        font-size: 1rem;
      }

    }
    &:hover {
      button {
        display: block;

        i {
          font-size: 1.3rem;
          color: $brand-text--dark;
          &:hover {color: $brand-text--darker; }
        }
      }
      button + span { display: none; }
    }
  }

  dd { // details: list of values, each with a count and remove button
    margin: 0;
    padding: 0 0 .5rem;

    ul {
      display: block;
      margin: 0;
      padding: 0;
    }

    li {
      display: flex;
      width: 100%;
      overflow: hidden;
      font-size: 1.3rem;
      padding-top: .5rem;
      padding-left: 2.5rem;
      font-weight: 200;

      .value {
        flex: 1 1 auto;
        overflow: hidden;
      }

      .count-and-remove {
        min-width: 1.5rem;
        margin-left: .8rem;
        text-align: right;

        // Display the count normally. If the user hovers, display a remove
        // button instead -- but only if the button exists. (One can't remove
        // the value "A" from the group "A".)
        button, span {
          min-width: 3rem;
          text-align: right;
        }

        // button
        .icon-close {
          font-size: 1.2rem;
          line-height: 1.4em;
          color: $brand-text--dark;
          &:hover {color: $brand-text--darker; }
        }

        span {
          @extend %font-nunito-extra-light;
        }

        button {
          display: none;
          font-size: .9rem;
        }
      }
    }
    li:hover {
      button { display: block; }
      button + span { display: none; }
    }
  }

  dd + dt {
    border-top: 1px solid $Vlight-gray;
  }
}

.zen-mode {
  .refine-groups {
    max-height: calc(100vh - 25rem);
  }
}

.refine-modal {
  font-size: 1.3rem;

  .refine-clusterer {
    .method {
      display: flex;

      .method-select {
        flex: 0 0 auto;
        margin-right: 1.6rem;

        .custom-select {
          width: 13rem;
        }
      }

      .method-form {
        padding:0 2rem;

        .method-description {
          @extend .content-3;
          flex: 1 1 auto;
          color:$brand-text--medium;
        }

        input[id=refine-clusterer-max-distance] {
          background-color: $Vlight-gray;
          font-size: 1.4rem;
          height: 3.5rem;
          border: 2px solid $Vlight-gray;

          &:hover {
            border: 2px solid $dark-accent--medium;
          }
          &:focus {
            outline: none;
            border:2px solid $brand-orange;
          }
        }
      }

      .form-group {
        margin-top: 1.6rem;
        width: 100%;
        display: flex;

        label {
          margin-right: 1.6rem;
        }
      }
    }
  }

  .refine-bins {
    margin-top: 2rem;

    .no-bins {
      @extend .title-3;
      font-size: 1.5rem;
      margin-bottom: 2rem;
      color:$brand-orange;
      margin-left: 16.5rem;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th {
      @extend .title-3;
      font-size: 1.5rem;
      white-space: nowrap;
      padding-right: 4.2rem;
    }

    td {
      vertical-align: top;
      padding: .8rem 0; // default all padding to the same size. We'll shrink the tr.value padding later.
    }

    .value, .new-value {
      // Give these two _all_ the space
      width: 9999rem;
    }

    tr.bin {
      border-top: 1px solid $dark-accent--medium;
    }

    tr.value td {
      padding-top: 0;
    }
  }

  .autosize-cluster-input {
    width: 100%;
    margin: 0rem;
    position: relative;
    @extend .single-line-text-field;

    span, textarea {
      // Exact same font for invisible text and visible textarea
      font: inherit;
      word-break: break-all;
      padding: 0;
      border: 0;
    }

    span {
      visibility: hidden; // invisible text, sets the height of the div
    }

    textarea {
      position: absolute;
      top: .5rem;
      left: 1rem;
      width: 93%;
      height: 100%; // grow to the same size as the div
      resize: none;
      overflow: hidden;
    }
  }

  .modal-footer {
    .actions {
      display: flex;
    }
  }

  .refine-status {
    flex-grow: 1; // left-align in modal footer
    text-transform: uppercase;
    color: $brand-orange;
  }
}
