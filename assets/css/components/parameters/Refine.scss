.refine-groups {
  max-height: 30rem;
  overflow-y: auto;
  overflow-x: hidden;

  // Throughout Refine, any <button> should appear as inline text
  button {
    border: 0;
    margin: 0;
    padding: 0;
    color: $light-gray;
    background: transparent;
    font-size: 1.4rem;
    cursor: pointer;

    &:hover {
      color: $medium-gray;
    }
  }

  dt { // group-name row: include checkbox; group-name input, expand checkbox, count, reset button
    width: 100%;
    max-width: 100%;
    padding: .5rem 0 0;
    display: flex;
    align-items: center;

    &>* {
      flex: 0 0 auto;
    }

    &>.growing {
      // The name and "expand" icon appear together. They take all available
      // space, so the count is right-aligned.
      flex: 1 1 auto;
      white-space: nowrap;
      overflow: hidden;

      // We may need to cut off the stuff _inside_. Use display:flex so the
      // "expand" checkbox is always visible even if we cut off the input
      display: flex;
      width: 100%;
      max-width: 100%;
    }

    label.checkbox {
      margin: 0;
      width: 2rem;

      // Line up with the rest
      position: relative;
      top: .2rem;
    }

    .autosized-input {
      // The name has varying width. Give the <input> the same width as its
      // contents by _rendering_ its contents and then rendering the <input>
      // on top.
      display: inline-block;
      overflow: hidden;
      min-width: 3rem; // so user can edit even empty text
      position: relative;

      span, input {
        border: 0;
        margin: 0;
        padding: .5rem;
        font-size: 1.3rem;
        background: transparent;
        color:$brand-text--dark;
        &:hover {
          background-color: $dark-accent--soft;
        }
      }

      span {
        visibility: hidden;
      }

      input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
    }

    &.edited .autosized-input {
      // Show edited values as bold
      span, input {
        font-weight: bold;
        color: $brand-text--darker;
      }
    }

    label.expand {
      // Display the icon, not the checkbox
      input { display: none; }
      cursor: pointer;
      margin: 0;

      i.icon-caret-down {
        font-size: .6rem;
        line-height: 1em;
        vertical-align: -.5em; // work around broken font
      }
      i.icon-caret-up {
        font-size: .6rem;
        line-height: 1em;
        vertical-align: -.5em; // work around broken font
      }
    }

    .count-and-reset {
      padding-left: .5rem;

      // Display the count normally. If there are edits, display a reset
      // button instead, only when the user hovers.
      button, span {
        min-width: 3rem;
        text-align: right;
      }

      span {
        @extend %font-nunito-extra-light;
        font-size: 1.3rem;
      }

      button {
        display: none;
        font-size: 1rem;
      }
      &:hover {
        button { display: block; }
        button + span { display: none; }
      }
    }
  }

  dd { // details: list of values, each with a count and remove button
    margin: 0;
    padding: 0 0 .5rem;

    ul {
      display: block;
      margin: 0;
      padding: 0;
    }

    li {
      display: flex;
      width: 100%;
      overflow: hidden;
      font-size: 1.3rem;
      padding-top: .5rem;
      padding-left: 2.5rem;
      font-weight: 100;

      .value {
        flex: 1 1 auto;
        overflow: hidden;
      }

      .count-and-remove {
        padding-left: .5rem;

        // Display the count normally. If the user hovers, display a remove
        // button instead -- but only if the button exists. (One can't remove
        // the value "A" from the group "A".)
        button, span {
          min-width: 3rem;
          text-align: right;
        }

        // button 
        .icon-close {
          font-size: 1.2rem;
          line-height: 1.4em;
        }

        span {
          @extend %font-nunito-extra-light;
        }

        button {
          display: none;
          font-size: .9rem;
        }
        &:hover {
          button { display: block; }
          button + span { display: none; }
        }
      }
    }
  }

  dd + dt {
    border-top: 1px solid $Vlight-gray;
  }
}
