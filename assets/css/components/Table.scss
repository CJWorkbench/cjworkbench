/* Output Pane */

.outputpane {
  flex: 1 1 auto;
  position: relative;
  display: flex;
  flex-direction: column;
  border-left: 2px solid $module-color-unreachable;

  &.module-ok {
    border-color: $module-color-ok!important;
  }
  &.module-error {
    border-color: $module-color-error;
  }
  &.module-busy {
    border-color: $module-color-busy;
  }

  .table-switcher {
    height: 100%;
    position: relative;

    &>* {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    &.has-loaded .loading-table {
      // Hide the DataGrid of the loading table: we'll show the current table
      // instead.
      .react-grid-Container {
        pointer-events: none;
        opacity: 0;
      }
    }

    &.has-loading .loaded-table {
      // Subtly fade out old data. The user doesn't want it.
      opacity: .9;
    }
  }

  .outputpane-table {
    height: 100%;
    position: relative;
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;

    .outputpane-data {
      flex: 1 1 auto; // consume maximum height (unlike header, which is fixed-height)
      position: relative; // for .react-grid-Container

      .data-grid-sizer {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
      }

      // DataGrid is the heaviest DOM tree we have, and it effects the
      // performance of the custom drag layer (and probably everything else). By
      // putting a no-op translate3d property on it, we coerce browsers into
      // rendering it and all of its children in a seperate compositing layer,
      // improving the rendering of everything else in the app.
      transform: translate3d(0, 0, 0);

      .overlay {
        position: absolute;
        background-color: $light-overlay;
        display: flex;
        //justify-content: center; cancelling justification because it should be positioned over the table, not the canvas -- same for the spinner
        height: 100%;
        width: 100%;
        bottom: 0;
        padding: 0;

        div {
          border-radius: .5rem;
          width: 40rem;
          margin: 8rem 16rem;
          padding: 2rem;
          display: flex;
          flex-direction: column;
          align-items: center;

          .text {
            @extend .title-2;
            color: $brand-text--dark;
            text-align: center;
            margin: 0;
            padding: 0;
          }

          button {
            @extend .action-button;
            @extend .button-blue--fill;
            margin-top: 3rem;
            text-transform: uppercase;

          }
        }
      }

      .react-grid-Container {
        // Do not influence the height of .outputpane-data.
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;

        .react-grid-Main {
          outline: none;

          .react-grid-Grid{
            border: none;
          }
        }
      }


      .react-grid-Canvas {
        background-color: $table-background;
        padding-bottom: 10rem;
      }

      .react-grid-HeaderRow {
        background-color: $table-background;

        .react-grid-HeaderCell:not(:last-child) .column-reorder-drop-zone.align-right {
          // We place a dropzone at the beginning and end of each header cell
          // because it's easy. However, each .react-grid-HeaderCell has
          // position:absolute set in its style by react-data-grid. That gives
          // each subsequent cell a higher effective z-index than the previous
          // one. We want our .align-right dropzone to extend _past_ the right
          // of the cell, but that will only work on the final cell: in all other
          // cells, the next .react-grid-HeaderCell will appear on top.
          //
          // So we hide the .align-right dropzone on all but the final cell. We
          // trust DataGrid.js to place a .align-left dropzone in the next cell
          // in the same place ... and the .align-left dropzone will be on top,
          // just the way we want.
          display: none;
        }
      }

      .react-grid-HeaderCell {
        @extend .content-1;
        color: white;
        background-color: $heading-bg;
        border-right: 1px solid $dark-accent--strong;
        border-bottom: 0px;
        border-left: 0px;
        padding: 0;
        display: flex;

        .column-reorder-drop-zone {
          position: absolute;
          top: 0;
          height: 100%;
          width: 0.5rem;
          z-index: 1;

          &.align-left {
            left: -.25rem;
          }
          &.align-right {
            right: -.25rem;
          }

          &.drag-hover {
            background-color: $brand-orange;
          }

          &::before {
            // Make a bigger, invisible drop zone: when we drag over this,
            // the user can drop
            content: '';
            position: absolute;
            top: 0;
            height: 100%;
            left: -8rem;
            right: -8rem;
          }
        }

        .column-letter {
          display: flex;
          align-items: center;
          justify-content: center;
          text-align: center;
          padding-top: .6rem;
          color: white;
          height: 1.6rem;
          font-size: 1.2rem;
        }

        .data-grid-column-header  {
          display: flex;
          align-items: center;
          overflow: hidden;

          .column-key {
            padding: .6rem 1rem; // .8rem dictated by react-data-grid JS
            display: block;
            flex: 1 1 auto;
            overflow: hidden;
            height:100%;
            cursor: text;
            height:4.5rem;

            .value {
              text-overflow: ellipsis;
              white-space: nowrap;
              overflow: hidden;
              margin-bottom: .2rem;
            }

            .column-type {
              @extend .info-2;
              position: relative;
            }
          }

          .dropdown {
            position: absolute;
            flex: 0 0 auto;
            display:flex;
            width: 3rem;
            height: 100%;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            opacity: 0;
            z-index: 1;
            right:0;
            top:0;
            bottom:0;
            border-left: 1px solid $dark-accent--medium;
            background-color:$heading-bg;

            &:hover, &.active {
              opacity: 1;
            }

            button {
              flex: 0 0 auto;
              height:2.5rem;
              width: 2.5rem;
              font-size: .7rem;
              border: 0;
              background-color: transparent;
              color: inherit;
              position: relative;
              opacity: .9;
              color: $brand-orange;
              &:hover {
                background-color:$brand-orange;
                color: white;
              }
              i {
                margin-left: 1px;
              }
            }
          }

          input[name="new-column-key"] {
            padding: .2rem .3rem;
            margin: 0 .5rem;
            // padding-left: .8rem;
            // padding-right: .8rem;
            border-radius: 3px;
            height: 3rem;
            width: 100%;
            flex: 1 1 auto;
            border: 0;
            border: 2px solid $brand-orange;

            & + .dropdown {
            //  display: none; -- un-comment to hide menu when text field input is selected
            }

          }
        }
      }

      .react-grid-HeaderCell:hover .context-menu {
        opacity: 1;
      }

      .react-grid-HeaderCell:active {
        background-color: $header-hover;
        cursor: grabbing;
        cursor: -moz-grabbing;
        cursor: -webkit-grabbing;

        .dropdown {
          opacity: 0;
        }
      }

      .react-grid-HeaderCell__draggable{
        z-index: 2;
        width:8px!important;
      }

      .react-grid-HeaderCell__draggable:hover,
      .react-grid-HeaderCell__draggable:active {
        background-color: $header-hover;
      }

      .react-grid-Row {
        height: 3.5rem;
      }

      // Your average cell in the table
      .react-grid-Cell {
        position: absolute;
        contain: layout;
        height: 3.5rem;
        padding-right: 0;
        padding-left: 0;
        border-right: 0;
        border-bottom: 0;
        border-top: 0;
        color: $brand-text--darker;

        .react-grid-Cell__value>* { // .cell-text, .cell-datetime, .cell-number, .cell-null
          @include table-content;
          margin: 0 1rem;
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
        }

        .cell-number {
          text-align: right;

          .number-prefix, .number-suffix {
            @include font-nunito-extra-light;
          }

          .number-suffix {
            padding-left: .2rem;
          }

          .number-prefix {
            padding-right: .2rem;
          }
        }

        .cell-text {
          // The value is already mangled to take only one line. Now, preserve
          // the whitespace within that one line.
          white-space: pre;
        }

        // when a cell value cannot be rendered
        .cell-null {
          // .cell-null is sometimes added to .cell-text, .cell-datetime and .cell-number
          &::before {
            // Add 'null' text in CSS, not React, so copy/paste won't copy it
            @include font-nunito-extra-light;
            content: 'null';
            color: lighten($brand-text--dark, 30%);
            font-style: italic; // FIXME we don't ship this font as italic
            font-weight: 200;
          }
        }

        .react-grid-Cell__value>.cell-null {
          // "overflow: hidden" seems to crop the fake-italics 'null' in number cells on
          // Chrome 73 on Mac/Linux. TODO fix the font to correct this problem
          overflow: visible;
        }

        // fix number column on the left
        .row-number {
          color: $labels;
          font-weight: 400;
          text-align: center;
          font-size: 1.2rem;
          line-height: 35px; // 35px is react-data-grid's hard-coded row height

        }

        // Shrinking font sizes based on number of digits
        .row-number-3 {
          font-size: 1.0rem;
        }
        .row-number-4 {
          font-size: 0.9rem;
        }
        .row-number-5 {
          font-size: 0.8rem;
        }
        .row-number-6, .row-number-7, .row-number-8 {
          font-size: 0.7rem;
        }

        // cell #
        &:last-child {
          border-left: 1px solid transparent;
          border-right: 1px solid $table-border;

          &, * {
            // react-data-grid adds lots of children. We want them _all_ to
            // take up all the space
            display: block;
            margin: 0;
            padding: 0;
            width: 100%;
            height: 3.5rem;
          }

          label.is-row-selected {
            display: block;
            position: relative;
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;

            // To avoid shift-click selecting text, we'll position the input on
            // top of the text and make it invisible. Users can still select it
            // by dragging _through_ the number; they just can't drag _on_ the
            // number.
            input {
              // We already set display+width+height in our "*" selector
              position: absolute;
              top: 0;
              left: 0;
              cursor: pointer;
              opacity: 0;
            }
          }
        }

        // Click and edit a cell
        &:focus {
          outline: 2px solid $brand-orange;
        }

        &:last-child:focus {
          outline: none;
        }

        input {
          @include table-content;
          padding-left: 0.8rem;
          background-color: white;
          border-radius: 0;
          outline: 2px solid $brand-orange;
          height: 3.5rem!important;
        }
      }

      .react-grid-Row.row-selected .react-grid-Cell:last-child {
        //background-color: lighten($brand-orange, 10%)!important;
        border-right: 1px solid $brand-orange;

        span {
          color:darken($brand-orange, 18%)!important;
          font-weight: normal;
        }
      }

      // Entire Row styling

      .react-grid-Row--odd .react-grid-Cell {
        background-color: #ECF4F8;
      }

      .react-grid-Row:hover .react-grid-Cell {
        background-color: #DBEBF3;
      }

      .react-grid-Row:hover .react-grid-Cell:last-child {
        border-left: 1px solid $table-border;
        border-right: 1px solid $dark-accent--medium;

        .row-number {
          color: lighten($brand-text--dark,5%);
        }
      }

      // Selected rows

      // cancel row background - we style cells
      .react-grid-Row.row-selected {
        // Selected row and hover
        &:hover .react-grid-Cell:last-child {
          border-right: 1px solid $brand-orange;

          .row-number {
            color:darken($brand-orange, 22%)!important;
          }
        }
      }

      // Cells in selected rows:

      .react-grid-Row--even.row-selected .react-grid-Cell {
        background-color: lighten($brand-orange, 23%);
      }
      .react-grid-Row--odd.row-selected .react-grid-Cell {
        background-color: lighten($brand-orange, 19%);
      }

      .row-selected:hover .react-grid-Cell {
        background-color: lighten($brand-orange, 15%)
      }

      // Cells in last row have a bottom border to form the table's bottom border
      .react-grid-Row:last-of-type .react-grid-Cell {
        border-bottom: 1px solid $table-border;
      }
      // Last row selected has orange border at the bottom -- not working as intended, what we want is the last row *selected* not the last row *if selected *
      .row-selected:last-of-type .react-grid-Cell {
        border-bottom: 1px solid $brand-orange;
      }

      // Last cells in any row have a right border to form the table's right border
      .react-grid-Row .react-grid-Cell:nth-last-child(2) {
        border-right: 1px solid $table-border;
      }
      .react-grid-Row.row-selected .react-grid-Cell:nth-last-child(2) {
        border-right: 1px solid $brand-orange;
      }
    }
  }
}


// // in lesson
// .workflow-root.in-lesson {
//
//   .outputpane {
//
//     .outputpane-header{
//
//       .export-table {
//
//         color:$brand-workspace;
//         &:hover {
//           background-color: $brand-workspace--light;
//         }
//       }
//     }
//   }
// }
