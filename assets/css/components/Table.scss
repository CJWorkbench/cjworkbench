/* Output Pane */

.outputpane {
  flex: 1 1 auto;
  position: relative;
  display: flex;
  flex-direction: column;

  // iframe for charts
  .outputpane-iframe {
    flex: 0 0 auto;
    width:100%;
    height: 100%; // OutputIframe.js will override this ...
    max-height: calc(60% - 3rem); // ... and this is the max
    position:relative;
    border-bottom: 1px solid $WF-background;
    border-left: 1px solid $WF-background;
    iframe {
      border:none;
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
    }
    .outputpane-iframe-control-overlay {
      position: absolute;
      margin-top: 1.6rem;
      right:7.5rem;
      width: 4rem;
      height: 4rem;
      background-color: transparent;
      i {color:$brand-text--dark;}
    }
    .outputpane-iframe-control-overlay .btn {
      position: absolute;
      width: 3.5rem;
      height: 3.5rem;
      border-radius: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 2px solid $Vlight-gray;
      font-size: 1.6rem;
    }
    .outputpane-iframe-control-overlay .btn:hover{
      border:2px solid $light-gray;
    }
  }

  .outputpane-table {
    position: relative;
    flex: 1 1 auto;
    border-left:1px solid #E7EAED;
    display: flex;
    flex-direction: column;

    .outputpane-header {
      flex: 0 0 auto; // fixed vertical size (unlike grid, which grows)
      display: flex;
      align-items: center;
      justify-content: space-between;
      height: 5.5rem;
      background-color: white;

      .table-info-container {
        display: flex;
        margin-left: 5.25rem;

        .table-info {
          text-align: center;
          margin-right: 3rem;
          background-color: transparent;

          .data {
            color: $labels;
            text-transform: uppercase;
            font-size: 1rem;
            line-height: 1;
            cursor: default;
          }
          .value {
            color: $dark-gray;
            font-size: 1.4rem;
            line-height: 1;
            margin-top: .7rem;
          }
        }
      }

      .export-table {
        display: inline-block;
        white-space: nowrap;
        padding: .5rem 1.5rem;
        margin-right: 2.25rem;
        border-radius: 2rem;
        color: $table-element;
        background-color: white;
        cursor: pointer;
        &:hover{
          background-color: $dark-accent--soft;
        }
        font-size: 1.4rem;

        .icon-download {
          font-size: 1.5rem;
          margin-right:1rem;
        }
        .feed {
          margin-left: 1rem;
          padding-left: 1rem;
          border-left: 2px solid $table-element--light;
        }
      }
    }

    .outputpane-data {
      flex: 1 1 auto; // consume maximum height (unlike header, which is fixed-height)
      position: relative; // for .react-grid-Container

      .react-grid-Container {
        // Do not influence the height of .outputpane-data.
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
      }

      .react-grid-Grid{
        border-top: 0px solid #E7EAED;
        border-right: none;
        border-bottom: none;
        border-left: none;
      }

      .react-grid-Canvas {
        background-color: $table-background;
        padding-bottom: 10rem;
      }

      .react-grid-HeaderRow{
        background-color: $table-background;

        .react-grid-HeaderCell:not(:last-child) .column-reorder-drop-zone.align-right {
          // We place a dropzone at the beginning and end of each header cell
          // because it's easy. However, each .react-grid-HeaderCell has
          // position:absolute set in its style by react-data-grid. That gives
          // each subsequent cell a higher effective z-index than the previous
          // one. We want our .align-right dropzone to extend _past_ the right
          // of the cell, but that will only work on the final cell: in all other
          // cells, the next .react-grid-HeaderCell will appear on top.
          //
          // So we hide the .align-right dropzone on all but the final cell. We
          // trust DataGrid.js to place a .align-left dropzone in the next cell
          // in the same place ... and the .align-left dropzone will be on top,
          // just the way we want.
          display: none;
        }
      }

      .react-grid-HeaderCell {
        background-color: $heading-bg;
        color:white;
        border-right:1px solid rgba(0,0,0,0.1);
        border-bottom:0px;
        @extend %font-nunito-regular;
        font-size: 1.3rem;
        padding: 0;
        display: flex;

        .column-reorder-drop-zone {
          position: absolute;
          top: 0;
          height: 100%;
          width: 0.5rem;
          z-index: 1;

          &.align-left {
            left: -.25rem;
          }
          &.align-right {
            right: -.25rem;
          }

          &.drag-hover {
            background-color: $brand-orange;
          }

          &::before {
            // Make a bigger, invisible drop zone: when we drag over this,
            // the user can drop
            content: '';
            position: absolute;
            top: 0;
            height: 100%;
            left: -8rem;
            right: -8rem;
          }
        }

        .column-letter {
          display: flex;
          align-items: center;
          justify-content: center;
          text-align: center;
          padding-top: .15rem;
          color: $white;
          opacity: .7;
          height: 1.8rem;
          font-weight: 300;
          border-bottom: 1px solid $dark-accent--soft;
        }

        .data-grid-column-header  {
          display: flex;
          align-items: center;
          overflow: hidden;

          .column-key {
            padding: .8rem 1rem; // .8rem dictated by react-data-grid JS
            display: block;
            flex: 1 1 auto;
            overflow: hidden;
            height:100%;
            cursor: text;
            height:5rem;

            .column-type {
              @extend .info-1;
              font-size: 1.1rem;
              letter-spacing: .3px;
              opacity: .7;
              position: relative;
              bottom:-.2rem;
            }
          }

          .dropdown {
            position: absolute;
            flex: 0 0 auto;
            display:flex;
            width:3.4rem;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            opacity: 0;
            z-index: 1;
            right:0;
            top:0;
            bottom:0;
            border-left: 1px solid $dark-accent--soft;
            background-color:$heading-bg;
            &:active{opacity: 1}

            &.show {
              opacity: 1;
            }

            button {
              flex: 0 0 auto;
              height:2.3rem;
              width: 2.3rem;
              font-size: 1.35rem;
              border: 0;
              background-color: transparent;
              color: inherit;
              position: relative;
              opacity: .85;
              &:hover {
                background-color:$header-hover;
              }
            }
          }

          input[name="new-column-key"] {
            // padding: just 1px off from .column-key
            padding-top: .9rem;
            padding-bottom: 2.3rem;
            outline: 2px solid $brand-orange;
            padding-left: 1rem;
            padding-right: 1rem;
            height: 5rem;
            flex: 1 1 auto;
            border: 0;

            & + .dropdown {
              display: none;
            }
          }
        }
      }

      .react-grid-HeaderCell:hover .dropdown {
        opacity: 1;
      }

      .react-grid-HeaderCell:active {
        background-color: $header-hover;
        cursor: grabbing;
        cursor: -moz-grabbing;
        cursor: -webkit-grabbing;

        .dropdown {
          opacity: 0;
        }
      }

      .react-grid-HeaderCell__draggable{
        z-index: 2;
        width:8px!important;
      }

      .react-grid-HeaderCell__draggable:hover,
      .react-grid-HeaderCell__draggable:active {
        background-color: $header-hover;

      }

      // Your average cell in the table
      .react-grid-Cell {
        padding-right: 0;
        padding-left: 0;
        border-right: 0px solid $table-border;
        border-bottom: 0px solid transparent;
        border-top: 0;

        &.rdg-row-actions-cell {
          border-right: 1px solid $table-border;
          //border-left: 1px solid $table-border;

          &, * {
            // react-data-grid adds lots of children. We want them _all_ to
            // take up all the space
            display: block;
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
          }

          label.is-row-selected {
            position: relative;

            // To avoid shift-click selecting text, we'll position the input on
            // top of the text and make it invisible. Users can still select it
            // by dragging _through_ the number; they just can't drag _on_ the
            // number.
            input {
              // We already set display+width+height in our "*" selector
              position: absolute;
              top: 0;
              left: 0;
              cursor: pointer;
              opacity: 0;
            }
          }

          .row-number {
            color: $medium-gray;
            font-weight: 100;
            text-align: center;
            font-size: 1.2rem;
            line-height: 35px; // 35px is react-data-grid's hard-coded row height
          }
          // Shrinking font sizes based on number of digits
          .row-number-3 {
            font-size: 1.0rem;
          }
          .row-number-4 {
            font-size: 0.9rem;
          }
          .row-number-5 {
            font-size: 0.8rem;
          }
          .row-number-6, .row-number-7, .row-number-8 {
            font-size: 0.7rem;
          }
        }

        .cell-text, .cell-datetime {
          margin: 0 1rem;
          font-size: 1.3rem;
          overflow: hidden;
          word-wrap: nowrap;
          text-overflow: ellipsis;
        }

        .cell-null {
          color: $light-gray;
          @extend .content-3;
          font-size: 1.2rem;
          line-height: 1.2rem;
          font-style: italic;
          padding-right: 2px;
          font-weight: 100;
        }

        .cell-number {
          margin: 0 1rem;
          text-align: right;
          font-size: 1.2rem;
        }

        //Click and edit a cell
        &:focus {
          outline: 2px solid $brand-orange;
        }

        &.rdg-row-actions-cell:focus {
          outline: none;
        }

        & input {
          padding-left: 0.8rem;
          background-color: white;
          border-radius: 0;
          outline: 2px solid $brand-orange;
          font-size: 1.3rem;
          height: 3.5rem;
        }
      }

      // Row styling

      .react-grid-Row--odd .react-grid-Cell {
        background-color: #ECF4F8;
      }

      .react-grid-Row:hover .react-grid-Cell {
        background-color: #DBEBF3;
      }

      .react-grid-Row.row-selected {
        &, .react-grid-Cell {
          background-color: lighten($brand-orange, 10%);
        }
      }

      // Cells in last row have a bottom border to form the table's bottom border
      .react-grid-Row:last-of-type .react-grid-Cell {
        border-bottom: 1px solid $table-border;
      }

      // Last cells in any row have a right border to form the table's right border
      .react-grid-Row .react-grid-Cell:nth-last-child(2) {
        border-right: 1px solid $table-border;
      }
    }
  }
}


// in lesson
.workflow-root.in-lesson {

  .outputpane {

    .outputpane-header{

      .export-table {

        color:$table-element;
        &:hover {background-color: $dark-accent--soft;}
      }
    }
  }
}
