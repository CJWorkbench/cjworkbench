/* Output Pane */

.outputpane {
  flex: 1 1 auto;
  position: relative;
  display: flex;
  flex-direction: column;
  border-left: 2px solid $module-color-unreachable;

  &.module-ok {
    border-color: $module-color-ok !important;
  }
  &.module-error {
    border-color: $module-color-error;
  }
  &.module-busy {
    border-color: $module-color-busy;
  }

  .table-switcher {
    height: 100%;
    position: relative;

    & > * {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    &.has-loaded .loading-table {
      // Hide the DataGrid of the loading table: we'll show the current table
      // instead.
      //
      // Keep its size: DataGrid should to know its size to load correctly.
      pointer-events: none;
      opacity: 0;
    }

    &.has-loading .loaded-table {
      // Subtly fade out old data. The user doesn't want it.
      opacity: 0.8;
    }
  }

  .outputpane-table {
    height: 100%;
    position: relative;
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;

    .outputpane-data {
      flex: 1 1 auto; // consume maximum height (unlike header, which is fixed-height)
      position: relative;

      // DataGrid is the heaviest DOM tree we have, and it affects the
      // performance of the custom drag layer (and probably everything else). By
      // putting a no-op translate3d property on it, we coerce browsers into
      // rendering it and all of its children in a seperate compositing layer,
      // improving the rendering of everything else in the app.
      transform: translate3d(0, 0, 0);

      .big-table {
        position: absolute;
        max-height: 100%;
        width: 100%;
        height: 100%;
      }

      thead th {
        @include content-1();
        color: white;
        background-color: $heading-bg;
        border-right: 1px solid $dark-accent--strong;
        border-bottom: 0px;
        border-left: 0px;
        padding: 0;

        .column-reorder-drop-zone {
          position: absolute;
          top: 0;
          height: 100%;
          width: 0.5rem;
          z-index: 1;

          &.align-left {
            left: -0.25rem;
          }
          &.align-right {
            right: -0.25rem;
          }

          &.drag-hover {
            background-color: $brand-orange;
          }

          &::before {
            // Make a bigger, invisible drop zone: when we drag over this,
            // the user can drop
            content: '';
            position: absolute;
            top: 0;
            height: 100%;
            left: -8rem;
            right: -8rem;
          }
        }

        .column-letter {
          text-align: center;
          padding-top: 0.3rem;
          color: white;
          height: 1.6rem;
          font-size: 1.2rem;
          cursor: grab;
        }

        .data-grid-column-header {
          display: flex;
          align-items: center;
          overflow: hidden;

          .column-key {
            padding: 0.6rem 1rem; // .8rem dictated by react-data-grid JS
            display: block;
            flex: 1 1 auto;
            overflow: hidden;
            height: 100%;
            cursor: text;
            height: 4.5rem;

            .value {
              text-overflow: ellipsis;
              white-space: pre; // don't wrap; on all-space colnames, consume 1 line height
              overflow: hidden;
              margin-bottom: 0.2rem;
            }

            .column-type {
              @include info-2;
              position: relative;
            }
          }

          .dropdown {
            // TODO use Popper
            position: absolute;
            flex: 0 0 auto;
            display: flex;
            width: 3rem;
            height: 100%;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            opacity: 0;
            z-index: 1;
            right: 0;
            top: 0;
            bottom: 0;
            border-left: 1px solid $dark-accent--medium;
            background-color: $heading-bg;

            &:hover,
            &.active {
              opacity: 1;
            }

            button {
              flex: 0 0 auto;
              height: 2.5rem;
              width: 2.5rem;
              font-size: 0.7rem;
              border: 0;
              background-color: transparent;
              color: inherit;
              position: relative;
              opacity: 0.9;
              color: $brand-orange;
              &:hover {
                background-color: $brand-orange;
                color: white;
              }
              i {
                margin-left: 1px;
              }
            }
          }

          input[name='new-column-key'] {
            padding: 0.2rem 0.8rem;
            margin-top: 0.5rem;
            // padding-left: .8rem;
            // padding-right: .8rem;
            border-radius: 5px;
            height: 3rem;
            width: 100%;
            flex: 1 1 auto;
            border: 0;
            border: 2px solid $brand-orange;

            & + .dropdown {
              //  display: none; -- un-comment to hide menu when text field input is selected
            }
          }
        }

        &:hover .context-menu {
          opacity: 1;
        }

        &:active {
          background-color: $header-hover;
          cursor: grabbing;
          cursor: -moz-grabbing;
          cursor: -webkit-grabbing;

          .dropdown {
            opacity: 0;
          }
        }
      }

      // Your average cell in the table
      .react-grid-Cell {
        position: absolute;
        contain: layout;
        height: 3.5rem;
        padding-right: 0;
        padding-left: 0;
        color: $brand-text--darker;
        border: 0px solid transparent;

        .react-grid-Cell__value > * {
          // .cell-date, .cell-text, .cell-timestamp, .cell-number, .cell-null
          @include table-content;
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
        }

        .react-grid-Cell__value > .cell-null {
          // "overflow: hidden" seems to crop the fake-italics 'null' in number cells on
          // Chrome 73 on Mac/Linux. TODO fix the font to correct this problem
          overflow: visible;
        }

        // cell #
        &:last-child {
          label.is-row-selected {
            display: block;
            position: relative;
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;

            // To avoid shift-click selecting text, we'll position the input on
            // top of the text and make it invisible. Users can still select it
            // by dragging _through_ the number; they just can't drag _on_ the
            // number.
            input {
              // We already set display+width+height in our "*" selector
              position: absolute;
              top: 0;
              left: 0;
              cursor: pointer;
              opacity: 0;
            }
          }
        }

        // Click a cell
        &:focus {
          outline: none;
          border: 2px solid $brand-orange;
          border-radius: 5px;
          background-color: white !important;

          .react-grid-Cell__value > * {
            padding: 0 0.8rem;
          }
        }

        &:last-child:focus {
          outline: none;
        }

        input {
          position: relative;
          background-color: white;
          border-radius: 5px;
          outline: none;
          border-color: $brand-orange;
          padding: 0 0.8rem;
          left: 0;
        }
      }

      .react-grid-Row.row-selected .react-grid-Cell:last-child {
        //background-color: lighten($brand-orange, 10%)!important;
        border-right: 1px solid $brand-orange;

        span {
          color: darken($brand-orange, 18%) !important;
          font-weight: normal;
        }
      }

      // cancel row background - we style cells
      .react-grid-Row.row-selected {
        // Selected row and hover
        &:hover .react-grid-Cell:last-child {
          border-right: 1px solid $brand-orange;

          .row-number {
            color: darken($brand-orange, 22%) !important;
          }
        }
      }

      // Cells in selected rows:

      .react-grid-Row--even.row-selected .react-grid-Cell {
        background-color: lighten($brand-orange, 23%);
      }
      .react-grid-Row--odd.row-selected .react-grid-Cell {
        background-color: lighten($brand-orange, 19%);
      }

      .row-selected:hover .react-grid-Cell {
        background-color: lighten($brand-orange, 15%);
      }

      // Cells in last row have a bottom border to form the table's bottom border
      .react-grid-Row:last-of-type .react-grid-Cell {
        border-bottom: 1px solid $table-border;

        &:focus {
          border: 2px solid $brand-orange;
          .react-grid-Cell__value > * {
            margin-bottom: 0.1rem; // to compensate for 1px border in parent
          }
        }
      }
      // Last row selected has orange border at the bottom -- not working as intended, what we want is the last row *selected* not the last row *if selected *
      .row-selected:last-of-type .react-grid-Cell {
        border-bottom: 1px solid $brand-orange;
      }

      // Last cells in any row have a right border to form the table's right border
      .react-grid-Row .react-grid-Cell:nth-last-child(2) {
        border-right: 1px solid $table-border;

        &:focus {
          border: 2px solid $brand-orange;

          .react-grid-Cell__value > * {
            margin-right: 0.7rem; // to compensate for 1px border in parent
          }
        }
      }
      .react-grid-Row.row-selected .react-grid-Cell:nth-last-child(2) {
        border-right: 1px solid $brand-orange;
      }
    }
  }
}

// // in lesson
// .workflow-root.in-lesson {
//
//   .outputpane {
//
//     .outputpane-header{
//
//       .export-table {
//
//         color:$brand-workspace;
//         &:hover {
//           background-color: $brand-workspace--light;
//         }
//       }
//     }
//   }
// }
