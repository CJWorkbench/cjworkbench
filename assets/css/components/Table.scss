/* Output Pane */

.outputpane {
  flex: 1 1 auto;
  position: relative;

  .outputpane-box {
    display: flex;
    flex-direction: column;
  }

  // iframe for charts
  .outputpane-iframe {
    flex: 0 0 auto;
    width:100%;
    height: calc(50% - 3rem);
    position:relative;
    iframe {
      border:none;
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: 100%;
    }
    .outputpane-iframe-control-overlay {
      position: absolute;
      right:6rem;
      width: 4rem;
      height: 4rem;
      background-color: transparent;
      i {color:$brand-text--dark;}
    }
    .outputpane-iframe-control-overlay .btn {
      position: absolute;
      width: 3.5rem;
      height: 3.5rem;
      border-radius: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 2px solid $Vlight-gray;
      font-size: 1.6rem;
    }
    .outputpane-iframe-control-overlay .btn:hover{
      border:2px solid $light-gray;
    }
  }

  .outputpane-table {
    position: relative;
    flex: 1 1 auto;

    .outputpane-header {
      display: flex;
      align-items: center;
      height: 5.5rem;
      background-color: #FFFFFF;
      padding:0 2.25rem;

      .container {
        display: flex;
        margin-left: 1.5rem;
        width:30rem;

        .table-info {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: space-between;
          margin-right: 5rem;
          margin-top: .5rem;
          background-color: transparent;

          .data {
            @extend %content-4;
            color:$light-gray;
            text-transform: uppercase;
            font-size: 1rem;
            cursor: default;
          }
          .value {
            margin-top: .7rem;
            @extend %content-2;
            color:$dark-gray;
          }
        }
      }


      .export-table {
        display: flex;
        padding:0 1.5rem;
        align-items: center;
        height: 3.5rem;
        border-radius: 2rem;
        color:$table-element;
        background-color: $white;
        cursor: pointer;
        &:hover{
          background-color: $dark-accent--soft;
        }
        font-size: 1.5rem;

        span {font-size: 1.4rem;}
        .icon-download {
          margin-right:1rem;
        }
        .feed {
          margin-left: 1rem;
          padding-left: 1rem;
          border-left: .2rem solid $table-element--light;
        }
      }
    }
    .react-grid-Cell--locked:last-of-type {
      border-right: 1px solid rgba(113,155,176,.2);

      .row-number {
        color:$light-gray;
        @extend .content-3;
        text-align: center;
        font-size: 1.2rem!important;
        line-height: 1.2rem!important;
      }
      // Shrinking font sizes based on number of digits
      // TODO: Can we make the font size a variable?
      .row-number-3 {
        @extend .row-number;
        font-size: 1.0rem!important;
      }
      .row-number-4 {
        @extend .row-number;
        font-size: 0.9rem!important;
      }
      .row-number-5 {
        @extend .row-number;
        font-size: 0.8rem!important;
      }
      .row-number-6 {
        @extend .row-number;
        font-size: 0.7rem!important;
      }
    }

    .react-grid-Cell--locked {
      .react-grid-Cell__value {
        margin-left: 0rem!important;
      }
    }

    .react-grid-Cell.react-grid-Cell--locked:focus{
      outline: 0px;
    }

    // This is the only way to disable a react-data-grid editing feature we don't want
    // https://github.com/adazzle/react-data-grid/issues/822
    .drag-handle { display: none; }

    .react-grid-Canvas{
      background-color: $table-background;
      padding-bottom: 10rem;
    }

    .react-grid-HeaderRow{
      background-color: $table-background;

      .react-grid-HeaderCell:not(:last-child) .column-reorder-drop-zone.align-right {
        // We place a dropzone at the beginning and end of each header cell
        // because it's easy. However, each .react-grid-HeaderCell has
        // position:absolute set in its style by react-data-grid. That gives
        // each subsequent cell a higher effective z-index than the previous
        // one. We want our .align-right dropzone to extend _past_ the right
        // of the cell, but that will only work on the final cell: in all other
        // cells, the next .react-grid-HeaderCell will appear on top.
        //
        // So we hide the .align-right dropzone on all but the final cell. We
        // trust DataGrid.js to place a .align-left dropzone in the next cell
        // in the same place ... and the .align-left dropzone will be on top,
        // just the way we want.
        display: none;
      }
    }

    .react-grid-HeaderCell{
      background-color: $heading-bg;
      color:white;
      border-right:1px solid rgba(0,0,0,0.1);
      border-bottom:0px;
      @extend %font-nunito-regular;
      font-size: 1.2rem;
      padding: 0;
      display: flex;

      .column-reorder-drop-zone {
        position: absolute;
        top: 0;
        height: 100%;
        width: 0.5rem;
        z-index: 1;

        &.align-left {
          left: -.25rem;
        }
        &.align-right {
          right: -.25rem;
        }

        &.drag-hover {
          background-color: $brand-orange;
        }

        &::before {
          // Make a bigger, invisible drop zone: when we drag over this,
          // the user can drop
          content: '';
          position: absolute;
          top: 0;
          height: 100%;
          left: -8rem;
          right: -8rem;
        }
      }

      .column-letter {
        text-align: center;
        padding-top: .15rem;
        background-color: #fff;
        color: $light-gray;
        height: 2rem;
        padding-bottom: .1rem;
        font-weight: 300;
        //box shadow to cover the 1px border from header with a lighter one
        box-shadow:
          -1px 0 0 $table-border,
           1px 0 0 $table-border;
      }

      .sort-container {
        display: flex;
        align-items: center;
        overflow: hidden;

        .column-key {
          padding: .8rem 1rem; // .8rem dictated by react-data-grid JS
          flex: 1 1 auto;
          overflow: hidden;
          height:100%;
        }

        .column-sort-arrow {
          position:absolute;
          height: 3.6rem;
          background: $heading-bg;
          top:-.5rem;
          right:0;
          border-left: 1px solid $dark-accent--medium;

        }

        input[name="new-column-key"] {
          // padding: just 1px off from .column-key
          padding-top: .9rem;
          padding-bottom: .9rem;
          outline: 2px solid $brand-orange;
          padding-left: 1rem;
          padding-right: 1rem;
          flex: 1 1 auto;
          border: 0;
        }

        button {
          flex: 0 0 auto;
          font-size: .7rem;
          margin-top:.5rem ;
          border: 0;
          cursor: pointer;
          background-color: transparent;
          color: inherit;
        }
      }
    }


    .react-grid-HeaderCell:active {
      background-color: #95B5C9;
    }

    .react-grid-HeaderCell__draggable{
      width:8px!important;
    }

    .react-grid-HeaderCell__draggable:hover,
    .react-grid-HeaderCell__draggable:active {
      background-color: #95B5C9;
    }

    .react-grid-Grid{
      border-top:1px solid #E7EAED;
      border-right:none;
      border-bottom:none;
      border-left:none;
    }

    .react-grid-Cell{
      padding-right:0rem;
      padding-left:0rem;
      border-right: 1px solid $table-border;
      border-bottom: 1px solid $table-border;
      //Click and edit a cell
      &:focus {
        padding-left: 0;
        border-radius: 0;
      	outline: 2px solid $brand-orange;
        font-size: 1.2rem;
      }
      & input {
        padding-left: 0.8rem;
        background-color: $white;
        border-radius: 0;
      	outline: 2px solid $brand-orange;
        font-size: 1.2rem;
      }
    }

    .react-grid-Cell:not(.editing) .react-grid-Cell__value{
      margin-left: 1rem;
      font-size: 1.2rem;
    }


    .react-grid-Row--odd .react-grid-Cell{
      background-color: #EDF4F6;
    }

    .react-grid-Row--odd:hover .react-grid-Cell,.react-grid-Row--even:hover .react-grid-Cell{
      background-color: #DBEBF3;
    }

    /* This div may be superfluous wrt .outputpane */

    .outputpane-iframe + .outputpane-table {
      height: calc(50% - 3rem);
    }
    .outputpane-table {
      height:calc(100% - 5.5rem);
      position:relative;
      border-left:1px solid #E7EAED
    }

    .outputpane-data {
      overflow: hidden;
      position: absolute;
      top:5.5rem;
      left:0;
      right:0;
      bottom:0;
    }

    .overlapping .outputpane.focus .outputpane-box {
      z-index: 2;
      box-shadow: 0px 2px 10px rgba(0,0,0,0.2);
    }

    /* Create an overlay to absorb click events so we don't change settings or set a different
    active wfmodule on focus change. We use the pseudo-element "after" to avoid writing an empty
    div into the DOM, since we don't really want another element, we just want this behavior. */

    .overlapping .outputpane:not(.focus)::after {
      content:' ';
      display: block;
      top:0;
      left:0;
      right:0;
      bottom:0;
      position:absolute;
    }
  }
}

// in lesson
.workflow-root.in-lesson {

  .outputpane {

    .outputpane-header{

      .export-table {

        color:$table-element;
        &:hover {background-color: $dark-accent--soft;}
      }
    }
  }
}


///// June 13 2018 - Pierre
// // Table in modules (Such as Rename columns)
// .module-content {
//
//   .react-grid-Grid {
//     @extend %font-nunito-regular;
//     font-size: 1.2rem;
//     height: 4rem;
//
//   }
//   .table-module-wrapper {
//     resize: vertical;
//     border-radius: 3px;
//     max-height: 26rem;
//     overflow: auto;
//     overflow-x: hidden;
//
//     .react-grid-Main{
//       outline:0px;
//
//       .react-grid-Canvas {
//         background-color: $table-background;
//       }
//     }
//   }
// }
