// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataGrid tests, Renders the grid 1`] = `
<DataGrid
  columnTypes={
    Array [
      "number",
      "text",
      "text",
      "text",
    ]
  }
  columns={
    Array [
      "aaa",
      "bbbb",
      "getCell",
      "select-row",
    ]
  }
  getRow={[Function]}
  isReadOnly={false}
  onEditCell={[MockFunction]}
  onGridSort={[MockFunction]}
  onRenameColumn={[MockFunction]}
  onReorderColumns={[MockFunction]}
  onSetSelectedRowIndexes={[MockFunction]}
  selectedRowIndexes={Array []}
  setDropdownAction={[MockFunction]}
  totalRows={2}
  wfModuleId={100}
>
  <ReactDataGrid
    cellNavigationMode="none"
    columnEquality={[Function]}
    columns={
      Array [
        Object {
          "editable": true,
          "formatter": [Function],
          "headerRenderer": <ColumnHeader
            columnKey="aaa"
            columnType="number"
            draggingColumnIndex={null}
            index={0}
            isReadOnly={false}
            isSorted={false}
            onDragEnd={[Function]}
            onDragStartColumnIndex={[Function]}
            onDropColumnIndexAtIndex={[Function]}
            onRenameColumn={[Function]}
            setDropdownAction={[MockFunction]}
            showLetter={false}
          />,
          "key": "aaa",
          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
          "maybeTriggerRenderIfChangeIsSorted": false,
          "maybeTriggerRenderIfChangeShowLetter": undefined,
          "maybeTriggerRenderIfChangeSortDirection": undefined,
          "name": "aaa",
          "resizable": true,
          "width": 160,
        },
        Object {
          "editable": true,
          "formatter": [Function],
          "headerRenderer": <ColumnHeader
            columnKey="bbbb"
            columnType="text"
            draggingColumnIndex={null}
            index={1}
            isReadOnly={false}
            isSorted={false}
            onDragEnd={[Function]}
            onDragStartColumnIndex={[Function]}
            onDropColumnIndexAtIndex={[Function]}
            onRenameColumn={[Function]}
            setDropdownAction={[MockFunction]}
            showLetter={false}
          />,
          "key": "bbbb",
          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
          "maybeTriggerRenderIfChangeIsSorted": false,
          "maybeTriggerRenderIfChangeShowLetter": undefined,
          "maybeTriggerRenderIfChangeSortDirection": undefined,
          "name": "bbbb",
          "resizable": true,
          "width": 160,
        },
        Object {
          "editable": true,
          "formatter": [Function],
          "headerRenderer": <ColumnHeader
            columnKey="getCell"
            columnType="text"
            draggingColumnIndex={null}
            index={2}
            isReadOnly={false}
            isSorted={false}
            onDragEnd={[Function]}
            onDragStartColumnIndex={[Function]}
            onDropColumnIndexAtIndex={[Function]}
            onRenameColumn={[Function]}
            setDropdownAction={[MockFunction]}
            showLetter={false}
          />,
          "key": "getCell",
          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
          "maybeTriggerRenderIfChangeIsSorted": false,
          "maybeTriggerRenderIfChangeShowLetter": undefined,
          "maybeTriggerRenderIfChangeSortDirection": undefined,
          "name": "getCell",
          "resizable": true,
          "width": 160,
        },
        Object {
          "editable": true,
          "formatter": [Function],
          "headerRenderer": <ColumnHeader
            columnKey="select-row"
            columnType="text"
            draggingColumnIndex={null}
            index={3}
            isReadOnly={false}
            isSorted={false}
            onDragEnd={[Function]}
            onDragStartColumnIndex={[Function]}
            onDropColumnIndexAtIndex={[Function]}
            onRenameColumn={[Function]}
            setDropdownAction={[MockFunction]}
            showLetter={false}
          />,
          "key": "select-row",
          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
          "maybeTriggerRenderIfChangeIsSorted": false,
          "maybeTriggerRenderIfChangeShowLetter": undefined,
          "maybeTriggerRenderIfChangeSortDirection": undefined,
          "name": "select-row",
          "resizable": true,
          "width": 160,
        },
      ]
    }
    enableCellAutoFocus={true}
    enableCellSelect={true}
    enableRowSelect={true}
    headerFiltersHeight={45}
    headerRowHeight={50}
    minColumnWidth={80}
    minHeight={98}
    minWidth={98}
    onBeforeEdit={[Function]}
    onGridRowsUpdated={[Function]}
    overScan={
      Object {
        "colsEnd": 5,
        "colsStart": 5,
        "rowsEnd": 5,
        "rowsStart": 5,
      }
    }
    rowActionsCell={[Function]}
    rowGetter={[Function]}
    rowHeight={35}
    rowKey="id"
    rowRenderer={[Function]}
    rowScrollTimeout={0}
    rowSelection={
      Object {
        "enableShiftSelect": true,
        "onRowsDeselected": [Function],
        "onRowsSelected": [Function],
        "selectBy": Object {
          "indexes": Array [],
        },
      }
    }
    rowsCount={2}
    scrollToRowIndex={0}
    selectAllRenderer={[Function]}
    tabIndex={-1}
  >
    <div
      className="react-grid-Container"
      style={
        Object {
          "width": 98,
        }
      }
    >
      <div
        className="react-grid-Main"
      >
        <Grid
          cellMetaData={
            Object {
              "copied": null,
              "dragged": null,
              "enableCellAutoFocus": true,
              "enableCellSelect": true,
              "getCellActions": undefined,
              "getDataGridDOMNode": [Function],
              "handleDragEnterRow": [Function],
              "handleTerminateDrag": [Function],
              "hoveredRowIdx": undefined,
              "isScrollingHorizontallyWithKeyboard": false,
              "isScrollingVerticallyWithKeyboard": false,
              "onAddSubRow": undefined,
              "onCellClick": [Function],
              "onCellContextMenu": [Function],
              "onCellDoubleClick": [Function],
              "onCellExpand": [Function],
              "onCellFocus": [Function],
              "onColumnEvent": [Function],
              "onCommit": [Function],
              "onCommitCancel": [Function],
              "onDeleteSubRow": undefined,
              "onDragHandleDoubleClick": [Function],
              "onRowExpandToggle": [Function],
              "onRowHover": undefined,
              "openCellEditor": [Function],
              "rowKey": "id",
              "selected": Object {
                "idx": 0,
                "rowIdx": 0,
              },
            }
          }
          cellNavigationMode="none"
          columnEquality={[Function]}
          columnMetrics={
            Object {
              "columns": Array [
                Object {
                  "cellClass": "rdg-row-actions-cell",
                  "editable": false,
                  "filterable": false,
                  "formatter": <RowActionsCell
                    rowSelection={
                      Object {
                        "enableShiftSelect": true,
                        "onRowsDeselected": [Function],
                        "onRowsSelected": [Function],
                        "selectBy": Object {
                          "indexes": Array [],
                        },
                      }
                    }
                  />,
                  "getRowMetaData": [Function],
                  "headerRenderer": <renderNull
                    inputRef={[Function]}
                    onChange={[Function]}
                  />,
                  "key": "select-row",
                  "left": 0,
                  "locked": true,
                  "name": "",
                  "onCellChange": [Function],
                  "width": 40,
                },
                Object {
                  "editable": true,
                  "formatter": [Function],
                  "headerRenderer": <ColumnHeader
                    columnKey="aaa"
                    columnType="number"
                    draggingColumnIndex={null}
                    index={0}
                    isReadOnly={false}
                    isSorted={false}
                    onDragEnd={[Function]}
                    onDragStartColumnIndex={[Function]}
                    onDropColumnIndexAtIndex={[Function]}
                    onRenameColumn={[Function]}
                    setDropdownAction={[MockFunction]}
                    showLetter={false}
                  />,
                  "key": "aaa",
                  "left": 40,
                  "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                  "maybeTriggerRenderIfChangeIsSorted": false,
                  "maybeTriggerRenderIfChangeShowLetter": undefined,
                  "maybeTriggerRenderIfChangeSortDirection": undefined,
                  "name": "aaa",
                  "resizable": true,
                  "width": 160,
                },
                Object {
                  "editable": true,
                  "formatter": [Function],
                  "headerRenderer": <ColumnHeader
                    columnKey="bbbb"
                    columnType="text"
                    draggingColumnIndex={null}
                    index={1}
                    isReadOnly={false}
                    isSorted={false}
                    onDragEnd={[Function]}
                    onDragStartColumnIndex={[Function]}
                    onDropColumnIndexAtIndex={[Function]}
                    onRenameColumn={[Function]}
                    setDropdownAction={[MockFunction]}
                    showLetter={false}
                  />,
                  "key": "bbbb",
                  "left": 200,
                  "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                  "maybeTriggerRenderIfChangeIsSorted": false,
                  "maybeTriggerRenderIfChangeShowLetter": undefined,
                  "maybeTriggerRenderIfChangeSortDirection": undefined,
                  "name": "bbbb",
                  "resizable": true,
                  "width": 160,
                },
                Object {
                  "editable": true,
                  "formatter": [Function],
                  "headerRenderer": <ColumnHeader
                    columnKey="getCell"
                    columnType="text"
                    draggingColumnIndex={null}
                    index={2}
                    isReadOnly={false}
                    isSorted={false}
                    onDragEnd={[Function]}
                    onDragStartColumnIndex={[Function]}
                    onDropColumnIndexAtIndex={[Function]}
                    onRenameColumn={[Function]}
                    setDropdownAction={[MockFunction]}
                    showLetter={false}
                  />,
                  "key": "getCell",
                  "left": 360,
                  "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                  "maybeTriggerRenderIfChangeIsSorted": false,
                  "maybeTriggerRenderIfChangeShowLetter": undefined,
                  "maybeTriggerRenderIfChangeSortDirection": undefined,
                  "name": "getCell",
                  "resizable": true,
                  "width": 160,
                },
                Object {
                  "editable": true,
                  "formatter": [Function],
                  "headerRenderer": <ColumnHeader
                    columnKey="select-row"
                    columnType="text"
                    draggingColumnIndex={null}
                    index={3}
                    isReadOnly={false}
                    isSorted={false}
                    onDragEnd={[Function]}
                    onDragStartColumnIndex={[Function]}
                    onDropColumnIndexAtIndex={[Function]}
                    onRenameColumn={[Function]}
                    setDropdownAction={[MockFunction]}
                    showLetter={false}
                  />,
                  "key": "select-row",
                  "left": 520,
                  "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                  "maybeTriggerRenderIfChangeIsSorted": false,
                  "maybeTriggerRenderIfChangeShowLetter": undefined,
                  "maybeTriggerRenderIfChangeSortDirection": undefined,
                  "name": "select-row",
                  "resizable": true,
                  "width": 160,
                },
              ],
              "minColumnWidth": 80,
              "totalWidth": 98,
              "width": 680,
            }
          }
          columns={
            Array [
              Object {
                "editable": true,
                "formatter": [Function],
                "headerRenderer": <ColumnHeader
                  columnKey="aaa"
                  columnType="number"
                  draggingColumnIndex={null}
                  index={0}
                  isReadOnly={false}
                  isSorted={false}
                  onDragEnd={[Function]}
                  onDragStartColumnIndex={[Function]}
                  onDropColumnIndexAtIndex={[Function]}
                  onRenameColumn={[Function]}
                  setDropdownAction={[MockFunction]}
                  showLetter={false}
                />,
                "key": "aaa",
                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                "maybeTriggerRenderIfChangeIsSorted": false,
                "maybeTriggerRenderIfChangeShowLetter": undefined,
                "maybeTriggerRenderIfChangeSortDirection": undefined,
                "name": "aaa",
                "resizable": true,
                "width": 160,
              },
              Object {
                "editable": true,
                "formatter": [Function],
                "headerRenderer": <ColumnHeader
                  columnKey="bbbb"
                  columnType="text"
                  draggingColumnIndex={null}
                  index={1}
                  isReadOnly={false}
                  isSorted={false}
                  onDragEnd={[Function]}
                  onDragStartColumnIndex={[Function]}
                  onDropColumnIndexAtIndex={[Function]}
                  onRenameColumn={[Function]}
                  setDropdownAction={[MockFunction]}
                  showLetter={false}
                />,
                "key": "bbbb",
                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                "maybeTriggerRenderIfChangeIsSorted": false,
                "maybeTriggerRenderIfChangeShowLetter": undefined,
                "maybeTriggerRenderIfChangeSortDirection": undefined,
                "name": "bbbb",
                "resizable": true,
                "width": 160,
              },
              Object {
                "editable": true,
                "formatter": [Function],
                "headerRenderer": <ColumnHeader
                  columnKey="getCell"
                  columnType="text"
                  draggingColumnIndex={null}
                  index={2}
                  isReadOnly={false}
                  isSorted={false}
                  onDragEnd={[Function]}
                  onDragStartColumnIndex={[Function]}
                  onDropColumnIndexAtIndex={[Function]}
                  onRenameColumn={[Function]}
                  setDropdownAction={[MockFunction]}
                  showLetter={false}
                />,
                "key": "getCell",
                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                "maybeTriggerRenderIfChangeIsSorted": false,
                "maybeTriggerRenderIfChangeShowLetter": undefined,
                "maybeTriggerRenderIfChangeSortDirection": undefined,
                "name": "getCell",
                "resizable": true,
                "width": 160,
              },
              Object {
                "editable": true,
                "formatter": [Function],
                "headerRenderer": <ColumnHeader
                  columnKey="select-row"
                  columnType="text"
                  draggingColumnIndex={null}
                  index={3}
                  isReadOnly={false}
                  isSorted={false}
                  onDragEnd={[Function]}
                  onDragStartColumnIndex={[Function]}
                  onDropColumnIndexAtIndex={[Function]}
                  onRenameColumn={[Function]}
                  setDropdownAction={[MockFunction]}
                  showLetter={false}
                />,
                "key": "select-row",
                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                "maybeTriggerRenderIfChangeIsSorted": false,
                "maybeTriggerRenderIfChangeShowLetter": undefined,
                "maybeTriggerRenderIfChangeSortDirection": undefined,
                "name": "select-row",
                "resizable": true,
                "width": 160,
              },
            ]
          }
          enableCellAutoFocus={true}
          enableCellSelect={true}
          enableRowSelect={true}
          expandedRows={Array []}
          headerFiltersHeight={45}
          headerRowHeight={50}
          headerRows={
            Array [
              Object {
                "height": 50,
                "ref": [Function],
                "rowType": "header",
              },
            ]
          }
          minColumnWidth={80}
          minHeight={98}
          minWidth={98}
          onBeforeEdit={[Function]}
          onColumnResize={[Function]}
          onGridRowsUpdated={[Function]}
          onSort={[Function]}
          onViewportClick={[Function]}
          onViewportDoubleClick={[Function]}
          onViewportDragEnd={[Function]}
          onViewportDragStart={[Function]}
          onViewportKeydown={[Function]}
          onViewportKeyup={[Function]}
          overScan={
            Object {
              "colsEnd": 5,
              "colsStart": 5,
              "rowsEnd": 5,
              "rowsStart": 5,
            }
          }
          rowActionsCell={[Function]}
          rowGetter={[Function]}
          rowHeight={35}
          rowKey="id"
          rowOffsetHeight={50}
          rowRenderer={[Function]}
          rowScrollTimeout={0}
          rowSelection={
            Object {
              "indexes": Array [],
            }
          }
          rowsCount={2}
          scrollToRowIndex={0}
          selectAllRenderer={[Function]}
          selectedRows={null}
          sortColumn={null}
          sortDirection={null}
          tabIndex={-1}
          totalWidth={98}
        >
          <div
            className="react-grid-Grid"
            style={
              Object {
                "minHeight": 98,
                "outline": 0,
                "overflow": "hidden",
                "position": "relative",
              }
            }
          >
            <Header
              cellMetaData={
                Object {
                  "copied": null,
                  "dragged": null,
                  "enableCellAutoFocus": true,
                  "enableCellSelect": true,
                  "getCellActions": undefined,
                  "getDataGridDOMNode": [Function],
                  "handleDragEnterRow": [Function],
                  "handleTerminateDrag": [Function],
                  "hoveredRowIdx": undefined,
                  "isScrollingHorizontallyWithKeyboard": false,
                  "isScrollingVerticallyWithKeyboard": false,
                  "onAddSubRow": undefined,
                  "onCellClick": [Function],
                  "onCellContextMenu": [Function],
                  "onCellDoubleClick": [Function],
                  "onCellExpand": [Function],
                  "onCellFocus": [Function],
                  "onColumnEvent": [Function],
                  "onCommit": [Function],
                  "onCommitCancel": [Function],
                  "onDeleteSubRow": undefined,
                  "onDragHandleDoubleClick": [Function],
                  "onRowExpandToggle": [Function],
                  "onRowHover": undefined,
                  "openCellEditor": [Function],
                  "rowKey": "id",
                  "selected": Object {
                    "idx": 0,
                    "rowIdx": 0,
                  },
                }
              }
              columnMetrics={
                Object {
                  "columns": Array [
                    Object {
                      "cellClass": "rdg-row-actions-cell",
                      "editable": false,
                      "filterable": false,
                      "formatter": <RowActionsCell
                        rowSelection={
                          Object {
                            "enableShiftSelect": true,
                            "onRowsDeselected": [Function],
                            "onRowsSelected": [Function],
                            "selectBy": Object {
                              "indexes": Array [],
                            },
                          }
                        }
                      />,
                      "getRowMetaData": [Function],
                      "headerRenderer": <renderNull
                        inputRef={[Function]}
                        onChange={[Function]}
                      />,
                      "key": "select-row",
                      "left": 0,
                      "locked": true,
                      "name": "",
                      "onCellChange": [Function],
                      "width": 40,
                    },
                    Object {
                      "editable": true,
                      "formatter": [Function],
                      "headerRenderer": <ColumnHeader
                        columnKey="aaa"
                        columnType="number"
                        draggingColumnIndex={null}
                        index={0}
                        isReadOnly={false}
                        isSorted={false}
                        onDragEnd={[Function]}
                        onDragStartColumnIndex={[Function]}
                        onDropColumnIndexAtIndex={[Function]}
                        onRenameColumn={[Function]}
                        setDropdownAction={[MockFunction]}
                        showLetter={false}
                      />,
                      "key": "aaa",
                      "left": 40,
                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                      "maybeTriggerRenderIfChangeIsSorted": false,
                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                      "name": "aaa",
                      "resizable": true,
                      "width": 160,
                    },
                    Object {
                      "editable": true,
                      "formatter": [Function],
                      "headerRenderer": <ColumnHeader
                        columnKey="bbbb"
                        columnType="text"
                        draggingColumnIndex={null}
                        index={1}
                        isReadOnly={false}
                        isSorted={false}
                        onDragEnd={[Function]}
                        onDragStartColumnIndex={[Function]}
                        onDropColumnIndexAtIndex={[Function]}
                        onRenameColumn={[Function]}
                        setDropdownAction={[MockFunction]}
                        showLetter={false}
                      />,
                      "key": "bbbb",
                      "left": 200,
                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                      "maybeTriggerRenderIfChangeIsSorted": false,
                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                      "name": "bbbb",
                      "resizable": true,
                      "width": 160,
                    },
                    Object {
                      "editable": true,
                      "formatter": [Function],
                      "headerRenderer": <ColumnHeader
                        columnKey="getCell"
                        columnType="text"
                        draggingColumnIndex={null}
                        index={2}
                        isReadOnly={false}
                        isSorted={false}
                        onDragEnd={[Function]}
                        onDragStartColumnIndex={[Function]}
                        onDropColumnIndexAtIndex={[Function]}
                        onRenameColumn={[Function]}
                        setDropdownAction={[MockFunction]}
                        showLetter={false}
                      />,
                      "key": "getCell",
                      "left": 360,
                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                      "maybeTriggerRenderIfChangeIsSorted": false,
                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                      "name": "getCell",
                      "resizable": true,
                      "width": 160,
                    },
                    Object {
                      "editable": true,
                      "formatter": [Function],
                      "headerRenderer": <ColumnHeader
                        columnKey="select-row"
                        columnType="text"
                        draggingColumnIndex={null}
                        index={3}
                        isReadOnly={false}
                        isSorted={false}
                        onDragEnd={[Function]}
                        onDragStartColumnIndex={[Function]}
                        onDropColumnIndexAtIndex={[Function]}
                        onRenameColumn={[Function]}
                        setDropdownAction={[MockFunction]}
                        showLetter={false}
                      />,
                      "key": "select-row",
                      "left": 520,
                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                      "maybeTriggerRenderIfChangeIsSorted": false,
                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                      "name": "select-row",
                      "resizable": true,
                      "width": 160,
                    },
                  ],
                  "minColumnWidth": 80,
                  "totalWidth": 98,
                  "width": 680,
                }
              }
              headerRows={
                Array [
                  Object {
                    "height": 50,
                    "ref": [Function],
                    "rowType": "header",
                  },
                ]
              }
              height={35}
              onColumnResize={[Function]}
              onScroll={[Function]}
              onSort={[Function]}
              sortColumn={null}
              sortDirection={null}
              totalWidth={98}
            >
              <div
                className="react-grid-Header"
                height={35}
                onClick={[Function]}
                onScroll={[Function]}
                style={
                  Object {
                    "height": 50,
                    "position": "relative",
                  }
                }
              >
                <HeaderRow
                  columns={
                    Array [
                      Object {
                        "cellClass": "rdg-row-actions-cell",
                        "editable": false,
                        "filterable": false,
                        "formatter": <RowActionsCell
                          rowSelection={
                            Object {
                              "enableShiftSelect": true,
                              "onRowsDeselected": [Function],
                              "onRowsSelected": [Function],
                              "selectBy": Object {
                                "indexes": Array [],
                              },
                            }
                          }
                        />,
                        "getRowMetaData": [Function],
                        "headerRenderer": <renderNull
                          inputRef={[Function]}
                          onChange={[Function]}
                        />,
                        "key": "select-row",
                        "left": 0,
                        "locked": true,
                        "name": "",
                        "onCellChange": [Function],
                        "width": 40,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="aaa"
                          columnType="number"
                          draggingColumnIndex={null}
                          index={0}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "aaa",
                        "left": 40,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "aaa",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="bbbb"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={1}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "bbbb",
                        "left": 200,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "bbbb",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="getCell"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={2}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "getCell",
                        "left": 360,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "getCell",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="select-row"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={3}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "select-row",
                        "left": 520,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "select-row",
                        "resizable": true,
                        "width": 160,
                      },
                    ]
                  }
                  height={50}
                  key="function ref(node) {
	        return _this3.row = node;
	      }"
                  onColumnResize={[Function]}
                  onColumnResizeEnd={[Function]}
                  onScroll={[Function]}
                  onSort={[Function]}
                  rowType="header"
                  sortColumn={null}
                  sortDirection={null}
                  style={
                    Object {
                      "left": 0,
                      "minHeight": "auto",
                      "overflowX": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "width": 98,
                    }
                  }
                  width={680}
                >
                  <div
                    className="react-grid-HeaderRow"
                    height={50}
                    onScroll={[Function]}
                    style={
                      Object {
                        "left": 0,
                        "minHeight": "auto",
                        "overflowX": "hidden",
                        "position": "absolute",
                        "top": 0,
                        "width": 98,
                      }
                    }
                    width={680}
                  >
                    <div
                      style={
                        Object {
                          "height": 50,
                          "overflowX": "hidden",
                          "overflowY": "hidden",
                          "whiteSpace": "nowrap",
                          "width": 680,
                        }
                      }
                    >
                      <HeaderCell
                        column={
                          Object {
                            "editable": true,
                            "formatter": [Function],
                            "headerRenderer": <ColumnHeader
                              columnKey="aaa"
                              columnType="number"
                              draggingColumnIndex={null}
                              index={0}
                              isReadOnly={false}
                              isSorted={false}
                              onDragEnd={[Function]}
                              onDragStartColumnIndex={[Function]}
                              onDropColumnIndexAtIndex={[Function]}
                              onRenameColumn={[Function]}
                              setDropdownAction={[MockFunction]}
                              showLetter={false}
                            />,
                            "key": "aaa",
                            "left": 40,
                            "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                            "maybeTriggerRenderIfChangeIsSorted": false,
                            "maybeTriggerRenderIfChangeShowLetter": undefined,
                            "maybeTriggerRenderIfChangeSortDirection": undefined,
                            "name": "aaa",
                            "resizable": true,
                            "rowType": "header",
                            "width": 160,
                          }
                        }
                        height={50}
                        key="1"
                        onResize={[Function]}
                        onResizeEnd={[Function]}
                        renderer={
                          <ColumnHeader
                            columnKey="aaa"
                            columnType="number"
                            draggingColumnIndex={null}
                            index={0}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />
                        }
                        resizing={false}
                      >
                        <div
                          className="react-grid-HeaderCell"
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 50,
                              "left": 40,
                              "margin": 0,
                              "position": "absolute",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                              "width": 160,
                            }
                          }
                        >
                          <ColumnHeader
                            column={
                              Object {
                                "editable": true,
                                "formatter": [Function],
                                "headerRenderer": <ColumnHeader
                                  columnKey="aaa"
                                  columnType="number"
                                  draggingColumnIndex={null}
                                  index={0}
                                  isReadOnly={false}
                                  isSorted={false}
                                  onDragEnd={[Function]}
                                  onDragStartColumnIndex={[Function]}
                                  onDropColumnIndexAtIndex={[Function]}
                                  onRenameColumn={[Function]}
                                  setDropdownAction={[MockFunction]}
                                  showLetter={false}
                                />,
                                "key": "aaa",
                                "left": 40,
                                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                "maybeTriggerRenderIfChangeIsSorted": false,
                                "maybeTriggerRenderIfChangeShowLetter": undefined,
                                "maybeTriggerRenderIfChangeSortDirection": undefined,
                                "name": "aaa",
                                "resizable": true,
                                "rowType": "header",
                                "width": 160,
                              }
                            }
                            columnKey="aaa"
                            columnType="number"
                            draggingColumnIndex={null}
                            height={50}
                            index={0}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          >
                            <div
                              className="data-grid-column-header "
                              draggable={true}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <EditableColumnName
                                columnKey="aaa"
                                columnType="number"
                                isReadOnly={false}
                                onRename={[Function]}
                              >
                                <span
                                  className="column-key"
                                  onClick={[Function]}
                                >
                                  <div>
                                    aaa
                                  </div>
                                  <div
                                    className="column-type"
                                  >
                                    number
                                  </div>
                                </span>
                              </EditableColumnName>
                              <ColumnContextMenu
                                columnKey="aaa"
                                columnType="number"
                                renameColumn={[Function]}
                                setDropdownAction={[Function]}
                                sortDirection={0}
                              >
                                <UncontrolledDropdown>
                                  <Dropdown
                                    active={false}
                                    addonType={false}
                                    direction="down"
                                    inNavbar={false}
                                    isOpen={false}
                                    nav={false}
                                    setActiveFromChild={false}
                                    toggle={[Function]}
                                  >
                                    <Manager
                                      className="dropdown"
                                      onKeyDown={[Function]}
                                      tag="div"
                                    >
                                      <div
                                        className="dropdown"
                                        onKeyDown={[Function]}
                                      >
                                        <DropdownToggle
                                          aria-haspopup={true}
                                          className="context-button"
                                          color="secondary"
                                        >
                                          <Target
                                            aria-expanded={false}
                                            aria-haspopup={true}
                                            className="context-button"
                                            color="secondary"
                                            component={[Function]}
                                            onClick={[Function]}
                                          >
                                            <Button
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              className="context-button"
                                              color="secondary"
                                              innerRef={[Function]}
                                              onClick={[Function]}
                                              tag="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="context-button btn btn-secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <i
                                                  className="icon-caret-down"
                                                />
                                              </button>
                                            </Button>
                                          </Target>
                                        </DropdownToggle>
                                        <Portal>
                                          <DropdownMenu
                                            flip={false}
                                            modifiers={
                                              Object {
                                                "hide": Object {
                                                  "enabled": false,
                                                },
                                                "preventOverflow": Object {
                                                  "enabled": false,
                                                },
                                              }
                                            }
                                            persist={true}
                                            tag="div"
                                          >
                                            <Popper
                                              aria-hidden={true}
                                              className="dropdown-menu"
                                              component="div"
                                              eventsEnabled={true}
                                              modifiers={
                                                Object {
                                                  "flip": Object {
                                                    "enabled": false,
                                                  },
                                                  "hide": Object {
                                                    "enabled": false,
                                                  },
                                                  "preventOverflow": Object {
                                                    "enabled": false,
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                              positionFixed={false}
                                              role="menu"
                                              tabIndex="-1"
                                              x-placement="bottom-start"
                                            >
                                              <div
                                                aria-hidden={true}
                                                className="dropdown-menu"
                                                role="menu"
                                                style={
                                                  Object {
                                                    "opacity": 0,
                                                    "pointerEvents": "none",
                                                    "position": "absolute",
                                                  }
                                                }
                                                tabIndex="-1"
                                                x-placement="bottom-start"
                                              >
                                                <DropdownItem
                                                  className="rename-column-header"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="rename-column-header dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-edit"
                                                    />
                                                    <span>
                                                      Rename
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="duplicate-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="duplicate-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-duplicate"
                                                    />
                                                    <span>
                                                      Duplicate
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-ascending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-ascending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-up"
                                                    />
                                                    <span>
                                                      Sort ascending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-descending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-descending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-down"
                                                    />
                                                    <span>
                                                      Sort descending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="filter-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="filter-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-filter"
                                                    />
                                                    <span>
                                                      Filter
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="clean-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="clean-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-clean"
                                                    />
                                                    <span>
                                                      Clean Text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-date"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-date dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-calendar"
                                                    />
                                                    <span>
                                                      Convert to date & time
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="extract-numbers"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="extract-numbers dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-number"
                                                    />
                                                    <span>
                                                      Convert to numbers
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-text"
                                                    />
                                                    <span>
                                                      Convert to text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="drop-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="drop-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-removec"
                                                    />
                                                    <span>
                                                      Delete column
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                              </div>
                                            </Popper>
                                          </DropdownMenu>
                                        </Portal>
                                      </div>
                                    </Manager>
                                  </Dropdown>
                                </UncontrolledDropdown>
                              </ColumnContextMenu>
                            </div>
                          </ColumnHeader>
                          <ResizeHandle
                            onDrag={[Function]}
                            onDragEnd={[Function]}
                            onDragStart={[Function]}
                          >
                            <Draggable
                              className="react-grid-HeaderCell__resizeHandle"
                              onDrag={[Function]}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              style={
                                Object {
                                  "height": "100%",
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                  "width": 6,
                                }
                              }
                            >
                              <div
                                className="react-grid-HeaderCell__draggable"
                                onDrag={[Function]}
                                onDragEnd={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "height": "100%",
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                    "width": 6,
                                  }
                                }
                              />
                            </Draggable>
                          </ResizeHandle>
                        </div>
                      </HeaderCell>
                      <HeaderCell
                        column={
                          Object {
                            "editable": true,
                            "formatter": [Function],
                            "headerRenderer": <ColumnHeader
                              columnKey="bbbb"
                              columnType="text"
                              draggingColumnIndex={null}
                              index={1}
                              isReadOnly={false}
                              isSorted={false}
                              onDragEnd={[Function]}
                              onDragStartColumnIndex={[Function]}
                              onDropColumnIndexAtIndex={[Function]}
                              onRenameColumn={[Function]}
                              setDropdownAction={[MockFunction]}
                              showLetter={false}
                            />,
                            "key": "bbbb",
                            "left": 200,
                            "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                            "maybeTriggerRenderIfChangeIsSorted": false,
                            "maybeTriggerRenderIfChangeShowLetter": undefined,
                            "maybeTriggerRenderIfChangeSortDirection": undefined,
                            "name": "bbbb",
                            "resizable": true,
                            "rowType": "header",
                            "width": 160,
                          }
                        }
                        height={50}
                        key="2"
                        onResize={[Function]}
                        onResizeEnd={[Function]}
                        renderer={
                          <ColumnHeader
                            columnKey="bbbb"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={1}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />
                        }
                        resizing={false}
                      >
                        <div
                          className="react-grid-HeaderCell"
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 50,
                              "left": 200,
                              "margin": 0,
                              "position": "absolute",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                              "width": 160,
                            }
                          }
                        >
                          <ColumnHeader
                            column={
                              Object {
                                "editable": true,
                                "formatter": [Function],
                                "headerRenderer": <ColumnHeader
                                  columnKey="bbbb"
                                  columnType="text"
                                  draggingColumnIndex={null}
                                  index={1}
                                  isReadOnly={false}
                                  isSorted={false}
                                  onDragEnd={[Function]}
                                  onDragStartColumnIndex={[Function]}
                                  onDropColumnIndexAtIndex={[Function]}
                                  onRenameColumn={[Function]}
                                  setDropdownAction={[MockFunction]}
                                  showLetter={false}
                                />,
                                "key": "bbbb",
                                "left": 200,
                                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                "maybeTriggerRenderIfChangeIsSorted": false,
                                "maybeTriggerRenderIfChangeShowLetter": undefined,
                                "maybeTriggerRenderIfChangeSortDirection": undefined,
                                "name": "bbbb",
                                "resizable": true,
                                "rowType": "header",
                                "width": 160,
                              }
                            }
                            columnKey="bbbb"
                            columnType="text"
                            draggingColumnIndex={null}
                            height={50}
                            index={1}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          >
                            <div
                              className="data-grid-column-header "
                              draggable={true}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <EditableColumnName
                                columnKey="bbbb"
                                columnType="text"
                                isReadOnly={false}
                                onRename={[Function]}
                              >
                                <span
                                  className="column-key"
                                  onClick={[Function]}
                                >
                                  <div>
                                    bbbb
                                  </div>
                                  <div
                                    className="column-type"
                                  >
                                    text
                                  </div>
                                </span>
                              </EditableColumnName>
                              <ColumnContextMenu
                                columnKey="bbbb"
                                columnType="text"
                                renameColumn={[Function]}
                                setDropdownAction={[Function]}
                                sortDirection={0}
                              >
                                <UncontrolledDropdown>
                                  <Dropdown
                                    active={false}
                                    addonType={false}
                                    direction="down"
                                    inNavbar={false}
                                    isOpen={false}
                                    nav={false}
                                    setActiveFromChild={false}
                                    toggle={[Function]}
                                  >
                                    <Manager
                                      className="dropdown"
                                      onKeyDown={[Function]}
                                      tag="div"
                                    >
                                      <div
                                        className="dropdown"
                                        onKeyDown={[Function]}
                                      >
                                        <DropdownToggle
                                          aria-haspopup={true}
                                          className="context-button"
                                          color="secondary"
                                        >
                                          <Target
                                            aria-expanded={false}
                                            aria-haspopup={true}
                                            className="context-button"
                                            color="secondary"
                                            component={[Function]}
                                            onClick={[Function]}
                                          >
                                            <Button
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              className="context-button"
                                              color="secondary"
                                              innerRef={[Function]}
                                              onClick={[Function]}
                                              tag="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="context-button btn btn-secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <i
                                                  className="icon-caret-down"
                                                />
                                              </button>
                                            </Button>
                                          </Target>
                                        </DropdownToggle>
                                        <Portal>
                                          <DropdownMenu
                                            flip={false}
                                            modifiers={
                                              Object {
                                                "hide": Object {
                                                  "enabled": false,
                                                },
                                                "preventOverflow": Object {
                                                  "enabled": false,
                                                },
                                              }
                                            }
                                            persist={true}
                                            tag="div"
                                          >
                                            <Popper
                                              aria-hidden={true}
                                              className="dropdown-menu"
                                              component="div"
                                              eventsEnabled={true}
                                              modifiers={
                                                Object {
                                                  "flip": Object {
                                                    "enabled": false,
                                                  },
                                                  "hide": Object {
                                                    "enabled": false,
                                                  },
                                                  "preventOverflow": Object {
                                                    "enabled": false,
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                              positionFixed={false}
                                              role="menu"
                                              tabIndex="-1"
                                              x-placement="bottom-start"
                                            >
                                              <div
                                                aria-hidden={true}
                                                className="dropdown-menu"
                                                role="menu"
                                                style={
                                                  Object {
                                                    "opacity": 0,
                                                    "pointerEvents": "none",
                                                    "position": "absolute",
                                                  }
                                                }
                                                tabIndex="-1"
                                                x-placement="bottom-start"
                                              >
                                                <DropdownItem
                                                  className="rename-column-header"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="rename-column-header dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-edit"
                                                    />
                                                    <span>
                                                      Rename
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="duplicate-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="duplicate-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-duplicate"
                                                    />
                                                    <span>
                                                      Duplicate
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-ascending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-ascending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-up"
                                                    />
                                                    <span>
                                                      Sort ascending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-descending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-descending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-down"
                                                    />
                                                    <span>
                                                      Sort descending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="filter-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="filter-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-filter"
                                                    />
                                                    <span>
                                                      Filter
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="clean-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="clean-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-clean"
                                                    />
                                                    <span>
                                                      Clean Text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-date"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-date dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-calendar"
                                                    />
                                                    <span>
                                                      Convert to date & time
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="extract-numbers"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="extract-numbers dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-number"
                                                    />
                                                    <span>
                                                      Convert to numbers
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-text"
                                                    />
                                                    <span>
                                                      Convert to text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="drop-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="drop-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-removec"
                                                    />
                                                    <span>
                                                      Delete column
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                              </div>
                                            </Popper>
                                          </DropdownMenu>
                                        </Portal>
                                      </div>
                                    </Manager>
                                  </Dropdown>
                                </UncontrolledDropdown>
                              </ColumnContextMenu>
                            </div>
                          </ColumnHeader>
                          <ResizeHandle
                            onDrag={[Function]}
                            onDragEnd={[Function]}
                            onDragStart={[Function]}
                          >
                            <Draggable
                              className="react-grid-HeaderCell__resizeHandle"
                              onDrag={[Function]}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              style={
                                Object {
                                  "height": "100%",
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                  "width": 6,
                                }
                              }
                            >
                              <div
                                className="react-grid-HeaderCell__draggable"
                                onDrag={[Function]}
                                onDragEnd={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "height": "100%",
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                    "width": 6,
                                  }
                                }
                              />
                            </Draggable>
                          </ResizeHandle>
                        </div>
                      </HeaderCell>
                      <HeaderCell
                        column={
                          Object {
                            "editable": true,
                            "formatter": [Function],
                            "headerRenderer": <ColumnHeader
                              columnKey="getCell"
                              columnType="text"
                              draggingColumnIndex={null}
                              index={2}
                              isReadOnly={false}
                              isSorted={false}
                              onDragEnd={[Function]}
                              onDragStartColumnIndex={[Function]}
                              onDropColumnIndexAtIndex={[Function]}
                              onRenameColumn={[Function]}
                              setDropdownAction={[MockFunction]}
                              showLetter={false}
                            />,
                            "key": "getCell",
                            "left": 360,
                            "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                            "maybeTriggerRenderIfChangeIsSorted": false,
                            "maybeTriggerRenderIfChangeShowLetter": undefined,
                            "maybeTriggerRenderIfChangeSortDirection": undefined,
                            "name": "getCell",
                            "resizable": true,
                            "rowType": "header",
                            "width": 160,
                          }
                        }
                        height={50}
                        key="3"
                        onResize={[Function]}
                        onResizeEnd={[Function]}
                        renderer={
                          <ColumnHeader
                            columnKey="getCell"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={2}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />
                        }
                        resizing={false}
                      >
                        <div
                          className="react-grid-HeaderCell"
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 50,
                              "left": 360,
                              "margin": 0,
                              "position": "absolute",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                              "width": 160,
                            }
                          }
                        >
                          <ColumnHeader
                            column={
                              Object {
                                "editable": true,
                                "formatter": [Function],
                                "headerRenderer": <ColumnHeader
                                  columnKey="getCell"
                                  columnType="text"
                                  draggingColumnIndex={null}
                                  index={2}
                                  isReadOnly={false}
                                  isSorted={false}
                                  onDragEnd={[Function]}
                                  onDragStartColumnIndex={[Function]}
                                  onDropColumnIndexAtIndex={[Function]}
                                  onRenameColumn={[Function]}
                                  setDropdownAction={[MockFunction]}
                                  showLetter={false}
                                />,
                                "key": "getCell",
                                "left": 360,
                                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                "maybeTriggerRenderIfChangeIsSorted": false,
                                "maybeTriggerRenderIfChangeShowLetter": undefined,
                                "maybeTriggerRenderIfChangeSortDirection": undefined,
                                "name": "getCell",
                                "resizable": true,
                                "rowType": "header",
                                "width": 160,
                              }
                            }
                            columnKey="getCell"
                            columnType="text"
                            draggingColumnIndex={null}
                            height={50}
                            index={2}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          >
                            <div
                              className="data-grid-column-header "
                              draggable={true}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <EditableColumnName
                                columnKey="getCell"
                                columnType="text"
                                isReadOnly={false}
                                onRename={[Function]}
                              >
                                <span
                                  className="column-key"
                                  onClick={[Function]}
                                >
                                  <div>
                                    getCell
                                  </div>
                                  <div
                                    className="column-type"
                                  >
                                    text
                                  </div>
                                </span>
                              </EditableColumnName>
                              <ColumnContextMenu
                                columnKey="getCell"
                                columnType="text"
                                renameColumn={[Function]}
                                setDropdownAction={[Function]}
                                sortDirection={0}
                              >
                                <UncontrolledDropdown>
                                  <Dropdown
                                    active={false}
                                    addonType={false}
                                    direction="down"
                                    inNavbar={false}
                                    isOpen={false}
                                    nav={false}
                                    setActiveFromChild={false}
                                    toggle={[Function]}
                                  >
                                    <Manager
                                      className="dropdown"
                                      onKeyDown={[Function]}
                                      tag="div"
                                    >
                                      <div
                                        className="dropdown"
                                        onKeyDown={[Function]}
                                      >
                                        <DropdownToggle
                                          aria-haspopup={true}
                                          className="context-button"
                                          color="secondary"
                                        >
                                          <Target
                                            aria-expanded={false}
                                            aria-haspopup={true}
                                            className="context-button"
                                            color="secondary"
                                            component={[Function]}
                                            onClick={[Function]}
                                          >
                                            <Button
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              className="context-button"
                                              color="secondary"
                                              innerRef={[Function]}
                                              onClick={[Function]}
                                              tag="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="context-button btn btn-secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <i
                                                  className="icon-caret-down"
                                                />
                                              </button>
                                            </Button>
                                          </Target>
                                        </DropdownToggle>
                                        <Portal>
                                          <DropdownMenu
                                            flip={false}
                                            modifiers={
                                              Object {
                                                "hide": Object {
                                                  "enabled": false,
                                                },
                                                "preventOverflow": Object {
                                                  "enabled": false,
                                                },
                                              }
                                            }
                                            persist={true}
                                            tag="div"
                                          >
                                            <Popper
                                              aria-hidden={true}
                                              className="dropdown-menu"
                                              component="div"
                                              eventsEnabled={true}
                                              modifiers={
                                                Object {
                                                  "flip": Object {
                                                    "enabled": false,
                                                  },
                                                  "hide": Object {
                                                    "enabled": false,
                                                  },
                                                  "preventOverflow": Object {
                                                    "enabled": false,
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                              positionFixed={false}
                                              role="menu"
                                              tabIndex="-1"
                                              x-placement="bottom-start"
                                            >
                                              <div
                                                aria-hidden={true}
                                                className="dropdown-menu"
                                                role="menu"
                                                style={
                                                  Object {
                                                    "opacity": 0,
                                                    "pointerEvents": "none",
                                                    "position": "absolute",
                                                  }
                                                }
                                                tabIndex="-1"
                                                x-placement="bottom-start"
                                              >
                                                <DropdownItem
                                                  className="rename-column-header"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="rename-column-header dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-edit"
                                                    />
                                                    <span>
                                                      Rename
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="duplicate-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="duplicate-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-duplicate"
                                                    />
                                                    <span>
                                                      Duplicate
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-ascending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-ascending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-up"
                                                    />
                                                    <span>
                                                      Sort ascending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-descending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-descending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-down"
                                                    />
                                                    <span>
                                                      Sort descending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="filter-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="filter-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-filter"
                                                    />
                                                    <span>
                                                      Filter
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="clean-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="clean-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-clean"
                                                    />
                                                    <span>
                                                      Clean Text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-date"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-date dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-calendar"
                                                    />
                                                    <span>
                                                      Convert to date & time
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="extract-numbers"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="extract-numbers dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-number"
                                                    />
                                                    <span>
                                                      Convert to numbers
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-text"
                                                    />
                                                    <span>
                                                      Convert to text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="drop-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="drop-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-removec"
                                                    />
                                                    <span>
                                                      Delete column
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                              </div>
                                            </Popper>
                                          </DropdownMenu>
                                        </Portal>
                                      </div>
                                    </Manager>
                                  </Dropdown>
                                </UncontrolledDropdown>
                              </ColumnContextMenu>
                            </div>
                          </ColumnHeader>
                          <ResizeHandle
                            onDrag={[Function]}
                            onDragEnd={[Function]}
                            onDragStart={[Function]}
                          >
                            <Draggable
                              className="react-grid-HeaderCell__resizeHandle"
                              onDrag={[Function]}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              style={
                                Object {
                                  "height": "100%",
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                  "width": 6,
                                }
                              }
                            >
                              <div
                                className="react-grid-HeaderCell__draggable"
                                onDrag={[Function]}
                                onDragEnd={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "height": "100%",
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                    "width": 6,
                                  }
                                }
                              />
                            </Draggable>
                          </ResizeHandle>
                        </div>
                      </HeaderCell>
                      <HeaderCell
                        column={
                          Object {
                            "editable": true,
                            "formatter": [Function],
                            "headerRenderer": <ColumnHeader
                              columnKey="select-row"
                              columnType="text"
                              draggingColumnIndex={null}
                              index={3}
                              isReadOnly={false}
                              isSorted={false}
                              onDragEnd={[Function]}
                              onDragStartColumnIndex={[Function]}
                              onDropColumnIndexAtIndex={[Function]}
                              onRenameColumn={[Function]}
                              setDropdownAction={[MockFunction]}
                              showLetter={false}
                            />,
                            "key": "select-row",
                            "left": 520,
                            "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                            "maybeTriggerRenderIfChangeIsSorted": false,
                            "maybeTriggerRenderIfChangeShowLetter": undefined,
                            "maybeTriggerRenderIfChangeSortDirection": undefined,
                            "name": "select-row",
                            "resizable": true,
                            "rowType": "header",
                            "width": 160,
                          }
                        }
                        height={50}
                        key="4"
                        onResize={[Function]}
                        onResizeEnd={[Function]}
                        renderer={
                          <ColumnHeader
                            columnKey="select-row"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={3}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />
                        }
                        resizing={false}
                      >
                        <div
                          className="react-grid-HeaderCell"
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 50,
                              "left": 520,
                              "margin": 0,
                              "position": "absolute",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                              "width": 160,
                            }
                          }
                        >
                          <ColumnHeader
                            column={
                              Object {
                                "editable": true,
                                "formatter": [Function],
                                "headerRenderer": <ColumnHeader
                                  columnKey="select-row"
                                  columnType="text"
                                  draggingColumnIndex={null}
                                  index={3}
                                  isReadOnly={false}
                                  isSorted={false}
                                  onDragEnd={[Function]}
                                  onDragStartColumnIndex={[Function]}
                                  onDropColumnIndexAtIndex={[Function]}
                                  onRenameColumn={[Function]}
                                  setDropdownAction={[MockFunction]}
                                  showLetter={false}
                                />,
                                "key": "select-row",
                                "left": 520,
                                "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                "maybeTriggerRenderIfChangeIsSorted": false,
                                "maybeTriggerRenderIfChangeShowLetter": undefined,
                                "maybeTriggerRenderIfChangeSortDirection": undefined,
                                "name": "select-row",
                                "resizable": true,
                                "rowType": "header",
                                "width": 160,
                              }
                            }
                            columnKey="select-row"
                            columnType="text"
                            draggingColumnIndex={null}
                            height={50}
                            index={3}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          >
                            <div
                              className="data-grid-column-header "
                              draggable={true}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                            >
                              <EditableColumnName
                                columnKey="select-row"
                                columnType="text"
                                isReadOnly={false}
                                onRename={[Function]}
                              >
                                <span
                                  className="column-key"
                                  onClick={[Function]}
                                >
                                  <div>
                                    select-row
                                  </div>
                                  <div
                                    className="column-type"
                                  >
                                    text
                                  </div>
                                </span>
                              </EditableColumnName>
                              <ColumnContextMenu
                                columnKey="select-row"
                                columnType="text"
                                renameColumn={[Function]}
                                setDropdownAction={[Function]}
                                sortDirection={0}
                              >
                                <UncontrolledDropdown>
                                  <Dropdown
                                    active={false}
                                    addonType={false}
                                    direction="down"
                                    inNavbar={false}
                                    isOpen={false}
                                    nav={false}
                                    setActiveFromChild={false}
                                    toggle={[Function]}
                                  >
                                    <Manager
                                      className="dropdown"
                                      onKeyDown={[Function]}
                                      tag="div"
                                    >
                                      <div
                                        className="dropdown"
                                        onKeyDown={[Function]}
                                      >
                                        <DropdownToggle
                                          aria-haspopup={true}
                                          className="context-button"
                                          color="secondary"
                                        >
                                          <Target
                                            aria-expanded={false}
                                            aria-haspopup={true}
                                            className="context-button"
                                            color="secondary"
                                            component={[Function]}
                                            onClick={[Function]}
                                          >
                                            <Button
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              className="context-button"
                                              color="secondary"
                                              innerRef={[Function]}
                                              onClick={[Function]}
                                              tag="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="context-button btn btn-secondary"
                                                onClick={[Function]}
                                                type="button"
                                              >
                                                <i
                                                  className="icon-caret-down"
                                                />
                                              </button>
                                            </Button>
                                          </Target>
                                        </DropdownToggle>
                                        <Portal>
                                          <DropdownMenu
                                            flip={false}
                                            modifiers={
                                              Object {
                                                "hide": Object {
                                                  "enabled": false,
                                                },
                                                "preventOverflow": Object {
                                                  "enabled": false,
                                                },
                                              }
                                            }
                                            persist={true}
                                            tag="div"
                                          >
                                            <Popper
                                              aria-hidden={true}
                                              className="dropdown-menu"
                                              component="div"
                                              eventsEnabled={true}
                                              modifiers={
                                                Object {
                                                  "flip": Object {
                                                    "enabled": false,
                                                  },
                                                  "hide": Object {
                                                    "enabled": false,
                                                  },
                                                  "preventOverflow": Object {
                                                    "enabled": false,
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                              positionFixed={false}
                                              role="menu"
                                              tabIndex="-1"
                                              x-placement="bottom-start"
                                            >
                                              <div
                                                aria-hidden={true}
                                                className="dropdown-menu"
                                                role="menu"
                                                style={
                                                  Object {
                                                    "opacity": 0,
                                                    "pointerEvents": "none",
                                                    "position": "absolute",
                                                  }
                                                }
                                                tabIndex="-1"
                                                x-placement="bottom-start"
                                              >
                                                <DropdownItem
                                                  className="rename-column-header"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="rename-column-header dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-edit"
                                                    />
                                                    <span>
                                                      Rename
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="duplicate-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="duplicate-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-duplicate"
                                                    />
                                                    <span>
                                                      Duplicate
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-ascending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-ascending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-up"
                                                    />
                                                    <span>
                                                      Sort ascending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="sort-descending"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="sort-descending dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-sort-down"
                                                    />
                                                    <span>
                                                      Sort descending
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="filter-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="filter-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-filter"
                                                    />
                                                    <span>
                                                      Filter
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="clean-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="clean-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-clean"
                                                    />
                                                    <span>
                                                      Clean Text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-date"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-date dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-calendar"
                                                    />
                                                    <span>
                                                      Convert to date & time
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="extract-numbers"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="extract-numbers dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-number"
                                                    />
                                                    <span>
                                                      Convert to numbers
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="convert-text"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="convert-text dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-text"
                                                    />
                                                    <span>
                                                      Convert to text
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                                <DropdownItem
                                                  divider={true}
                                                  tag="button"
                                                  toggle={true}
                                                >
                                                  <div
                                                    className="dropdown-divider"
                                                    onClick={[Function]}
                                                    tabIndex="-1"
                                                  />
                                                </DropdownItem>
                                                <DropdownItem
                                                  className="drop-column"
                                                  onClick={[Function]}
                                                  tag="button"
                                                  toggle={false}
                                                >
                                                  <button
                                                    className="drop-column dropdown-item"
                                                    onClick={[Function]}
                                                    tabIndex="0"
                                                    type="button"
                                                  >
                                                    <i
                                                      className="icon-removec"
                                                    />
                                                    <span>
                                                      Delete column
                                                    </span>
                                                  </button>
                                                </DropdownItem>
                                              </div>
                                            </Popper>
                                          </DropdownMenu>
                                        </Portal>
                                      </div>
                                    </Manager>
                                  </Dropdown>
                                </UncontrolledDropdown>
                              </ColumnContextMenu>
                            </div>
                          </ColumnHeader>
                          <ResizeHandle
                            onDrag={[Function]}
                            onDragEnd={[Function]}
                            onDragStart={[Function]}
                          >
                            <Draggable
                              className="react-grid-HeaderCell__resizeHandle"
                              onDrag={[Function]}
                              onDragEnd={[Function]}
                              onDragStart={[Function]}
                              style={
                                Object {
                                  "height": "100%",
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                  "width": 6,
                                }
                              }
                            >
                              <div
                                className="react-grid-HeaderCell__draggable"
                                onDrag={[Function]}
                                onDragEnd={[Function]}
                                onDragStart={[Function]}
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "height": "100%",
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                    "width": 6,
                                  }
                                }
                              />
                            </Draggable>
                          </ResizeHandle>
                        </div>
                      </HeaderCell>
                      <HeaderCell
                        column={
                          Object {
                            "cellClass": "rdg-row-actions-cell",
                            "editable": false,
                            "filterable": false,
                            "formatter": <RowActionsCell
                              rowSelection={
                                Object {
                                  "enableShiftSelect": true,
                                  "onRowsDeselected": [Function],
                                  "onRowsSelected": [Function],
                                  "selectBy": Object {
                                    "indexes": Array [],
                                  },
                                }
                              }
                            />,
                            "getRowMetaData": [Function],
                            "headerRenderer": <renderNull
                              inputRef={[Function]}
                              onChange={[Function]}
                            />,
                            "key": "select-row",
                            "left": 0,
                            "locked": true,
                            "name": "",
                            "onCellChange": [Function],
                            "rowType": "header",
                            "width": 40,
                          }
                        }
                        height={50}
                        key="0"
                        onResize={[Function]}
                        onResizeEnd={[Function]}
                        renderer={
                          <renderNull
                            inputRef={[Function]}
                            onChange={[Function]}
                          />
                        }
                        resizing={false}
                      >
                        <div
                          className="react-grid-HeaderCell react-grid-HeaderCell--locked rdg-row-actions-cell"
                          style={
                            Object {
                              "display": "inline-block",
                              "height": 50,
                              "left": 0,
                              "margin": 0,
                              "position": "absolute",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                              "width": 40,
                            }
                          }
                        >
                          <renderNull
                            column={
                              Object {
                                "cellClass": "rdg-row-actions-cell",
                                "editable": false,
                                "filterable": false,
                                "formatter": <RowActionsCell
                                  rowSelection={
                                    Object {
                                      "enableShiftSelect": true,
                                      "onRowsDeselected": [Function],
                                      "onRowsSelected": [Function],
                                      "selectBy": Object {
                                        "indexes": Array [],
                                      },
                                    }
                                  }
                                />,
                                "getRowMetaData": [Function],
                                "headerRenderer": <renderNull
                                  inputRef={[Function]}
                                  onChange={[Function]}
                                />,
                                "key": "select-row",
                                "left": 0,
                                "locked": true,
                                "name": "",
                                "onCellChange": [Function],
                                "rowType": "header",
                                "width": 40,
                              }
                            }
                            height={50}
                            inputRef={[Function]}
                            onChange={[Function]}
                          />
                        </div>
                      </HeaderCell>
                    </div>
                  </div>
                </HeaderRow>
              </div>
            </Header>
            <div
              onClick={[Function]}
              onDoubleClick={[Function]}
              onDragEnd={[Function]}
              onDragStart={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              tabIndex={-1}
            >
              <Viewport
                cellMetaData={
                  Object {
                    "copied": null,
                    "dragged": null,
                    "enableCellAutoFocus": true,
                    "enableCellSelect": true,
                    "getCellActions": undefined,
                    "getDataGridDOMNode": [Function],
                    "handleDragEnterRow": [Function],
                    "handleTerminateDrag": [Function],
                    "hoveredRowIdx": undefined,
                    "isScrollingHorizontallyWithKeyboard": false,
                    "isScrollingVerticallyWithKeyboard": false,
                    "onAddSubRow": undefined,
                    "onCellClick": [Function],
                    "onCellContextMenu": [Function],
                    "onCellDoubleClick": [Function],
                    "onCellExpand": [Function],
                    "onCellFocus": [Function],
                    "onColumnEvent": [Function],
                    "onCommit": [Function],
                    "onCommitCancel": [Function],
                    "onDeleteSubRow": undefined,
                    "onDragHandleDoubleClick": [Function],
                    "onRowExpandToggle": [Function],
                    "onRowHover": undefined,
                    "openCellEditor": [Function],
                    "rowKey": "id",
                    "selected": Object {
                      "idx": 0,
                      "rowIdx": 0,
                    },
                  }
                }
                columnMetrics={
                  Object {
                    "columns": Array [
                      Object {
                        "cellClass": "rdg-row-actions-cell",
                        "editable": false,
                        "filterable": false,
                        "formatter": <RowActionsCell
                          rowSelection={
                            Object {
                              "enableShiftSelect": true,
                              "onRowsDeselected": [Function],
                              "onRowsSelected": [Function],
                              "selectBy": Object {
                                "indexes": Array [],
                              },
                            }
                          }
                        />,
                        "getRowMetaData": [Function],
                        "headerRenderer": <renderNull
                          inputRef={[Function]}
                          onChange={[Function]}
                        />,
                        "key": "select-row",
                        "left": 0,
                        "locked": true,
                        "name": "",
                        "onCellChange": [Function],
                        "width": 40,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="aaa"
                          columnType="number"
                          draggingColumnIndex={null}
                          index={0}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "aaa",
                        "left": 40,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "aaa",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="bbbb"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={1}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "bbbb",
                        "left": 200,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "bbbb",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="getCell"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={2}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "getCell",
                        "left": 360,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "getCell",
                        "resizable": true,
                        "width": 160,
                      },
                      Object {
                        "editable": true,
                        "formatter": [Function],
                        "headerRenderer": <ColumnHeader
                          columnKey="select-row"
                          columnType="text"
                          draggingColumnIndex={null}
                          index={3}
                          isReadOnly={false}
                          isSorted={false}
                          onDragEnd={[Function]}
                          onDragStartColumnIndex={[Function]}
                          onDropColumnIndexAtIndex={[Function]}
                          onRenameColumn={[Function]}
                          setDropdownAction={[MockFunction]}
                          showLetter={false}
                        />,
                        "key": "select-row",
                        "left": 520,
                        "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                        "maybeTriggerRenderIfChangeIsSorted": false,
                        "maybeTriggerRenderIfChangeShowLetter": undefined,
                        "maybeTriggerRenderIfChangeSortDirection": undefined,
                        "name": "select-row",
                        "resizable": true,
                        "width": 160,
                      },
                    ],
                    "minColumnWidth": 80,
                    "totalWidth": 98,
                    "width": 680,
                  }
                }
                expandedRows={Array []}
                minHeight={98}
                onScroll={[Function]}
                overScan={
                  Object {
                    "colsEnd": 5,
                    "colsStart": 5,
                    "rowsEnd": 5,
                    "rowsStart": 5,
                  }
                }
                rowGetter={[Function]}
                rowHeight={35}
                rowKey="id"
                rowOffsetHeight={50}
                rowRenderer={[Function]}
                rowScrollTimeout={0}
                rowSelection={
                  Object {
                    "indexes": Array [],
                  }
                }
                rowsCount={2}
                scrollToRowIndex={0}
                selectedRows={null}
                totalWidth={98}
                width={680}
              >
                <div
                  className="react-grid-Viewport"
                  style={
                    Object {
                      "bottom": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "padding": 0,
                      "position": "absolute",
                      "right": 0,
                      "top": 50,
                    }
                  }
                >
                  <Canvas
                    cellMetaData={
                      Object {
                        "copied": null,
                        "dragged": null,
                        "enableCellAutoFocus": true,
                        "enableCellSelect": true,
                        "getCellActions": undefined,
                        "getDataGridDOMNode": [Function],
                        "handleDragEnterRow": [Function],
                        "handleTerminateDrag": [Function],
                        "hoveredRowIdx": undefined,
                        "isScrollingHorizontallyWithKeyboard": false,
                        "isScrollingVerticallyWithKeyboard": false,
                        "onAddSubRow": undefined,
                        "onCellClick": [Function],
                        "onCellContextMenu": [Function],
                        "onCellDoubleClick": [Function],
                        "onCellExpand": [Function],
                        "onCellFocus": [Function],
                        "onColumnEvent": [Function],
                        "onCommit": [Function],
                        "onCommitCancel": [Function],
                        "onDeleteSubRow": undefined,
                        "onDragHandleDoubleClick": [Function],
                        "onRowExpandToggle": [Function],
                        "onRowHover": undefined,
                        "openCellEditor": [Function],
                        "rowKey": "id",
                        "selected": Object {
                          "idx": 0,
                          "rowIdx": 0,
                        },
                      }
                    }
                    colDisplayEnd={5}
                    colDisplayStart={0}
                    colVisibleEnd={5}
                    colVisibleStart={0}
                    columns={
                      Array [
                        Object {
                          "cellClass": "rdg-row-actions-cell",
                          "editable": false,
                          "filterable": false,
                          "formatter": <RowActionsCell
                            rowSelection={
                              Object {
                                "enableShiftSelect": true,
                                "onRowsDeselected": [Function],
                                "onRowsSelected": [Function],
                                "selectBy": Object {
                                  "indexes": Array [],
                                },
                              }
                            }
                          />,
                          "getRowMetaData": [Function],
                          "headerRenderer": <renderNull
                            inputRef={[Function]}
                            onChange={[Function]}
                          />,
                          "key": "select-row",
                          "left": 0,
                          "locked": true,
                          "name": "",
                          "onCellChange": [Function],
                          "width": 40,
                        },
                        Object {
                          "editable": true,
                          "formatter": [Function],
                          "headerRenderer": <ColumnHeader
                            columnKey="aaa"
                            columnType="number"
                            draggingColumnIndex={null}
                            index={0}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />,
                          "key": "aaa",
                          "left": 40,
                          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                          "maybeTriggerRenderIfChangeIsSorted": false,
                          "maybeTriggerRenderIfChangeShowLetter": undefined,
                          "maybeTriggerRenderIfChangeSortDirection": undefined,
                          "name": "aaa",
                          "resizable": true,
                          "width": 160,
                        },
                        Object {
                          "editable": true,
                          "formatter": [Function],
                          "headerRenderer": <ColumnHeader
                            columnKey="bbbb"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={1}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />,
                          "key": "bbbb",
                          "left": 200,
                          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                          "maybeTriggerRenderIfChangeIsSorted": false,
                          "maybeTriggerRenderIfChangeShowLetter": undefined,
                          "maybeTriggerRenderIfChangeSortDirection": undefined,
                          "name": "bbbb",
                          "resizable": true,
                          "width": 160,
                        },
                        Object {
                          "editable": true,
                          "formatter": [Function],
                          "headerRenderer": <ColumnHeader
                            columnKey="getCell"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={2}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />,
                          "key": "getCell",
                          "left": 360,
                          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                          "maybeTriggerRenderIfChangeIsSorted": false,
                          "maybeTriggerRenderIfChangeShowLetter": undefined,
                          "maybeTriggerRenderIfChangeSortDirection": undefined,
                          "name": "getCell",
                          "resizable": true,
                          "width": 160,
                        },
                        Object {
                          "editable": true,
                          "formatter": [Function],
                          "headerRenderer": <ColumnHeader
                            columnKey="select-row"
                            columnType="text"
                            draggingColumnIndex={null}
                            index={3}
                            isReadOnly={false}
                            isSorted={false}
                            onDragEnd={[Function]}
                            onDragStartColumnIndex={[Function]}
                            onDropColumnIndexAtIndex={[Function]}
                            onRenameColumn={[Function]}
                            setDropdownAction={[MockFunction]}
                            showLetter={false}
                          />,
                          "key": "select-row",
                          "left": 520,
                          "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                          "maybeTriggerRenderIfChangeIsSorted": false,
                          "maybeTriggerRenderIfChangeShowLetter": undefined,
                          "maybeTriggerRenderIfChangeSortDirection": undefined,
                          "name": "select-row",
                          "resizable": true,
                          "width": 160,
                        },
                      ]
                    }
                    displayEnd={2}
                    displayStart={0}
                    expandedRows={Array []}
                    height={48}
                    isScrolling={false}
                    onRows={[Function]}
                    onScroll={[Function]}
                    rowGetter={[Function]}
                    rowHeight={35}
                    rowKey="id"
                    rowRenderer={[Function]}
                    rowScrollTimeout={0}
                    rowSelection={
                      Object {
                        "indexes": Array [],
                      }
                    }
                    rowsCount={2}
                    scrollToRowIndex={0}
                    selectedRows={null}
                    totalWidth={98}
                    visibleEnd={2}
                    visibleStart={0}
                    width={680}
                  >
                    <div
                      className="react-grid-Canvas"
                      onScroll={[Function]}
                      style={
                        Object {
                          "height": 48,
                          "left": 0,
                          "overflowX": "auto",
                          "overflowY": "scroll",
                          "position": "absolute",
                          "top": 0,
                          "width": 98,
                        }
                      }
                    >
                      <RowsContainer
                        idx={0}
                        rowIdx={0}
                        rows={
                          Array [
                            <Row
                              cellMetaData={
                                Object {
                                  "copied": null,
                                  "dragged": null,
                                  "enableCellAutoFocus": true,
                                  "enableCellSelect": true,
                                  "getCellActions": undefined,
                                  "getDataGridDOMNode": [Function],
                                  "handleDragEnterRow": [Function],
                                  "handleTerminateDrag": [Function],
                                  "hoveredRowIdx": undefined,
                                  "isScrollingHorizontallyWithKeyboard": false,
                                  "isScrollingVerticallyWithKeyboard": false,
                                  "onAddSubRow": undefined,
                                  "onCellClick": [Function],
                                  "onCellContextMenu": [Function],
                                  "onCellDoubleClick": [Function],
                                  "onCellExpand": [Function],
                                  "onCellFocus": [Function],
                                  "onColumnEvent": [Function],
                                  "onCommit": [Function],
                                  "onCommitCancel": [Function],
                                  "onDeleteSubRow": undefined,
                                  "onDragHandleDoubleClick": [Function],
                                  "onRowExpandToggle": [Function],
                                  "onRowHover": undefined,
                                  "openCellEditor": [Function],
                                  "rowKey": "id",
                                  "selected": Object {
                                    "idx": 0,
                                    "rowIdx": 0,
                                  },
                                }
                              }
                              cellRenderer={[Function]}
                              colDisplayEnd={5}
                              colDisplayStart={0}
                              colVisibleEnd={5}
                              colVisibleStart={0}
                              columns={
                                Array [
                                  Object {
                                    "cellClass": "rdg-row-actions-cell",
                                    "editable": false,
                                    "filterable": false,
                                    "formatter": <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />,
                                    "getRowMetaData": [Function],
                                    "headerRenderer": <renderNull
                                      inputRef={[Function]}
                                      onChange={[Function]}
                                    />,
                                    "key": "select-row",
                                    "left": 0,
                                    "locked": true,
                                    "name": "",
                                    "onCellChange": [Function],
                                    "width": 40,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="aaa"
                                      columnType="number"
                                      draggingColumnIndex={null}
                                      index={0}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "aaa",
                                    "left": 40,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "aaa",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="bbbb"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={1}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "bbbb",
                                    "left": 200,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "bbbb",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="getCell"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={2}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "getCell",
                                    "left": 360,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "getCell",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="select-row"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={3}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "select-row",
                                    "left": 520,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "select-row",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                ]
                              }
                              expandedRows={Array []}
                              height={35}
                              idx={0}
                              isScrolling={false}
                              isSelected={false}
                              row={
                                Object {
                                  "aaa": 9,
                                  "bbbb": "foo",
                                  "getCell": "9",
                                  "select-row": "someval",
                                }
                              }
                              subRowDetails={Object {}}
                              visibleEnd={2}
                              visibleStart={0}
                            />,
                            <Row
                              cellMetaData={
                                Object {
                                  "copied": null,
                                  "dragged": null,
                                  "enableCellAutoFocus": true,
                                  "enableCellSelect": true,
                                  "getCellActions": undefined,
                                  "getDataGridDOMNode": [Function],
                                  "handleDragEnterRow": [Function],
                                  "handleTerminateDrag": [Function],
                                  "hoveredRowIdx": undefined,
                                  "isScrollingHorizontallyWithKeyboard": false,
                                  "isScrollingVerticallyWithKeyboard": false,
                                  "onAddSubRow": undefined,
                                  "onCellClick": [Function],
                                  "onCellContextMenu": [Function],
                                  "onCellDoubleClick": [Function],
                                  "onCellExpand": [Function],
                                  "onCellFocus": [Function],
                                  "onColumnEvent": [Function],
                                  "onCommit": [Function],
                                  "onCommitCancel": [Function],
                                  "onDeleteSubRow": undefined,
                                  "onDragHandleDoubleClick": [Function],
                                  "onRowExpandToggle": [Function],
                                  "onRowHover": undefined,
                                  "openCellEditor": [Function],
                                  "rowKey": "id",
                                  "selected": Object {
                                    "idx": 0,
                                    "rowIdx": 0,
                                  },
                                }
                              }
                              cellRenderer={[Function]}
                              colDisplayEnd={5}
                              colDisplayStart={0}
                              colVisibleEnd={5}
                              colVisibleStart={0}
                              columns={
                                Array [
                                  Object {
                                    "cellClass": "rdg-row-actions-cell",
                                    "editable": false,
                                    "filterable": false,
                                    "formatter": <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />,
                                    "getRowMetaData": [Function],
                                    "headerRenderer": <renderNull
                                      inputRef={[Function]}
                                      onChange={[Function]}
                                    />,
                                    "key": "select-row",
                                    "left": 0,
                                    "locked": true,
                                    "name": "",
                                    "onCellChange": [Function],
                                    "width": 40,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="aaa"
                                      columnType="number"
                                      draggingColumnIndex={null}
                                      index={0}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "aaa",
                                    "left": 40,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "aaa",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="bbbb"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={1}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "bbbb",
                                    "left": 200,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "bbbb",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="getCell"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={2}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "getCell",
                                    "left": 360,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "getCell",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="select-row"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={3}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "select-row",
                                    "left": 520,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "select-row",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                ]
                              }
                              expandedRows={Array []}
                              height={35}
                              idx={1}
                              isScrolling={false}
                              isSelected={false}
                              row={
                                Object {
                                  "aaa": 9,
                                  "bbbb": "",
                                  "getCell": "baz",
                                  "select-row": "someotherval",
                                }
                              }
                              subRowDetails={Object {}}
                              visibleEnd={2}
                              visibleStart={0}
                            />,
                          ]
                        }
                        width={680}
                      >
                        <SimpleRowsContainer
                          idx={0}
                          rowIdx={0}
                          rows={
                            Array [
                              <Row
                                cellMetaData={
                                  Object {
                                    "copied": null,
                                    "dragged": null,
                                    "enableCellAutoFocus": true,
                                    "enableCellSelect": true,
                                    "getCellActions": undefined,
                                    "getDataGridDOMNode": [Function],
                                    "handleDragEnterRow": [Function],
                                    "handleTerminateDrag": [Function],
                                    "hoveredRowIdx": undefined,
                                    "isScrollingHorizontallyWithKeyboard": false,
                                    "isScrollingVerticallyWithKeyboard": false,
                                    "onAddSubRow": undefined,
                                    "onCellClick": [Function],
                                    "onCellContextMenu": [Function],
                                    "onCellDoubleClick": [Function],
                                    "onCellExpand": [Function],
                                    "onCellFocus": [Function],
                                    "onColumnEvent": [Function],
                                    "onCommit": [Function],
                                    "onCommitCancel": [Function],
                                    "onDeleteSubRow": undefined,
                                    "onDragHandleDoubleClick": [Function],
                                    "onRowExpandToggle": [Function],
                                    "onRowHover": undefined,
                                    "openCellEditor": [Function],
                                    "rowKey": "id",
                                    "selected": Object {
                                      "idx": 0,
                                      "rowIdx": 0,
                                    },
                                  }
                                }
                                cellRenderer={[Function]}
                                colDisplayEnd={5}
                                colDisplayStart={0}
                                colVisibleEnd={5}
                                colVisibleStart={0}
                                columns={
                                  Array [
                                    Object {
                                      "cellClass": "rdg-row-actions-cell",
                                      "editable": false,
                                      "filterable": false,
                                      "formatter": <RowActionsCell
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                      />,
                                      "getRowMetaData": [Function],
                                      "headerRenderer": <renderNull
                                        inputRef={[Function]}
                                        onChange={[Function]}
                                      />,
                                      "key": "select-row",
                                      "left": 0,
                                      "locked": true,
                                      "name": "",
                                      "onCellChange": [Function],
                                      "width": 40,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="aaa"
                                        columnType="number"
                                        draggingColumnIndex={null}
                                        index={0}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "aaa",
                                      "left": 40,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "aaa",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="bbbb"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={1}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "bbbb",
                                      "left": 200,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "bbbb",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="getCell"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={2}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "getCell",
                                      "left": 360,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "getCell",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="select-row"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={3}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "select-row",
                                      "left": 520,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "select-row",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                  ]
                                }
                                expandedRows={Array []}
                                height={35}
                                idx={0}
                                isScrolling={false}
                                isSelected={false}
                                row={
                                  Object {
                                    "aaa": 9,
                                    "bbbb": "foo",
                                    "getCell": "9",
                                    "select-row": "someval",
                                  }
                                }
                                subRowDetails={Object {}}
                                visibleEnd={2}
                                visibleStart={0}
                              />,
                              <Row
                                cellMetaData={
                                  Object {
                                    "copied": null,
                                    "dragged": null,
                                    "enableCellAutoFocus": true,
                                    "enableCellSelect": true,
                                    "getCellActions": undefined,
                                    "getDataGridDOMNode": [Function],
                                    "handleDragEnterRow": [Function],
                                    "handleTerminateDrag": [Function],
                                    "hoveredRowIdx": undefined,
                                    "isScrollingHorizontallyWithKeyboard": false,
                                    "isScrollingVerticallyWithKeyboard": false,
                                    "onAddSubRow": undefined,
                                    "onCellClick": [Function],
                                    "onCellContextMenu": [Function],
                                    "onCellDoubleClick": [Function],
                                    "onCellExpand": [Function],
                                    "onCellFocus": [Function],
                                    "onColumnEvent": [Function],
                                    "onCommit": [Function],
                                    "onCommitCancel": [Function],
                                    "onDeleteSubRow": undefined,
                                    "onDragHandleDoubleClick": [Function],
                                    "onRowExpandToggle": [Function],
                                    "onRowHover": undefined,
                                    "openCellEditor": [Function],
                                    "rowKey": "id",
                                    "selected": Object {
                                      "idx": 0,
                                      "rowIdx": 0,
                                    },
                                  }
                                }
                                cellRenderer={[Function]}
                                colDisplayEnd={5}
                                colDisplayStart={0}
                                colVisibleEnd={5}
                                colVisibleStart={0}
                                columns={
                                  Array [
                                    Object {
                                      "cellClass": "rdg-row-actions-cell",
                                      "editable": false,
                                      "filterable": false,
                                      "formatter": <RowActionsCell
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                      />,
                                      "getRowMetaData": [Function],
                                      "headerRenderer": <renderNull
                                        inputRef={[Function]}
                                        onChange={[Function]}
                                      />,
                                      "key": "select-row",
                                      "left": 0,
                                      "locked": true,
                                      "name": "",
                                      "onCellChange": [Function],
                                      "width": 40,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="aaa"
                                        columnType="number"
                                        draggingColumnIndex={null}
                                        index={0}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "aaa",
                                      "left": 40,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "aaa",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="bbbb"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={1}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "bbbb",
                                      "left": 200,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "bbbb",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="getCell"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={2}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "getCell",
                                      "left": 360,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "getCell",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="select-row"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={3}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "select-row",
                                      "left": 520,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "select-row",
                                      "resizable": true,
                                      "width": 160,
                                    },
                                  ]
                                }
                                expandedRows={Array []}
                                height={35}
                                idx={1}
                                isScrolling={false}
                                isSelected={false}
                                row={
                                  Object {
                                    "aaa": 9,
                                    "bbbb": "",
                                    "getCell": "baz",
                                    "select-row": "someotherval",
                                  }
                                }
                                subRowDetails={Object {}}
                                visibleEnd={2}
                                visibleStart={0}
                              />,
                            ]
                          }
                          width={680}
                        >
                          <div
                            key="rows-container"
                          >
                            <Row
                              cellMetaData={
                                Object {
                                  "copied": null,
                                  "dragged": null,
                                  "enableCellAutoFocus": true,
                                  "enableCellSelect": true,
                                  "getCellActions": undefined,
                                  "getDataGridDOMNode": [Function],
                                  "handleDragEnterRow": [Function],
                                  "handleTerminateDrag": [Function],
                                  "hoveredRowIdx": undefined,
                                  "isScrollingHorizontallyWithKeyboard": false,
                                  "isScrollingVerticallyWithKeyboard": false,
                                  "onAddSubRow": undefined,
                                  "onCellClick": [Function],
                                  "onCellContextMenu": [Function],
                                  "onCellDoubleClick": [Function],
                                  "onCellExpand": [Function],
                                  "onCellFocus": [Function],
                                  "onColumnEvent": [Function],
                                  "onCommit": [Function],
                                  "onCommitCancel": [Function],
                                  "onDeleteSubRow": undefined,
                                  "onDragHandleDoubleClick": [Function],
                                  "onRowExpandToggle": [Function],
                                  "onRowHover": undefined,
                                  "openCellEditor": [Function],
                                  "rowKey": "id",
                                  "selected": Object {
                                    "idx": 0,
                                    "rowIdx": 0,
                                  },
                                }
                              }
                              cellRenderer={[Function]}
                              colDisplayEnd={5}
                              colDisplayStart={0}
                              colVisibleEnd={5}
                              colVisibleStart={0}
                              columns={
                                Array [
                                  Object {
                                    "cellClass": "rdg-row-actions-cell",
                                    "editable": false,
                                    "filterable": false,
                                    "formatter": <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />,
                                    "getRowMetaData": [Function],
                                    "headerRenderer": <renderNull
                                      inputRef={[Function]}
                                      onChange={[Function]}
                                    />,
                                    "key": "select-row",
                                    "left": 0,
                                    "locked": true,
                                    "name": "",
                                    "onCellChange": [Function],
                                    "width": 40,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="aaa"
                                      columnType="number"
                                      draggingColumnIndex={null}
                                      index={0}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "aaa",
                                    "left": 40,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "aaa",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="bbbb"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={1}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "bbbb",
                                    "left": 200,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "bbbb",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="getCell"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={2}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "getCell",
                                    "left": 360,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "getCell",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="select-row"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={3}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "select-row",
                                    "left": 520,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "select-row",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                ]
                              }
                              expandedRows={Array []}
                              height={35}
                              idx={0}
                              isScrolling={false}
                              isSelected={false}
                              key="row-0"
                              row={
                                Object {
                                  "aaa": 9,
                                  "bbbb": "foo",
                                  "getCell": "9",
                                  "select-row": "someval",
                                }
                              }
                              subRowDetails={Object {}}
                              visibleEnd={2}
                              visibleStart={0}
                            >
                              <div
                                className="react-grid-Row react-grid-Row--even"
                                height={35}
                                onDragEnter={[Function]}
                                style={
                                  Object {
                                    "contain": "layout",
                                    "height": 35,
                                    "overflow": "hidden",
                                  }
                                }
                              >
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="aaa"
                                        columnType="number"
                                        draggingColumnIndex={null}
                                        index={0}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "aaa",
                                      "left": 40,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "aaa",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={1}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="aaa-1"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "foo",
                                      "getCell": "9",
                                      "select-row": "someval",
                                    }
                                  }
                                  rowIdx={0}
                                  tabIndex={0}
                                  value={9}
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 40,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value={9}
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <NumberCellFormatter
                                        value={9}
                                      >
                                        <div
                                          className="cell-number"
                                        >
                                          9
                                        </div>
                                      </NumberCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="bbbb"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={1}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "bbbb",
                                      "left": 200,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "bbbb",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={2}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="bbbb-2"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "foo",
                                      "getCell": "9",
                                      "select-row": "someval",
                                    }
                                  }
                                  rowIdx={0}
                                  tabIndex={0}
                                  value="foo"
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 200,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value="foo"
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value="foo"
                                      >
                                        <div
                                          className="cell-text"
                                        >
                                          foo
                                        </div>
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="getCell"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={2}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "getCell",
                                      "left": 360,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "getCell",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={3}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="getCell-3"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "foo",
                                      "getCell": "9",
                                      "select-row": "someval",
                                    }
                                  }
                                  rowIdx={0}
                                  tabIndex={0}
                                  value="9"
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 360,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value="9"
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value="9"
                                      >
                                        <div
                                          className="cell-text"
                                        >
                                          9
                                        </div>
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="select-row"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={3}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "select-row",
                                      "left": 520,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "select-row",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={4}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="select-row-4"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "foo",
                                      "getCell": "9",
                                      "select-row": "someval",
                                    }
                                  }
                                  rowIdx={0}
                                  tabIndex={0}
                                  value="someval"
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 520,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value="someval"
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value="someval"
                                      >
                                        <div
                                          className="cell-text"
                                        >
                                          someval
                                        </div>
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "cellClass": "rdg-row-actions-cell",
                                      "editable": false,
                                      "filterable": false,
                                      "formatter": <RowActionsCell
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                      />,
                                      "getRowMetaData": [Function],
                                      "headerRenderer": <renderNull
                                        inputRef={[Function]}
                                        onChange={[Function]}
                                      />,
                                      "key": "select-row",
                                      "left": 0,
                                      "locked": true,
                                      "name": "",
                                      "onCellChange": [Function],
                                      "width": 40,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={
                                    <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />
                                  }
                                  height={35}
                                  idx={0}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="select-row-0"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "foo",
                                      "getCell": "9",
                                      "select-row": "someval",
                                    }
                                  }
                                  rowIdx={0}
                                  tabIndex={0}
                                  value={false}
                                >
                                  <div
                                    className="rdg-row-actions-cell react-grid-Cell react-grid-Cell--locked"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 0,
                                        "position": "absolute",
                                        "width": 40,
                                      }
                                    }
                                    tabIndex={0}
                                    value={false}
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <RowActionsCell
                                        column={
                                          Object {
                                            "cellClass": "rdg-row-actions-cell",
                                            "editable": false,
                                            "filterable": false,
                                            "formatter": <RowActionsCell
                                              rowSelection={
                                                Object {
                                                  "enableShiftSelect": true,
                                                  "onRowsDeselected": [Function],
                                                  "onRowsSelected": [Function],
                                                  "selectBy": Object {
                                                    "indexes": Array [],
                                                  },
                                                }
                                              }
                                            />,
                                            "getRowMetaData": [Function],
                                            "headerRenderer": <renderNull
                                              inputRef={[Function]}
                                              onChange={[Function]}
                                            />,
                                            "key": "select-row",
                                            "left": 0,
                                            "locked": true,
                                            "name": "",
                                            "onCellChange": [Function],
                                            "width": 40,
                                          }
                                        }
                                        dependentValues={
                                          Object {
                                            "aaa": 9,
                                            "bbbb": "foo",
                                            "getCell": "9",
                                            "select-row": "someval",
                                          }
                                        }
                                        isExpanded={false}
                                        rowIdx={0}
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                        value={false}
                                      >
                                        <label
                                          className="is-row-selected"
                                        >
                                          <input
                                            checked={false}
                                            name="row-selected-0"
                                            onChange={[Function]}
                                            type="checkbox"
                                          />
                                          <span
                                            className="row-number row-number-1"
                                          >
                                            1
                                          </span>
                                        </label>
                                      </RowActionsCell>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                              </div>
                            </Row>
                            <Row
                              cellMetaData={
                                Object {
                                  "copied": null,
                                  "dragged": null,
                                  "enableCellAutoFocus": true,
                                  "enableCellSelect": true,
                                  "getCellActions": undefined,
                                  "getDataGridDOMNode": [Function],
                                  "handleDragEnterRow": [Function],
                                  "handleTerminateDrag": [Function],
                                  "hoveredRowIdx": undefined,
                                  "isScrollingHorizontallyWithKeyboard": false,
                                  "isScrollingVerticallyWithKeyboard": false,
                                  "onAddSubRow": undefined,
                                  "onCellClick": [Function],
                                  "onCellContextMenu": [Function],
                                  "onCellDoubleClick": [Function],
                                  "onCellExpand": [Function],
                                  "onCellFocus": [Function],
                                  "onColumnEvent": [Function],
                                  "onCommit": [Function],
                                  "onCommitCancel": [Function],
                                  "onDeleteSubRow": undefined,
                                  "onDragHandleDoubleClick": [Function],
                                  "onRowExpandToggle": [Function],
                                  "onRowHover": undefined,
                                  "openCellEditor": [Function],
                                  "rowKey": "id",
                                  "selected": Object {
                                    "idx": 0,
                                    "rowIdx": 0,
                                  },
                                }
                              }
                              cellRenderer={[Function]}
                              colDisplayEnd={5}
                              colDisplayStart={0}
                              colVisibleEnd={5}
                              colVisibleStart={0}
                              columns={
                                Array [
                                  Object {
                                    "cellClass": "rdg-row-actions-cell",
                                    "editable": false,
                                    "filterable": false,
                                    "formatter": <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />,
                                    "getRowMetaData": [Function],
                                    "headerRenderer": <renderNull
                                      inputRef={[Function]}
                                      onChange={[Function]}
                                    />,
                                    "key": "select-row",
                                    "left": 0,
                                    "locked": true,
                                    "name": "",
                                    "onCellChange": [Function],
                                    "width": 40,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="aaa"
                                      columnType="number"
                                      draggingColumnIndex={null}
                                      index={0}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "aaa",
                                    "left": 40,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "aaa",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="bbbb"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={1}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "bbbb",
                                    "left": 200,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "bbbb",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="getCell"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={2}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "getCell",
                                    "left": 360,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "getCell",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                  Object {
                                    "editable": true,
                                    "formatter": [Function],
                                    "headerRenderer": <ColumnHeader
                                      columnKey="select-row"
                                      columnType="text"
                                      draggingColumnIndex={null}
                                      index={3}
                                      isReadOnly={false}
                                      isSorted={false}
                                      onDragEnd={[Function]}
                                      onDragStartColumnIndex={[Function]}
                                      onDropColumnIndexAtIndex={[Function]}
                                      onRenameColumn={[Function]}
                                      setDropdownAction={[MockFunction]}
                                      showLetter={false}
                                    />,
                                    "key": "select-row",
                                    "left": 520,
                                    "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                    "maybeTriggerRenderIfChangeIsSorted": false,
                                    "maybeTriggerRenderIfChangeShowLetter": undefined,
                                    "maybeTriggerRenderIfChangeSortDirection": undefined,
                                    "name": "select-row",
                                    "resizable": true,
                                    "width": 160,
                                  },
                                ]
                              }
                              expandedRows={Array []}
                              height={35}
                              idx={1}
                              isScrolling={false}
                              isSelected={false}
                              key="row-1"
                              row={
                                Object {
                                  "aaa": 9,
                                  "bbbb": "",
                                  "getCell": "baz",
                                  "select-row": "someotherval",
                                }
                              }
                              subRowDetails={Object {}}
                              visibleEnd={2}
                              visibleStart={0}
                            >
                              <div
                                className="react-grid-Row react-grid-Row--odd"
                                height={35}
                                onDragEnter={[Function]}
                                style={
                                  Object {
                                    "contain": "layout",
                                    "height": 35,
                                    "overflow": "hidden",
                                  }
                                }
                              >
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="aaa"
                                        columnType="number"
                                        draggingColumnIndex={null}
                                        index={0}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "aaa",
                                      "left": 40,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "aaa",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={1}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="aaa-1"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "",
                                      "getCell": "baz",
                                      "select-row": "someotherval",
                                    }
                                  }
                                  rowIdx={1}
                                  tabIndex={0}
                                  value={9}
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 40,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value={9}
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <NumberCellFormatter
                                        value={9}
                                      >
                                        <div
                                          className="cell-number"
                                        >
                                          9
                                        </div>
                                      </NumberCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="bbbb"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={1}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "bbbb",
                                      "left": 200,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "bbbb",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={2}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="bbbb-2"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "",
                                      "getCell": "baz",
                                      "select-row": "someotherval",
                                    }
                                  }
                                  rowIdx={1}
                                  tabIndex={0}
                                  value=""
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 200,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value=""
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value=""
                                      >
                                        <div
                                          className="cell-text"
                                        />
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="getCell"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={2}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "getCell",
                                      "left": 360,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "getCell",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={3}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="getCell-3"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "",
                                      "getCell": "baz",
                                      "select-row": "someotherval",
                                    }
                                  }
                                  rowIdx={1}
                                  tabIndex={0}
                                  value="baz"
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 360,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value="baz"
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value="baz"
                                      >
                                        <div
                                          className="cell-text"
                                        >
                                          baz
                                        </div>
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "editable": true,
                                      "formatter": [Function],
                                      "headerRenderer": <ColumnHeader
                                        columnKey="select-row"
                                        columnType="text"
                                        draggingColumnIndex={null}
                                        index={3}
                                        isReadOnly={false}
                                        isSorted={false}
                                        onDragEnd={[Function]}
                                        onDragStartColumnIndex={[Function]}
                                        onDropColumnIndexAtIndex={[Function]}
                                        onRenameColumn={[Function]}
                                        setDropdownAction={[MockFunction]}
                                        showLetter={false}
                                      />,
                                      "key": "select-row",
                                      "left": 520,
                                      "maybeTriggerRenderIfChangeDraggingColumnIndex": null,
                                      "maybeTriggerRenderIfChangeIsSorted": false,
                                      "maybeTriggerRenderIfChangeShowLetter": undefined,
                                      "maybeTriggerRenderIfChangeSortDirection": undefined,
                                      "name": "select-row",
                                      "resizable": true,
                                      "width": 160,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={[Function]}
                                  height={35}
                                  idx={4}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="select-row-4"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "",
                                      "getCell": "baz",
                                      "select-row": "someotherval",
                                    }
                                  }
                                  rowIdx={1}
                                  tabIndex={0}
                                  value="someotherval"
                                >
                                  <div
                                    className="react-grid-Cell"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 520,
                                        "position": "absolute",
                                        "width": 160,
                                      }
                                    }
                                    tabIndex={0}
                                    value="someotherval"
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <TextCellFormatter
                                        value="someotherval"
                                      >
                                        <div
                                          className="cell-text"
                                        >
                                          someotherval
                                        </div>
                                      </TextCellFormatter>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                                <CellWithoutGarbage
                                  cellMetaData={
                                    Object {
                                      "copied": null,
                                      "dragged": null,
                                      "enableCellAutoFocus": true,
                                      "enableCellSelect": true,
                                      "getCellActions": undefined,
                                      "getDataGridDOMNode": [Function],
                                      "handleDragEnterRow": [Function],
                                      "handleTerminateDrag": [Function],
                                      "hoveredRowIdx": undefined,
                                      "isScrollingHorizontallyWithKeyboard": false,
                                      "isScrollingVerticallyWithKeyboard": false,
                                      "onAddSubRow": undefined,
                                      "onCellClick": [Function],
                                      "onCellContextMenu": [Function],
                                      "onCellDoubleClick": [Function],
                                      "onCellExpand": [Function],
                                      "onCellFocus": [Function],
                                      "onColumnEvent": [Function],
                                      "onCommit": [Function],
                                      "onCommitCancel": [Function],
                                      "onDeleteSubRow": undefined,
                                      "onDragHandleDoubleClick": [Function],
                                      "onRowExpandToggle": [Function],
                                      "onRowHover": undefined,
                                      "openCellEditor": [Function],
                                      "rowKey": "id",
                                      "selected": Object {
                                        "idx": 0,
                                        "rowIdx": 0,
                                      },
                                    }
                                  }
                                  column={
                                    Object {
                                      "cellClass": "rdg-row-actions-cell",
                                      "editable": false,
                                      "filterable": false,
                                      "formatter": <RowActionsCell
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                      />,
                                      "getRowMetaData": [Function],
                                      "headerRenderer": <renderNull
                                        inputRef={[Function]}
                                        onChange={[Function]}
                                      />,
                                      "key": "select-row",
                                      "left": 0,
                                      "locked": true,
                                      "name": "",
                                      "onCellChange": [Function],
                                      "width": 40,
                                    }
                                  }
                                  expandableOptions={
                                    Object {
                                      "canExpand": false,
                                      "children": undefined,
                                      "expanded": undefined,
                                      "field": undefined,
                                      "subRowDetails": Object {},
                                      "treeDepth": undefined,
                                    }
                                  }
                                  formatter={
                                    <RowActionsCell
                                      rowSelection={
                                        Object {
                                          "enableShiftSelect": true,
                                          "onRowsDeselected": [Function],
                                          "onRowsSelected": [Function],
                                          "selectBy": Object {
                                            "indexes": Array [],
                                          },
                                        }
                                      }
                                    />
                                  }
                                  height={35}
                                  idx={0}
                                  isCellValueChanging={[Function]}
                                  isExpanded={false}
                                  isRowSelected={false}
                                  isScrolling={false}
                                  key="select-row-0"
                                  rowData={
                                    Object {
                                      "aaa": 9,
                                      "bbbb": "",
                                      "getCell": "baz",
                                      "select-row": "someotherval",
                                    }
                                  }
                                  rowIdx={1}
                                  tabIndex={0}
                                  value={false}
                                >
                                  <div
                                    className="rdg-row-actions-cell react-grid-Cell react-grid-Cell--locked"
                                    height={35}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onDoubleClick={[Function]}
                                    onDragOver={[Function]}
                                    onFocus={[Function]}
                                    style={
                                      Object {
                                        "contain": "layout",
                                        "height": 35,
                                        "left": 0,
                                        "position": "absolute",
                                        "width": 40,
                                      }
                                    }
                                    tabIndex={0}
                                    value={false}
                                  >
                                    <div
                                      className="react-grid-Cell__value"
                                    >
                                      <RowActionsCell
                                        column={
                                          Object {
                                            "cellClass": "rdg-row-actions-cell",
                                            "editable": false,
                                            "filterable": false,
                                            "formatter": <RowActionsCell
                                              rowSelection={
                                                Object {
                                                  "enableShiftSelect": true,
                                                  "onRowsDeselected": [Function],
                                                  "onRowsSelected": [Function],
                                                  "selectBy": Object {
                                                    "indexes": Array [],
                                                  },
                                                }
                                              }
                                            />,
                                            "getRowMetaData": [Function],
                                            "headerRenderer": <renderNull
                                              inputRef={[Function]}
                                              onChange={[Function]}
                                            />,
                                            "key": "select-row",
                                            "left": 0,
                                            "locked": true,
                                            "name": "",
                                            "onCellChange": [Function],
                                            "width": 40,
                                          }
                                        }
                                        dependentValues={
                                          Object {
                                            "aaa": 9,
                                            "bbbb": "",
                                            "getCell": "baz",
                                            "select-row": "someotherval",
                                          }
                                        }
                                        isExpanded={false}
                                        rowIdx={1}
                                        rowSelection={
                                          Object {
                                            "enableShiftSelect": true,
                                            "onRowsDeselected": [Function],
                                            "onRowsSelected": [Function],
                                            "selectBy": Object {
                                              "indexes": Array [],
                                            },
                                          }
                                        }
                                        value={false}
                                      >
                                        <label
                                          className="is-row-selected"
                                        >
                                          <input
                                            checked={false}
                                            name="row-selected-1"
                                            onChange={[Function]}
                                            type="checkbox"
                                          />
                                          <span
                                            className="row-number row-number-1"
                                          >
                                            2
                                          </span>
                                        </label>
                                      </RowActionsCell>
                                    </div>
                                  </div>
                                </CellWithoutGarbage>
                              </div>
                            </Row>
                          </div>
                        </SimpleRowsContainer>
                      </RowsContainer>
                    </div>
                  </Canvas>
                </div>
              </Viewport>
            </div>
          </div>
        </Grid>
      </div>
    </div>
  </ReactDataGrid>
</DataGrid>
`;

exports[`DataGrid tests, should match snapshot without data 1`] = `
<DataGrid
  columnTypes={
    Array [
      "number",
      "text",
      "text",
      "text",
    ]
  }
  columns={
    Array [
      "aaa",
      "bbbb",
      "getCell",
      "select-row",
    ]
  }
  getRow={[Function]}
  isReadOnly={false}
  onEditCell={[MockFunction]}
  onGridSort={[MockFunction]}
  onRenameColumn={[MockFunction]}
  onReorderColumns={[MockFunction]}
  onSetSelectedRowIndexes={[MockFunction]}
  selectedRowIndexes={Array []}
  setDropdownAction={[MockFunction]}
  totalRows={0}
  wfModuleId={100}
/>
`;
