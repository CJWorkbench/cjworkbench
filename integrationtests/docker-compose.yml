version: '3.4'

# See also:
# docker-compose.override.yml (for dev mode only -- uses 'build')
# docker-compose.cloudbuild.yml (for cloudbuild only -- uses 'image')

services:
  db:
    image: postgres:12
    networks:
      default:
        aliases: [ 'workbench-db' ]
    environment:
      POSTGRES_USER: 'cjworkbench'
      POSTGRES_PASSWORD: 'cjworkbench'
      POSTGRES_DB: 'cjworkbench'

  rabbitmq:
    image: rabbitmq:3.8.11-alpine
    environment:
      # Use just one CPU
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '+S 1:1'

  upload-assets:
    #image:
    #build:
    # Depends on db+rabbitmq so they start up before integration-test
    depends_on: [ 'db', 'minio', 'rabbitmq' ]
    environment:
      AWS_ACCESS_KEY_ID: minio_access
      AWS_SECRET_ACCESS_KEY: minio_secret
      AWS_S3_ENDPOINT: http://minio:9000
      BUCKET_NAME: "integrationtest-static"

  migrate:
    #image:
    #build:
    depends_on: [ 'db' ]
    environment:
      FLYWAY_URL: "jdbc:postgresql://workbench-db/cjworkbench"
      FLYWAY_USER: cjworkbench
      FLYWAY_PASSWORD: cjworkbench

  minio:
    image: minio/minio:RELEASE.2020-10-12T21-53-21Z
    environment:
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
    command: server /data
    networks:
      default:
        aliases:
          - minio.django-issue-32304.com
    entrypoint: ''
    command:
      - sh
      - '-c'
      - |
        PREFIX=integrationtest
        for bucket in user-files static stored-objects external-modules cached-render-results upload; do
            mkdir -p /data/$$PREFIX-$$bucket
        done
        rm -rf /data/.minio.sys
        mkdir -p /data/.minio.sys/buckets/$$PREFIX-static/
        cat > /data/.minio.sys/buckets/$$PREFIX-static/policy.json <<EOT
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {"AWS": "*"},
                    "Action": ["s3:GetBucketLocation", "s3:ListBucket"],
                    "Resource": ["arn:aws:s3:::$$PREFIX-static"]
                },
                {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {"AWS": "*"},
                    "Action": ["s3:GetObject"],
                    "Resource": ["arn:aws:s3:::$$PREFIX-static/*"]
                }
            ]
        }
        EOT
        minio server /data

  # In Kubernetes, we use sidecar processes to manage chroots. But we can't
  # mimic those in pure Docker, because we can't adjust mount propagation.
  # (Each container has its own mount namespace, and there's no way for
  # mounted volumes to cross namespaces.)
  #
  # Instead, we set privileged: true on each container and run
  # /app/cjwkernel/setup-sandboxes.sh before the normal command.
  #
  # [adamhooper, 2019-11-07] I'm not sure whether we need privileged: true.
  # CAP_SYS_ADMIN works on localhost, but not on Cloud Build. Perhaps apparmor
  # causes problems? Dunno. But Docker is so far removed from Kubernetes that
  # debugging this problem seems like a waste of time. We'd be better off
  # revising our integration-test framework to use Kubernetes.
  fetcher:
    #image:
    #build:
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh all && exec bin/fetcher-prod' ]
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment: &common_env
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '2'
      CJW_PRODUCTION: 'True'
      CJW_DB_HOST: db
      CJW_DB_PASSWORD: cjworkbench
      CJW_RABBITMQ_HOST: 'amqp://guest:guest@rabbitmq/'
      CJW_SECRET_KEY: a-secret-key
      CJW_MOCK_EMAIL: 'True'
      AWS_ACCESS_KEY_ID: minio_access
      AWS_SECRET_ACCESS_KEY: minio_secret
      AWS_S3_ENDPOINT: http://minio:9000
      S3_BUCKET_NAME_PATTERN: "integrationtest-%s"

  renderer:
    #image:
    #build:
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh all && exec bin/renderer-prod' ]
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment: *common_env
    volumes:
      - local_mail:/app/local_mail

  # Include `cron` services: if they crash, integration tests fail
  cron:
    #image:
    #build:
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    environment: *common_env

  cron-expired-session-deleter:
    #image:
    #build:
    command: [ 'bin/cron-expired-session-deleter' ]
    depends_on: [ 'db', 'minio' ]
    environment: *common_env

  cron-delta-deleter:
    #image:
    #build:
    command: [ 'bin/cron-delta-deleter' ]
    depends_on: [ 'db', 'minio' ]
    environment: *common_env

  cron-lesson-autoupdate-disabler:
    #image:
    #build:
    command: [ 'bin/cron-lesson-autoupdate-disabler' ]
    depends_on: [ 'db' ]
    environment: *common_env

  frontend:
    #image:
    #build:
    #no ports: on cloudbuild
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh only-readonly && exec bin/frontend-prod 8080' ]
    depends_on: [ 'db', 'rabbitmq', 'minio', 'tusd' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment:
      <<: *common_env
      STATIC_URL: http://minio.django-issue-32304.com:9000/integrationtest-static/
      TUS_CREATE_UPLOAD_URL: http://tusd:8080/files
    volumes:
      - local_mail:/app/local_mail

  tusd:
    image: tusproject/tusd:v1.4.0
    depends_on: [ 'minio' ]
    environment:
      AWS_ACCESS_KEY_ID: minio_access
      AWS_SECRET_ACCESS_KEY: minio_secret
      AWS_REGION: us-east-1
    command: [
      '-port=8080',
      '-hooks-http=http://frontend:8080/tusd-hooks',
      '-hooks-enabled-events=pre-finish',
      '-s3-endpoint=http://minio:9000',
      '-s3-bucket=integrationtest-upload',
    ]


  integration-test:
    #image:
    #build:
    depends_on:
      # start cronjobs so we can test that they don't crash
      - cron
      - cron-delta-deleter
      - cron-expired-session-deleter
      - cron-lesson-autoupdate-disabler
      - db
      - fetcher
      - frontend
      - renderer
    command: [ "sh", "-c", "until curl --output /dev/null http://frontend:8080 --silent --head --fail; do sleep 1; done; xvfb-run -a -s '-screen 0 1200x768x24' python -m unittest discover -v integrationtests -f" ]
    shm_size: 2g # prevent Firefox crashing ~5% of startups
    networks:
      default:
        aliases: [ 'module-zipfile-server' ]
    volumes:
      - local_mail:/app/local_mail
    environment:
      PYTHONUNBUFFERED: '1'
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      S3_BUCKET_NAME_PATTERN: "integrationtest-%s"

volumes:
  local_mail: {}  # renderer/frontend write emails; integration-test reads them

networks:
  default: {}
