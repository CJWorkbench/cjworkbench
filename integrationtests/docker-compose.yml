version: '3.4'

# See also:
# docker-compose.override.yml (for dev mode only -- uses 'build')
# docker-compose.cloudbuild.yml (for cloudbuild only -- uses 'image')

services:
  db:
    image: postgres:10.10
    networks:
      default:
        aliases: [ 'workbench-db' ]
    environment:
      POSTGRES_USER: 'cjworkbench'
      POSTGRES_PASSWORD: 'cjworkbench'
      POSTGRES_DB: 'cjworkbench'

  rabbitmq:
    image: rabbitmq:3.7.8
    environment:
      # Use just one CPU
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '+S 1:1 +stbt ts +A 12'

  migrate:
    #image:
    #build:
    # Depends on minio because `import cjwstate.minio` pings it to ensure bucket
    # Depends on rabbitmq so that rabbitmq is already warm when we launch
    # integration-test
    depends_on: [ 'db', 'minio', 'rabbitmq' ]
    environment: &common_env
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '2'
      CJW_PRODUCTION: 'True'
      CJW_DB_HOST: workbench-db
      CJW_DB_PASSWORD: cjworkbench
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/
      CJW_SECRET_KEY: cjw-secret-key
      CJW_MOCK_EMAIL: 'True'
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      MINIO_BUCKET_PREFIX: integrationtest

  minio:
    image: minio/minio:RELEASE.2019-10-12T01-39-57Z
    environment:
      MINIO_ACCESS_KEY: minio_root_access
      MINIO_SECRET_KEY: minio_root_secret
    command: server /data

  addminiouser:
    image: minio/mc:RELEASE.2019-10-09T22-54-57Z
    depends_on: [ 'minio' ]
    entrypoint: ''
    command: [ 'sh', '-c', 'while ! nc -z minio 9000; do sleep 0.1; done; mc config host add workbench http://minio:9000 minio_root_access minio_root_secret && mc admin user add workbench minio_access minio_secret && mc admin policy set workbench readwrite user=minio_access' ]

  git-server:
    #image:
    #build:

  # In Kubernetes, we use sidecar processes to manage chroots. But we can't
  # mimic those in pure Docker, because we can't adjust mount propagation.
  # (Each container has its own mount namespace, and there's no way for
  # mounted volumes to cross namespaces.)
  #
  # Instead, we set privileged: true on each container and run
  # /app/cjwkernel/setup-sandboxes.sh before the normal command.
  #
  # [adamhooper, 2019-11-07] I'm not sure whether we need privileged: true.
  # CAP_SYS_ADMIN works on localhost, but not on Cloud Build. Perhaps apparmor
  # causes problems? Dunno. But Docker is so far removed from Kubernetes that
  # debugging this problem seems like a waste of time. We'd be better off
  # revising our integration-test framework to use Kubernetes.
  fetcher:
    #image:
    #build:
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh all && exec ./manage.py fetcher' ]
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment: *common_env

  renderer:
    #image:
    #build:
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh all && exec ./manage.py renderer' ]
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment: *common_env
    volumes:
      - local_mail:/app/local_mail

  cron:
    #image:
    #build:
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    environment: *common_env

  frontend:
    #image:
    #build:
    #no ports: on cloudbuild
    command: [ 'sh', '-c', '/app/cjwkernel/setup-sandboxes.sh only-readonly && exec daphne -b 0.0.0.0 -p 8080 --application-close-timeout 180 cjworkbench.asgi:application' ]
    depends_on: [ 'db', 'rabbitmq', 'minio' ]
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true  # for setup-sandboxes.sh
    environment:
      <<: *common_env
      STATIC_URL: http://minio:9000/integrationtest-static/
    volumes:
      - local_mail:/app/local_mail

  integration-test:
    #image:
    #build:
    depends_on: [ 'db', 'fetcher', 'renderer', 'cron', 'frontend', 'git-server' ]
    command: [ "sh", "-c", "until curl --output /dev/null http://frontend:8080 --silent --head --fail; do sleep 1; done; xvfb-run -a -s '-screen 0 1200x768x24' python -m unittest discover -v integrationtests -f" ]
    shm_size: 2g # prevent Firefox crashing ~5% of startups
    volumes:
      - local_mail:/app/local_mail
    environment:
      PYTHONUNBUFFERED: '1'
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      MINIO_BUCKET_PREFIX: integrationtest

volumes:
  local_mail: {}  # renderer/frontend write emails; integration-test reads them

networks:
  default: {}
