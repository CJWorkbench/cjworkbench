'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var svg = function (_React$Component) {
  _inherits(svg, _React$Component);

  function svg() {
    _classCallCheck(this, svg);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(svg).apply(this, arguments));
  }

  _createClass(svg, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.ajaxLoad();
    }
  }, {
    key: 'ajaxLoad',
    value: function ajaxLoad() {
      var ajax = new XMLHttpRequest();
      ajax.open("GET", this.props.src, true);
      ajax.send();
      ajax.onloadend = function (e) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = e.target.responseXML.firstChild.childNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var value = _step.value;

            if (value.nodeType === 1) this.refs.svg.appendChild(value);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }.bind(this);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var onClick = _props.onClick;
      var className = _props.className;
      var width = _props.width;
      var height = _props.height;
      var id = _props.id;
      var viewBox = _props.viewBox;
      var preserveAspectRatio = _props.preserveAspectRatio;

      return _react2.default.createElement('svg', { ref: 'svg', xmlns: 'http://www.w3.org/2000/svg', version: '1.1', viewBox: viewBox, preserveAspectRatio: preserveAspectRatio || "xMinYMin meet", onClick: onClick, id: id, width: width, height: height, className: className });
    }
  }]);

  return svg;
}(_react2.default.Component);

exports.default = svg;

svg.propTypes = {
  src: _react2.default.PropTypes.string.isRequired
};