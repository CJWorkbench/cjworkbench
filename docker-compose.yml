# Bring up all the pieces necessary to run the workbench
# Data persists in Docker volumes and in local dir

# This file passes through all necessary env variables to requisite
# Docker containers and makes them available when running commands via
# `docker exec`.

version: '3.4'

services:
  database:
    image: postgres:10.4
    environment:
      POSTGRES_USER: cjworkbench
      POSTGRES_PASSWORD: cjworkbench
      POSTGRES_DB: cjworkbench
      PGDATA: /var/lib/postgresql/data/10.4
    networks: [ 'dev' ]
    volumes:
      - dbdata:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3.7.8-management
    ports: [ '15672' ] # open management port, for debugging
    networks: [ 'dev' ]
    environment:
      # Use just one CPU
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '+S 1:1 +stbt ts +A 12'

  minio:
    image: minio/minio:RELEASE.2018-11-22T02-51-56Z
    networks: [ 'dev' ]
    ports: [ '8001:9000' ]
    environment:
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
    volumes:
      - minio_data:/data
    command: server /data

  webpack:
    build:
      context: .
      target: jsbase
    volumes:
      # Migrate 
      - ./:/app/:rw
      - node_modules:/app/node_modules:rw
      - jest_cache:/tmp/jest_0:rw
    networks: [ 'dev' ]
    command: node_modules/.bin/webpack --mode development --watch

  frontend:
    build:
      context: .
      target: pydev
    volumes:
      - ./:/app/:rw
      - virtualenvs:/root/.local/share/virtualenvs/:rw
    environment:
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '5'
      CJW_DB_HOST: database
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/
      CJW_DB_PASSWORD: cjworkbench
      CJW_SECRET_KEY: cjw-secret-key
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      MINIO_EXTERNAL_URL: http://localhost:8001
      MINIO_BUCKET_PREFIX: dev
    ports: [ '8000:8080' ]
    networks: [ 'dev' ]
    depends_on: [ 'database', 'rabbitmq', 'minio' ]
    command: [ 'pipenv', 'run', 'python', './manage.py', 'runserver', '--insecure', '0.0.0.0:8080' ]

  worker:
    # It'd be nice to use YAML anchors to copy these parameters ... but
    # PyCharm's YAML parser seems to die when we use YAML anchors.
    build:
      context: .
      target: pydev
    volumes:
      - ./:/app/:rw
      - virtualenvs:/root/.local/share/virtualenvs/:rw
    environment:
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '5'
      CJW_DB_HOST: database
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/
      CJW_DB_PASSWORD: cjworkbench
      CJW_SECRET_KEY: cjw-secret-key
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      MINIO_BUCKET_PREFIX: dev
    depends_on: [ 'database', 'rabbitmq', 'minio' ]
    networks: [ 'dev' ]
    command: [ 'pipenv', 'run', 'python', './manage.py', 'worker' ]


  cron:
    # It'd be nice to use YAML anchors to copy these parameters ... but
    # PyCharm's YAML parser seems to die when we use YAML anchors.
    build:
      context: .
      target: pydev
    volumes:
      - ./:/app/:rw
      - virtualenvs:/root/.local/share/virtualenvs/:rw
    environment:
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '5'
      CJW_DB_HOST: database
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/
      CJW_DB_PASSWORD: cjworkbench
      CJW_SECRET_KEY: cjw-secret-key
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
      MINIO_URL: http://minio:9000
      MINIO_BUCKET_PREFIX: dev
    depends_on: [ 'database', 'rabbitmq', 'minio' ]
    networks: [ 'dev' ]
    command: [ 'pipenv', 'run', 'python', './manage.py', 'cron' ]

  testdatabase:
    image: postgres:10.4
    environment:
      POSTGRES_USER: cjworkbench
      POSTGRES_PASSWORD: cjworkbench
      POSTGRES_DB: cjworkbench
      PGDATA: /var/lib/postgresql/data/10.4
    networks: [ 'test' ]
    command: [
      '-c', 'fsync=off',
      '-c', 'synchronous_commit=off',
      '-c', 'full_page_writes=off'
    ]
    # no volumes: we wipe this DB a lot

  testrabbitmq:
    image: rabbitmq:3.7.8
    networks: [ 'test' ]
    environment:
      # Use just one CPU
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '+S 1:1 +stbt ts +A 12'

  testminio:
    image: minio/minio:RELEASE.2018-11-22T02-51-56Z
    networks: [ 'test' ]
    environment:
      MINIO_ACCESS_KEY: minio_access
      MINIO_SECRET_KEY: minio_secret
    command: server /data

networks:
  dev: {}
  test: {}

volumes:
  dbdata: {}
  minio_data: {}
  virtualenvs: {}
  # Let's not make node_modules a bind mount: Windows bind mounts seem
  # to behave a bit differently from Linux bind mounts. Use a Docker volume
  # instead.
  node_modules: {}
  jest_cache: {}
