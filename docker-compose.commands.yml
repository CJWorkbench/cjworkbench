version: '3.4'

# https://github.com/docker/compose/issues/1896 gives docker-compose's rationale
# for keeping our 'migrate' and 'test' runners outside of docker-compose.yml.
services:
  migrate: &migrate
    image: flyway/flyway:7.7.0-alpine
    volumes:
      - ./flyway/conf:/flyway/conf
      - ./flyway/sql:/flyway/sql
    environment:
      FLYWAY_USER: cjworkbench
      FLYWAY_PASSWORD: cjworkbench
      FLYWAY_URL: 'jdbc:postgresql://database/cjworkbench'
    networks: [ 'dev' ]
    depends_on: [ 'database' ]
    command: [ 'migrate' ]

  testmigrate:
    <<: *migrate
    environment:
      FLYWAY_USER: cjworkbench
      FLYWAY_PASSWORD: cjworkbench
      FLYWAY_URL: 'jdbc:postgresql://testdatabase/cjworkbench'
    networks: [ 'test' ]
    depends_on: [ 'testdatabase' ]

  develop-module:
    build:
      context: .
      target: pydev
    volumes:
      - type: bind
        source: ./
        target: /app/
        consistency: cached
      - type: bind
        source: ../${MODULE:-x}/
        target: /${MODULE:-x}/
        consistency: cached
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true
    cap_add: [ SYS_ADMIN ] # for cjwkernel.kernel to overlay-mount chroots (on k8s we use an init container instead)
    environment: &django-env
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '3'
      CJW_HELP_EMAIL: root@localhost
      CJW_HOME_URL: 'http://localhost:8000'
      CJW_API_URL: 'http://localhost:8004'
      CJW_DB_HOST: database
      CJW_RABBITMQ_HOST: amqp://guest:guest@rabbitmq/
      CJW_DB_PASSWORD: cjworkbench
      CJW_SECRET_KEY: cjw-secret-key
      TUS_CREATE_UPLOAD_URL: http://tusd/files/
      AWS_ACCESS_KEY_ID: minio_access
      AWS_SECRET_ACCESS_KEY: minio_secret
      AWS_S3_ENDPOINT: http://minio:9000
      S3_BUCKET_NAME_PATTERN: "dev-%s"
    networks: [ 'dev' ]
    depends_on: [ 'database', 'rabbitmq', 'minio' ]

  pydev:
    # Run Python commands without depending on other services
    build:
      context: .
      target: pydev
    volumes:
      - type: bind
        source: ./
        target: /app/
        consistency: cached
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true
    cap_add:
      - SYS_ADMIN # for cjwkernel.kernel to overlay-mount chroots (on k8s we use an init container instead)
      - NET_ADMIN # for pyspawner to create new network namespace without access to private network
    environment:
      <<: *django-env
    networks: [ 'dev' ]

  unittest:
    # It'd be nice to use YAML anchors to copy these parameters ... but
    # PyCharm's YAML parser seems to die when we use YAML anchors.
    build:
      context: .
      target: pydev
    volumes:
      - type: bind
        source: ./
        target: /app/
        consistency: cached
    security_opt:
      - seccomp=docker/pyspawner-seccomp-profile.json
    privileged: true
    cap_add:
      - SYS_ADMIN # for cjwkernel.kernel to overlay-mount chroots (on k8s we use an init container instead)
      - NET_ADMIN # for pyspawner to create new network namespace without access to private network
    environment:
      PYTHONUNBUFFERED: '1'
      ASGI_THREADS: '3'
      CJW_HELP_EMAIL: 'root@localhost'
      CJW_HOME_URL: 'http://localhost:8000'
      CJW_API_URL: 'http://api.local'
      CJW_DB_PASSWORD: cjworkbench
      CJW_SECRET_KEY: cjw-secret-key
      AWS_ACCESS_KEY_ID: minio_access
      AWS_SECRET_ACCESS_KEY: minio_secret
      TUS_CREATE_UPLOAD_URL: http://testtusd:8080/files
      CJW_DB_HOST: testdatabase
      CJW_RABBITMQ_HOST: amqp://guest:guest@testrabbitmq/
      AWS_S3_ENDPOINT: http://testminio:9000
    networks: [ 'test' ]
    depends_on: [ 'testdatabase', 'testrabbitmq', 'testminio', 'testtusd' ]
    entrypoint: 'bin/unittest-entrypoint.sh'

  stripe:
    image: stripe/stripe-cli:v1.5.2
    networks: [ 'dev' ]
    depends_on: [ 'frontend' ]
    environment:
      STRIPE_DEVICE_NAME: workbench-dev
    env_file:
      - stripe.env  # STRIPE_API_KEY
    command: [
      'listen',
      '--forward-to', 'http://frontend:8000/stripe/webhook',
      '--events', 'checkout.session.completed,customer.subscription.deleted,customer.subscription.updated'
    ]
