apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      initContainers:
        # setup-sandboxes.sh needs special privileges; run it in an init container.
        #
        # We run this command separately because it runs with privileged: true.
        # (pyspawner shouldn't have permission to fiddle with the mount
        # namespace, lest malicious code use that permission to somehow escape
        # its sandbox.)
        #
        # See https://itnext.io/using-overlay-mounts-with-kubernetes-960375c05959
        - name: setup-sandboxes
          image: "gcr.io/cj-workbench/migrate:latest"
          securityContext:
            privileged: true  # so it can run mount
          command: [ "bash", "-x", "/app/cjwkernel/setup-sandboxes.sh", "only-readonly" ]
          volumeMounts:
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
              mountPropagation: Bidirectional  # expose mounts to main app
      containers:
        - name: frontend
          image: "gcr.io/cj-workbench/frontend:latest"
          resources:
            requests:
              cpu: 0.75
              memory: 2Gi
            limits:
              cpu: 0.75
              memory: 2Gi
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            # During rolling upgrade, don't delete old pods until new ones are responsive
            httpGet:
              path: /
              port: 8080
          env:
            - name: CJW_PRODUCTION
              value: 'True'
            - name: PYTHONUNBUFFERED
              value: '1'
            - name: ASGI_THREADS
              value: '5'
            - name: CJW_GOOGLE_ANALYTICS
              value: UA-104106561-1
            - name: CJW_HEAP_ANALYTICS_ID
              value: '70406982'
            - name: CJW_DB_HOST
              value: database-service
            - name: CJW_DB_PASSWORD
              value: cjworkbench
            - name: CJW_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-secret-key
                  key: value
            - name: CJW_INTERCOM_APP_ID
              valueFrom:
                secretKeyRef:
                  name: cjw-intercom-secret
                  key: APP_ID
            - name: CJW_INTERCOM_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cjw-intercom-secret
                  key: ACCESS_TOKEN
            - name: CJW_SENDGRID_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-sendgrid-api-key
                  key: value
            - name: CJW_SENDGRID_CONFIRMATION_ID
              value: d-cf03717d432e46d38e0b6b5b19f80b57
            - name: CJW_SENDGRID_PASSWORD_RESET_ID
              value: d-7cc8e91286bb4c87a9484f331407568a
            - name: HTTPS
              value: 'on'
            - name: CJW_GOOGLE_CLIENT_SECRETS
              value: secrets/google-oauth-secret/google-oauth-secret.json
            - name: CJW_INTERCOM_CLIENT_SECRETS
              value: secrets/intercom-oauth-secret/intercom-oauth-secret.json
            - name: CJW_SOCIALACCOUNT_SECRETS
              value: secrets/socialaccount-secrets/socialaccount-secrets.json
            - name: CJW_TWITTER_CLIENT_SECRETS
              value: secrets/twitter-oauth-secret/twitter-oauth-secret.json
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-access-key
                  key: access_key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-access-key
                  key: secret_key
            - name: MINIO_EXTERNAL_URL
              valueFrom:
                secretKeyRef:
                  name: minio-access-key
                  key: external_url
            - name: MINIO_URL
              value: 'http://minio-service'
            - name: MINIO_BUCKET_PREFIX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MINIO_BUCKET_SUFFIX
              value: '.workbenchdata.com'
            - name: MINIO_STATIC_URL_PATTERN
              value: 'https://storage.googleapis.com/{MINIO_BUCKET_PREFIX}-static.workbenchdata.com/'
            - name: _RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-1-rabbitmq-secret
                  key: rabbitmq-pass
            - name: CJW_RABBITMQ_HOST
              value: "amqp://rabbit:$(_RABBITMQ_PASSWORD)@rabbitmq-1-rabbitmq-svc/"
          volumeMounts:
            - mountPath: /app/secrets/google-oauth-secret
              name: google-oauth-secret
              readOnly: true
            - mountPath: /app/secrets/intercom-oauth-secret
              name: intercom-oauth-secret
              readOnly: true
            - mountPath: /app/secrets/socialaccount-secrets
              name: socialaccount-secrets
              readOnly: true
            - mountPath: /app/secrets/twitter-oauth-secret
              name: twitter-oauth-secret
              readOnly: true
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
        - name: teardown-sandboxes
          # "any volume mounts created by Containers in Pods must be destroyed
          # (unmounted) by the Containers on termination"
          # -- https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation
          image: "gcr.io/cj-workbench/migrate:latest"
          command: ["sh", "-c", "sleep infinity"]  # do nothing, until exit. (sh responds to INT signal)
          securityContext:
            privileged: true  # so it can unmount
          lifecycle:
            preStop:
              exec:
                command: ["bash", "-x", "/app/cjwkernel/teardown-sandboxes.sh"]
          volumeMounts:
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
              mountPropagation: Bidirectional  # expose mounts to main app
      volumes:
        - name: google-oauth-secret
          secret:
            secretName: google-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: google-oauth-secret.json
        - name: intercom-oauth-secret
          secret:
            secretName: intercom-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: intercom-oauth-secret.json
        - name: socialaccount-secrets
          secret:
            secretName: socialaccount-secrets
            defaultMode: 0400
            items:
              - key: json
                path: socialaccount-secrets.json
        - name: twitter-oauth-secret
          secret:
            secretName: twitter-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: twitter-oauth-secret.json
        - name: chroot
          emptyDir: {}
