apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-http-redirect-config
data:
  haproxy.cfg: |
      # We use haproxy to redirect HTTP to HTTPS. (Django is inefficient at this.)
      global
          nbproc 1
          nbthread 1
          log stdout format raw local0 info

      defaults
          log global
          timeout connect 30s
          timeout client 60s
          timeout server 60s
          timeout tunnel 1h
          timeout client-fin 30s
          mode http
          option httplog

      frontend httporhttps
          bind *:8080
          acl is_health_check path /healthz
          acl is_forwarded_https req.hdr(x-forwarded-proto) https
          http-request redirect scheme https if !is_health_check !is_forwarded_https
          default_backend workbench

      backend workbench
          server workbench localhost:8081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
    spec:
      serviceAccountName: frontend-sa
      nodeSelector: # Only schedule on nodes that disallow SMT. (Pod runs untrusted user code.)
        cloud.google.com/gke-smt-disabled: "true"
      tolerations: # Allow scheduling on expensive nodes. (no-SMT is expensive.)
      - key: "no-smt"
        operator: Equal
        value: "true"
        effect: NoSchedule
      initContainers:
        # setup-sandboxes.sh needs special privileges; run it in an init container.
        #
        # We run this command separately because it runs with privileged: true.
        # (pyspawner shouldn't have permission to fiddle with the mount
        # namespace, lest malicious code use that permission to somehow escape
        # its sandbox.)
        #
        # See https://itnext.io/using-overlay-mounts-with-kubernetes-960375c05959
        - name: setup-sandboxes
          image: "gcr.io/workbenchdata-ci/migrate:latest"
          securityContext:
            privileged: true  # so it can run mount
          command: [ "bash", "-x", "/app/cjwkernel/setup-sandboxes.sh", "only-readonly" ]
          volumeMounts:
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
              mountPropagation: Bidirectional  # expose mounts to main app
      containers:
        - name: frontend
          image: "gcr.io/workbenchdata-ci/frontend:latest"
          # override port: pick 8081. (We'll use haproxy for 8080.)
          command: [ "python", "-m", "uvicorn", "--host", "0.0.0.0", "--port", "8081", "--forwarded-allow-ips", "0.0.0.0", "cjworkbench.asgi:application" ]
          resources:
            requests:
              # We have no SMT, and we want 1 pod per node. Pods have ~1.5 CPUs
              cpu: 1300m
              memory: 2Gi
            limits:
              cpu: 1300m
              memory: 2Gi
          ports:
            - name: http
              containerPort: 8081
          # readinessProbe *could* go here:
          #   httpGet:
          #     path: /healthz
          #     port: 8081
          # ... but it's better to put it on haproxy. The request ends up here
          # anyway, and it tests more of the pod. (Readiness probes run on
          # containers, but they _affect_ the entire pod. Not to be confused
          # with _liveness_ probes, which restart containers.)
          env:
            - name: CJW_PRODUCTION
              value: 'True'
            - name: PYTHONUNBUFFERED
              value: '1'
            - name: ASGI_THREADS
              value: '5'
            - name: CJW_GOOGLE_ANALYTICS
              value: UA-104106561-1
            - name: CJW_HEAP_ANALYTICS_ID
              value: '70406982'
            - name: CJW_DB_HOST
              value: localhost  # cloud-sql-proxy
            - name: CJW_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-cjworkbench-credentials
                  key: password
            - name: CJW_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-secret-key
                  key: value
            - name: CJW_INTERCOM_APP_ID
              valueFrom:
                secretKeyRef:
                  name: cjw-intercom-secret
                  key: APP_ID
            - name: CJW_INTERCOM_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cjw-intercom-secret
                  key: ACCESS_TOKEN
            - name: CJW_SENDGRID_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-sendgrid-api-key
                  key: value
            - name: STRIPE_PUBLIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-stripe-secret
                  key: STRIPE_PUBLIC_API_KEY
            - name: STRIPE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: cjw-stripe-secret
                  key: STRIPE_API_KEY
            - name: STRIPE_WEBHOOK_SIGNING_SECRET
              valueFrom:
                secretKeyRef:
                  name: cjw-stripe-secret
                  key: STRIPE_WEBHOOK_SIGNING_SECRET
            - name: CJW_SENDGRID_CONFIRMATION_ID
              value: d-cf03717d432e46d38e0b6b5b19f80b57
            - name: CJW_SENDGRID_PASSWORD_RESET_ID
              value: d-7cc8e91286bb4c87a9484f331407568a
            - name: HTTPS
              value: 'on'
            - name: CJW_GOOGLE_CLIENT_SECRETS
              value: secrets/google-oauth-secret/google-oauth-secret.json
            - name: CJW_INTERCOM_CLIENT_SECRETS
              value: secrets/intercom-oauth-secret/intercom-oauth-secret.json
            - name: CJW_TWITTER_CLIENT_SECRETS
              value: secrets/twitter-oauth-secret/twitter-oauth-secret.json
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-access-key
                  key: access_key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-access-key
                  key: secret_key
            - name: MINIO_URL
              value: 'http://minio-service'
            - name: MINIO_BUCKET_PREFIX
              value: ""
            - name: MINIO_BUCKET_SUFFIX
              valueFrom:
                configMapKeyRef:
                  name: workbench-config
                  key: domainNameWithLeadingDot
            - name: MINIO_STATIC_URL_PATTERN
              value: 'https://storage.googleapis.com/static$(MINIO_BUCKET_SUFFIX)/'
            - name: MINIO_EXTERNAL_URL
              value: "https://user-files$(MINIO_BUCKET_SUFFIX)"
            - name: _RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-1-rabbitmq-secret
                  key: rabbitmq-pass
            - name: CJW_RABBITMQ_HOST
              value: "amqp://rabbit:$(_RABBITMQ_PASSWORD)@rabbitmq-1-rabbitmq-svc/"
          volumeMounts:
            - mountPath: /app/secrets/google-oauth-secret
              name: google-oauth-secret
              readOnly: true
            - mountPath: /app/secrets/intercom-oauth-secret
              name: intercom-oauth-secret
              readOnly: true
            - mountPath: /app/secrets/twitter-oauth-secret
              name: twitter-oauth-secret
              readOnly: true
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
        - name: http-redirect
          image: "haproxy:2.1.2"
          command: [ "haproxy", "-f", "/usr/local/etc/haproxy/haproxy.cfg", "-m", "90", "-db" ]
          resources:
            requests:
              cpu: 0.1
              memory: 100Mi
            limits:
              memory: 100Mi
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          volumeMounts:
            - mountPath: /usr/local/etc/haproxy/haproxy.cfg
              name: frontend-http-redirect-config
              subPath: haproxy.cfg
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.18.0
          env:
            - name: PROJECT_NAME
              valueFrom:
                configMapKeyRef:
                  name: gcloud-config
                  key: PROJECT_NAME
          command:
            - "/cloud_sql_proxy"
            - "-ip_address_types=PRIVATE"
            - "-log_debug_stdout=true"
            - "-instances=$(PROJECT_NAME):us-central1:postgres=tcp:5432"
          securityContext:
            runAsNonRoot: true
        - name: teardown-sandboxes
          # "any volume mounts created by Containers in Pods must be destroyed
          # (unmounted) by the Containers on termination"
          # -- https://kubernetes.io/docs/concepts/storage/volumes/#mount-propagation
          image: "gcr.io/workbenchdata-ci/migrate:latest"
          command: ["sh", "-c", "sleep infinity"]  # do nothing, until exit. (sh responds to INT signal)
          securityContext:
            privileged: true  # so it can unmount
          lifecycle:
            preStop:
              exec:
                command: ["bash", "-x", "/app/cjwkernel/teardown-sandboxes.sh"]
          volumeMounts:
            - mountPath: /var/lib/cjwkernel/chroot
              name: chroot
              mountPropagation: Bidirectional  # expose mounts to main app
      volumes:
        - name: google-oauth-secret
          secret:
            secretName: google-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: google-oauth-secret.json
        - name: intercom-oauth-secret
          secret:
            secretName: intercom-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: intercom-oauth-secret.json
        - name: twitter-oauth-secret
          secret:
            secretName: twitter-oauth-secret
            defaultMode: 0400
            items:
              - key: json
                path: twitter-oauth-secret.json
        - name: chroot
          emptyDir: {}
        - name: frontend-http-redirect-config
          configMap:
            name: frontend-http-redirect-config
